{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.7", "generated_at": "2024-04-10T12:22:47.416544Z", "invocation_id": "2b3d915b-3573-4625-8517-a090c24c9886", "env": {}, "project_id": "d6da6301dc4774717b46fe87407619f7", "user_id": "b52eac03-7f42-47a7-b3cf-0122249f1149", "send_anonymous_usage_stats": true, "adapter_type": "clickhouse"}, "nodes": {"test.etlcraft.test_normalize": {"database": null, "schema": "test_dbt_test__audit", "name": "test_normalize", "resource_type": "test", "package_name": "etlcraft", "path": "test_normalize.sql", "original_file_path": "tests/test_normalize.sql", "unique_id": "test.etlcraft.test_normalize", "fqn": ["etlcraft", "test_normalize"], "alias": "test_normalize", "checksum": {"name": "sha256", "checksum": "194a9aa2504e825b776fb314e3cc3ec7faf597232ab888268d6eefe44011e95c"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1712751768.4436562, "relation_name": null, "raw_code": "{% set source_query %}\r\n(SELECT '{\"x\": 1, \"y\": \"2\", \"mydatetime\": \"3\"}' AS _airbyte_data, NOW() AS _airbyte_emitted_at, 'source' AS _dbt_source_relation\r\nUNION ALL SELECT '{\"x\": 1, \"y\": \"2\", \"mydate\": \"4\"}' AS _airbyte_data, NOW() AS _airbyte_emitted_at, 'source' AS _dbt_source_relation)\r\n{% endset %}\r\n{% set my_dict %}\r\nsourcetypes:\r\n  testsource:\r\n    included_fields:\r\n    - test_field1\r\n    - test_field2\r\n    - test_field3\r\n    - test_field4\r\n    excluded_fields:\r\n    - x\r\n    streams:\r\n      project_goals:\r\n        included_fields:\r\n        - test field 5\r\n        - test field 6\r\n{% endset %}\r\n{% set normalized_query = normalize(source_table=source_query, \r\noverride_target_model_name='normalize_testsource_testtemplate_project_goals') %}\r\n\r\nSELECT 'Invalid row count' \r\nWHERE (SELECT COUNT(*) FROM ({{ normalized_query }})) != 2\r\n\r\nUNION ALL SELECT 'Invalid column count'\r\nWHERE {{ get_column_count_in_subquery(normalized_query) }} != 3 + 3\r\n\r\nUNION ALL SELECT 'Invalid column count - excluded fields'\r\nWHERE {{ get_column_count_in_subquery(normalize(source_table=source_query,\r\n    override_target_model_name='normalize_testsource_testtemplate_project_goals', \r\n    excluded_fields=['x', 'z'])) }} != 3 + 3 - 1\r\n\r\nUNION ALL SELECT 'Invalid column count - included fields'\r\nWHERE {{ get_column_count_in_subquery(normalize(source_table=source_query,\r\n    override_target_model_name='normalize_testsource_testtemplate_project_goals', \r\n    included_fields=['x', 'z'])) }} != 3 + 3 + 1\r\n\r\nUNION ALL SELECT 'Invalid column count - defaults dict'\r\nWHERE {{ get_column_count_in_subquery(normalize(source_table=source_query,\r\n    override_target_model_name='normalize_testsource_testtemplate_project_goals', \r\n    defaults_dict=fromyaml(my_dict))) }} != 3 + 3 + 6 - 1   \r\n\r\nUNION ALL SELECT DISTINCT 'mydate field was not renamed to __datetime '\r\nFROM ({{ normalize(source_table=source_query,\r\n    override_target_model_name='normalize_testsource_testtemplate_project_goals', debug_column_names=True) }})\r\nWHERE toString(tuple(*)) LIKE '%mydatetime%' OR NOT toString(tuple(*)) LIKE '%\\_\\_datetime%'\r\n\r\nUNION ALL SELECT DISTINCT 'x field was not renamed to __datetime'\r\nFROM ({{ normalize(source_table=source_query, incremental_datetime_field='x',\r\n    override_target_model_name='normalize_testsource_testtemplate_project_goals', debug_column_names=True) }})\r\nWHERE toString(tuple(*)) NOT LIKE '%mydatetime%' \r\nOR toString(tuple(*)) LIKE '%x%' OR NOT toString(tuple(*)) LIKE '%\\_\\_datetime%'\r\n\r\nUNION ALL SELECT DISTINCT 'Error when no datetime field'\r\nFROM ({{ normalize(source_table=source_query, incremental_datetime_field=False,\r\n    override_target_model_name='normalize_testsource_testtemplate_project_goals', debug_column_names=True) }})\r\nWHERE toString(tuple(*)) NOT LIKE '%mydatetime%' \r\nOR toString(tuple(*)) NOT LIKE '%x%' OR toString(tuple(*)) LIKE '%\\_\\_datetime%'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etlcraft.normalize", "macro.etlcraft.get_column_count_in_subquery"], "nodes": []}, "compiled_path": null}, "test.etlcraft.test_get_column_count_in_subquery": {"database": null, "schema": "test_dbt_test__audit", "name": "test_get_column_count_in_subquery", "resource_type": "test", "package_name": "etlcraft", "path": "test_get_column_count_in_subquery.sql", "original_file_path": "tests/test_get_column_count_in_subquery.sql", "unique_id": "test.etlcraft.test_get_column_count_in_subquery", "fqn": ["etlcraft", "test_get_column_count_in_subquery"], "alias": "test_get_column_count_in_subquery", "checksum": {"name": "sha256", "checksum": "56e8e53b72d5d97718176d29566a4e0e26170f9940a4938ceb2cd123c846d062"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1712751768.4788764, "relation_name": null, "raw_code": "{% set subquery = \"SELECT 1, 'string', '', 'string with \\\" and with \\'''\" %}\r\n{% set result = get_column_count_in_subquery(subquery) %}\r\n\r\nSELECT 1 AS x\r\nwhere {{ result}}=3", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etlcraft.get_column_count_in_subquery"], "nodes": []}, "compiled_path": null}, "test.etlcraft.test_get_min_max_date": {"database": null, "schema": "test_dbt_test__audit", "name": "test_get_min_max_date", "resource_type": "test", "package_name": "etlcraft", "path": "test_get_min_max_date.sql", "original_file_path": "tests/test_get_min_max_date.sql", "unique_id": "test.etlcraft.test_get_min_max_date", "fqn": ["etlcraft", "test_get_min_max_date"], "alias": "test_get_min_max_date", "checksum": {"name": "sha256", "checksum": "18d5000fe50748ba8b91a2be56f0054cc41b179f2bd269bf9d162773706c08d0"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1712751768.4834888, "relation_name": null, "raw_code": "{% set source_query %}\n    SELECT \n    'dbt_test__audit' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    '__datetime' as name,\n    '2023-12-01' as __datetime\n    UNION all\n    SELECT \n    'dbt_test__audit' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    'test_col2'as name,\n    '2023-12-02' as __datetime\n    UNION all\n    SELECT \n    '' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    '__datetime' as name,\n    '2023-12-03' as __datetime\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    '__datetime' as name,\n    '2023-12-01' as __datetime\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    'test_col2' as name,\n    '2023-12-02' as __datetime\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    'test_col3' as name,\n    '2023-12-03' as __datetime\n{% endset %}\n\n{% set min_max_date = get_min_max_date('incremental','testsourcetypename','testtemplatename',source_query) %}\n\n{% set date_from = min_max_date.get('date_from')[0] %}\n{% set date_to = min_max_date.get('date_to')[0] %}\n\n{% set date_from_str = min_max_date.get('date_from')[0] ~'' %}\n{% set date_to_str = min_max_date.get('date_to')[0] ~''  %}\n\n{%- set date_from_parts = date_from_str.split('-') -%}\n{%- set date_to_parts = date_to_str.split('-') -%}\n\n{%- set date_from_int = (date_from_parts[0]~date_from_parts[1]~date_from_parts[2])| int -%}\n{%- set date_to_int = (date_to_parts[0]~date_to_parts[1]~date_to_parts[2])| int -%}\n\n\n{% if date_from is undefined or date_to is undefined  %}\nSELECT 'date var is undefined' \n{% elif date_from_int > date_to_int %} \nSELECT 'date_from greater then date_to' \n{% else %}\nSELECT 'test' where 1!=1\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etlcraft.get_min_max_date"], "nodes": []}, "compiled_path": null}, "test.etlcraft.test_normalize_name": {"database": null, "schema": "test_dbt_test__audit", "name": "test_normalize_name", "resource_type": "test", "package_name": "etlcraft", "path": "test_normalize_name.sql", "original_file_path": "tests/test_normalize_name.sql", "unique_id": "test.etlcraft.test_normalize_name", "fqn": ["etlcraft", "test_normalize_name"], "alias": "test_normalize_name", "checksum": {"name": "sha256", "checksum": "dd8f7694bb2de711c04bd5381dbfed79f5c8a979e8de3b36cd7912a0d0f95f13"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1712751768.5046122, "relation_name": null, "raw_code": "{% set inputs = [\"Space Name\", \"\u041f\u0440\u0440\u0438\u0432\u0435\u0442, \u041c\u0438\u0440!\", \"Start 12\"] %}\r\n{% set expected_outputs = [\"Space_Name\", \"Prrivet_Mir\", \"Start_12\"] %}\r\n\r\nSELECT\r\n{% for input, expected_output in zip(inputs, expected_outputs) -%}\r\n    {% if not loop.first -%} UNION ALL SELECT {% endif %}\r\n    'Test failed for input \"{{ input }}\". Expected output: \"{{ expected_output }}\", actual output: \"{{ normalize_name(input) }}\"' \r\n    WHERE '{{ normalize_name(input) }}' != '{{ expected_output }}'\r\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etlcraft.normalize_name"], "nodes": []}, "compiled_path": null}, "test.etlcraft.test_get_from_default_dict": {"database": null, "schema": "test_dbt_test__audit", "name": "test_get_from_default_dict", "resource_type": "test", "package_name": "etlcraft", "path": "test_get_from_default_dict.sql", "original_file_path": "tests/test_get_from_default_dict.sql", "unique_id": "test.etlcraft.test_get_from_default_dict", "fqn": ["etlcraft", "test_get_from_default_dict"], "alias": "test_get_from_default_dict", "checksum": {"name": "sha256", "checksum": "1e2eb8c1bb22dee5a6375dfa75459fb0859ecbf960024222bef7364f8fdc197f"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1712751768.5200841, "relation_name": null, "raw_code": "{% set my_dict = {\r\n    'fruit': {\r\n        'color': 'red',\r\n        'name': 'apple',\r\n        'details': {\r\n            'origin': 'Washington',\r\n            'variety': 'Red Delicious'\r\n        }\r\n    },\r\n    'animal': {\r\n        'type': 'dog',\r\n        'name': 'Rex',\r\n        'details': {\r\n            'breed': 'Labrador',\r\n            'color': 'Black'\r\n        }\r\n    }\r\n} %}\r\n\r\n{% set test1 = get_from_default_dict(my_dict, ['fruit', 'color']) %}\r\n{% set test2 = get_from_default_dict(my_dict, ['animal', 'details', 'breed']) %}\r\n{% set test3 = get_from_default_dict(my_dict, ['fruit', 'details', 'origin']) %}\r\n{% set test4 = get_from_default_dict(my_dict, ['animal', 'type']) %}\r\n{% set test5 = get_from_default_dict(my_dict, ['fruit', 'taste']) %}\r\n{% set test6 = get_from_default_dict(my_dict, ['animal', 'details', 'age'], 'Unknown') %}\r\n{% set test7 = get_from_default_dict(my_dict, ['fruit', 'details', 'size'], 'N/A') %}\r\n\r\nSELECT 'Test1 failed - expected red' WHERE '{{ test1 }}' != 'red'\r\nUNION ALL SELECT 'Test2 failed - expected Labrador' WHERE '{{ test2 }}' != 'Labrador'\r\nUNION ALL SELECT 'Test3 failed - expected Washington' WHERE '{{ test3 }}' != 'Washington'\r\nUNION ALL SELECT 'Test4 failed - expected dog' WHERE '{{ test4 }}' != 'dog'\r\nUNION ALL SELECT 'Test5 failed - expected {}' WHERE '{{ test5 }}' != '{}'\r\nUNION ALL SELECT 'Test6 failed - expected Unknown' WHERE '{{ test6 }}' != 'Unknown'\r\nUNION ALL SELECT 'Test7 failed - expected N/A' WHERE '{{ test7 }}' != 'N/A'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etlcraft.get_from_default_dict"], "nodes": []}, "compiled_path": null}, "test.etlcraft.test_json_list_keys": {"database": null, "schema": "test_dbt_test__audit", "name": "test_json_list_keys", "resource_type": "test", "package_name": "etlcraft", "path": "test_json_list_keys.sql", "original_file_path": "tests/test_json_list_keys.sql", "unique_id": "test.etlcraft.test_json_list_keys", "fqn": ["etlcraft", "test_json_list_keys"], "alias": "test_json_list_keys", "checksum": {"name": "sha256", "checksum": "b73061bb36bd28869ff396a827df36afaedc4a575490c015a112ab155b157600"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1712751768.5300052, "relation_name": null, "raw_code": "SELECT 'The key set doesn''t match'\r\n    FROM (SELECT '{\"access\": 0, \"custom_interaction\": 0, \"goal_id\": 0}' AS _airbyte_data) \r\n    WHERE {{ json_list_keys(\"_airbyte_data\") }} != {{ array([\"'access'\", \"'custom_interaction'\", \r\n         \"'goal_id'\"]) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etlcraft.json_list_keys", "macro.etlcraft.array"], "nodes": []}, "compiled_path": null}, "test.etlcraft.test_find_incremental_datetime_field": {"database": null, "schema": "test_dbt_test__audit", "name": "test_find_incremental_datetime_field", "resource_type": "test", "package_name": "etlcraft", "path": "test_find_incremental_datetime_field.sql", "original_file_path": "tests/test_find_incremental_datetime_field.sql", "unique_id": "test.etlcraft.test_find_incremental_datetime_field", "fqn": ["etlcraft", "test_find_incremental_datetime_field"], "alias": "test_find_incremental_datetime_field", "checksum": {"name": "sha256", "checksum": "a14607cb42bf4b174b2d777e008fb0770f03b2c1f0c9265912aa1a4262b3ae24"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1712751768.5374768, "relation_name": null, "raw_code": "{% set column_list_created_at = ['id', 'name', 'created_at', 'updated_at'] %}\r\n{% set column_list_mydatetime = ['id', 'name', 'created_at', 'mydatetime'] %}\r\n{% set table_name = \"normalize_testsourcetypename_testtemplatename_teststreamname\" %}\r\n\r\nSELECT\r\n'Error: Incorrect datetime field identified without dict by name'\r\nWHERE '{{ find_incremental_datetime_field(column_list_mydatetime, table_name) }}' != 'mydatetime'\r\n\r\n{% set my_dict %}\r\nsourcetypes:\r\n  testsourcetypename:\r\n    incremental_datetime_field: updated_at\r\n{% endset %}\r\n\r\nUNION ALL SELECT\r\n'Error: Incorrect datetime field identified with dict for source type'\r\nWHERE '{{ find_incremental_datetime_field(column_list_created_at, table_name, \r\n  defaults_dict=fromyaml(my_dict)) }}' != 'updated_at'\r\n\r\n{% set my_dict2 %}\r\nsourcetypes:\r\n  testsourcetypename:\r\n    incremental_datetime_field: updated_at\r\n    streams:\r\n      teststreamname:\r\n        incremental_datetime_field: created_at\r\n{% endset %}\r\n\r\nUNION ALL SELECT\r\n'Error: Incorrect datetime field identified with dict for stream'\r\nWHERE '{{ find_incremental_datetime_field(column_list_created_at, table_name, \r\n    defaults_dict=fromyaml(my_dict2)) }}' != 'created_at'\r\n\r\n{% set my_dict3 %}\r\nsourcetypes:\r\n  testsourcetypename:\r\n    incremental_datetime_field: updated_at\r\n    streams:\r\n      teststreamname:\r\n        incremental_datetime_field: False\r\n{% endset %}\r\n\r\nUNION ALL SELECT\r\n'Error: Incorrect datetime field identified when there is no incremental field'\r\nWHERE '{{ find_incremental_datetime_field(column_list_created_at, table_name, \r\n    defaults_dict=fromyaml(my_dict3)) == False }}' != 'True'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etlcraft.find_incremental_datetime_field"], "nodes": []}, "compiled_path": null}, "test.etlcraft.test_get_relations_dist": {"database": null, "schema": "test_dbt_test__audit", "name": "test_get_relations_dist", "resource_type": "test", "package_name": "etlcraft", "path": "test_get_relations_dist.sql", "original_file_path": "tests/test_get_relations_dist.sql", "unique_id": "test.etlcraft.test_get_relations_dist", "fqn": ["etlcraft", "test_get_relations_dist"], "alias": "test_get_relations_dist", "checksum": {"name": "sha256", "checksum": "3ca67964624a29df783c9c04b3f7a251cf2c9c1c8fa52599255540b196fd657f"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1712751768.5537188, "relation_name": null, "raw_code": "{% set source_query %}\n    SELECT \n    '' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    'test_col1'as name\n    UNION all\n    SELECT \n    '' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    'test_col2'as name\n    UNION all\n    SELECT \n    '' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    'test_col3'as name\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    'test_col1'as name\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    'test_col2'as name\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    'test_col3'as name\n{% endset %}\n\n{% set relations_dict = etlcraft.get_relations_dict('incremental','testsourcetypename','testtemplatename',source_query) %}\n\n{% if \"incremental_testsourcetypename_testtemplatename\" not in relations_dict %} \nSELECT 'Unknown key'\n{% elif \"normalize_testsourcetypename_testtemplatename\"  in relations_dict %} \nSELECT 'Unknown key'\n{% elif relations_dict is not mapping %} \nSELECT 'Unknown relations_dict type'\n{% else %}\nSELECT 'Unknown key' WHERE 1!=1\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etlcraft.get_relations_dict"], "nodes": []}, "compiled_path": null}}, "sources": {}, "macros": {"macro.etlcraft.get_utmhash": {"name": "get_utmhash", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/get_utmhash.sql", "original_file_path": "macros/get_utmhash.sql", "unique_id": "macro.etlcraft.get_utmhash", "macro_sql": "{% macro get_utmhash(delimiter='~', fields=['adGroupName', 'utmContent', 'utmCampaign', 'adCampaignName']) -%}\r\n{% if fields | length > 1 %}greatest({% endif %}{% for field in fields -%}\r\n  coalesce(extract({{ field }}, '{{ delimiter }}([a-zA-Z0-9]{8})'), ''){% if not loop.last %}, {% endif %}\r\n{%- endfor %}{% if fields | length > 1 %}){% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4392822, "supported_languages": null}, "macro.etlcraft.join": {"name": "join", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/join.sql", "original_file_path": "macros/join.sql", "unique_id": "macro.etlcraft.join", "macro_sql": "{%- macro join(\n  params = none,\n  disable_incremental=none,\n  override_target_model_name=none,\n  date_from = none,\n  date_to = none\n  ) -%}\n\n{%- if execute -%}\n\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0447\u0430\u0441\u0442\u0438 \u0438\u043c\u0435\u043d\u0438 -#}\n{%- set model_name_parts = (override_target_model_name or this.name).split('_') -%}\n{%- set sourcetype_name = model_name_parts[1] -%}\n{%- set pipeline_name = model_name_parts[2] -%}\n\n{#- \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a incremental \u0442\u0430\u0431\u043b\u0438\u0446 \u0438 \u0438\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 table_name: [field1,field2, ... fieldn] -#}\n{%- set relations_dict =  etlcraft.get_relations_dict('incremental',sourcetype_name) -%}\n\n{%- if not disable_incremental %}\n{#- \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a date_from:xxx[0], date_to:yyy[0] \u0438\u0437 union \u0432\u0441\u0435\u0445 normalize \u0442\u0430\u0431\u043b\u0438\u0446 -#}\n  {%- set min_max_date_dict = etlcraft.get_min_max_date('normalize',sourcetype_name) -%}\n  {%- set date_from = min_max_date_dict.get('date_from')[0] -%}\n  {%- set date_to = min_max_date_dict.get('date_to')[0] -%}\n    {{ config(\n        materialized='incremental',\n        order_by=('__date', '__table_name'),\n        incremental_strategy='delete+insert',\n        unique_key=['__date', '__table_name'],\n        on_schema_change='fail'\n    ) }}\n{%- endif -%}\n\n{#- \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0438\u043c\u044f \u043c\u0430\u043a\u0440\u043e\u0441\u0430 - \u0442\u0443\u0434\u0430 \u0431\u0443\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u044d\u0442\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0438\u0434\u0430 \u0434\u0436\u043e\u0439\u043d\u0430 -#}\n{% set macro_name =  'join_'~ sourcetype_name ~'_'~ pipeline_name %}\n\n\n{#- \u0437\u0434\u0435\u0441\u044c \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434.\u0431. \u0442\u0430\u043a\u0438\u043c\u0438 \u0436\u0435 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0432\u0438\u0434\u0435 \u043c\u0430\u043a\u0440\u043e\u0441\u0430 join -#}\n{{ etlcraft[macro_name](sourcetype_name,pipeline_name,relations_dict,date_from,date_to,params)}}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_relations_dict", "macro.etlcraft.get_min_max_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4418013, "supported_languages": null}, "macro.etlcraft.join_yd_datestat": {"name": "join_yd_datestat", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/join_yd_datestat.sql", "original_file_path": "macros/join_yd_datestat.sql", "unique_id": "macro.etlcraft.join_yd_datestat", "macro_sql": "{%- macro join_yd_datestat(\n    sourcetype_name,\n    pipeline_name,\n    relations_dict,\n    date_from,\n    date_to,\n    params\n    ) -%}\n\n{%- set sourcetype_name = 'yd' -%}\n{%- set pipeline_name = 'datestat' -%}\n{%- set table_pattern = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+'  -%}\n{%- set relations = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern) -%}   \n{%- set source_table = '(' ~ dbt_utils.union_relations(relations) ~ ')' -%} \n\nWITH cmps AS (\nSELECT * FROM {{ source_table }}\n{%- if date_from and  date_to %} \nWHERE toDate(__date) BETWEEN '{{date_from}}' AND '{{date_to}}'\n{%- endif -%}\n)\n\nSELECT  \n    toDate(__date) AS __date,\n    toLowCardinality('*') AS reportType, \n    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,\n    toLowCardinality(__table_name) AS __table_name,\n    'Yandex Direct Ads' AS adSourceDirty,\n    '' AS productName,\n    CampaignName AS adCampaignName,\n    CampaignType AS adGroupName,\n    CampaignId AS adId,\n    '' AS adPhraseId,\n    '' AS utmSource,\n    '' AS utmMedium,\n    '' AS utmCampaign,\n    '' AS utmTerm,\n    '' AS utmContent,\n    arrayElement(splitByChar('~', CampaignName), 2) AS utmHash,\n    '' AS adTitle1,\n    '' AS adTitle2,\n    '' AS adText,\n    '' AS adPhraseName,  \n    (toFloat64(Cost)/1000000)*1.2 AS adCost,\n    toInt32(Impressions) AS impressions,\n    toInt32(Clicks) AS clicks,\n    __emitted_at,\n    toLowCardinality('AdCostStat') AS __link \nFROM cmps\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_relations_by_re", "macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.443506, "supported_languages": null}, "macro.etlcraft.array": {"name": "array", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/array.sql", "original_file_path": "macros/array.sql", "unique_id": "macro.etlcraft.array", "macro_sql": "{% macro array(arr) -%}\r\n  {{ adapter.dispatch('array', 'etlcraft')(arr) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4439929, "supported_languages": null}, "macro.etlcraft.default__array": {"name": "default__array", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/array.sql", "original_file_path": "macros/array.sql", "unique_id": "macro.etlcraft.default__array", "macro_sql": "{% macro default__array(arr) -%}\r\n  ARRAY[{{ arr|join(\", \") }}]\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4442403, "supported_languages": null}, "macro.etlcraft.clickhouse__array": {"name": "clickhouse__array", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/array.sql", "original_file_path": "macros/array.sql", "unique_id": "macro.etlcraft.clickhouse__array", "macro_sql": "{% macro clickhouse__array(arr) -%}\r\n  array({{ arr|join(\", \") }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.444473, "supported_languages": null}, "macro.etlcraft.combine": {"name": "combine", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/combine.sql", "original_file_path": "macros/combine.sql", "unique_id": "macro.etlcraft.combine", "macro_sql": "{%- macro combine(\r\n  params = none,\r\n  disable_incremental=none,\r\n  override_target_model_name=none,\r\n  date_from = none,\r\n  date_to = none\r\n  ) -%}\r\n\r\n{%- if execute -%}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0447\u0430\u0441\u0442\u0438 \u0438\u043c\u0435\u043d\u0438 - pipeline \u044d\u0442\u043e \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 datestat -#}\r\n{%- set model_name_parts = (override_target_model_name or this.name).split('_') -%}\r\n{%- set pipeline_name = model_name_parts[1] -%}\r\n\r\n{#- \u0435\u0441\u043b\u0438 \u0438\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d\u0443 - \u0432\u044b\u0434\u0430\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0443 -#}\r\n{%- if model_name_parts|length < 2 or model_name_parts[0] != 'combine' -%}\r\n{{ exceptions.raise_compiler_error('Model name \"' ~ this.name ~ '\" does not follow the expected pattern: \"combine_{pipeline_name}\"') }}\r\n{%- endif -%}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u043f\u0430\u0442\u0442\u0435\u0440\u043d, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 join-\u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430 -#}\r\n{%- set table_pattern = 'join' ~ '_[^_]+_' ~ pipeline_name -%}  \r\n\r\n{#- \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 -#}\r\n{%- set relations = etlcraft.get_relations_by_re(schema_pattern=target.schema, \r\n                                                              table_pattern=table_pattern) -%} \r\n\r\n{#- \u0435\u0441\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u0430\u043a - \u0432\u044b\u0434\u0430\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0443 -#}                                                                  \r\n{%- if not relations -%}\r\n{{ exceptions.raise_compiler_error('No relations were found matching the pattern \"' ~ table_pattern ~ '\". Please ensure that your source data follows the expected structure.') }}\r\n{%- endif -%}\r\n\r\n{#- \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043c\u0430\u043a\u0440\u043e\u0441\u0443  - \u0437\u0434\u0435\u0441\u044c union all \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 -#}\r\n\r\n{#- \u0431\u044b\u043b\u043e \u0432\u043e\u0442 \u0442\u0430\u043a, \u0447\u0435\u0440\u0435\u0437 \u043c\u0430\u043a\u0440\u043e\u0441 dbt_utils.union_relations - \u043d\u043e \u0438\u0437-\u0437\u0430 null \u0431\u044b\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \"Cannot convert NULL to a non-nullable type\"\r\n{%- set source_table = '(' ~ dbt_utils.union_relations(relations, source_column_name=none) ~ ')' -%} -#}\r\n\r\n{#- \u0441\u0442\u0430\u043b\u043e \u0432\u043e\u0442 \u0442\u0430\u043a, \u0447\u0435\u0440\u0435\u0437 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043c\u0430\u043a\u0440\u043e\u0441, \u0447\u0442\u043e\u0431\u044b null \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 '' \u0438\u043b\u0438 0  -#}\r\n{%- set source_table = '(' ~ etlcraft.custom_union_relations(relations, source_column_name=none) ~ ')' -%}\r\n\r\n{#- \u0435\u0441\u043b\u0438 \u043d\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b, \u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a - \u0441\u0435\u0439\u0447\u0430\u0441 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 -#}\r\n\r\nSELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)\r\nFROM {{ source_table }} \r\n    \r\n\r\n{#- \u0435\u0441\u043b\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b, \u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a - \u0441\u0435\u0439\u0447\u0430\u0441 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\r\n{% set macro_name =  'combine_'~ pipeline_name  %}\r\n{{ etlcraft[macro_name](pipeline_name,relations_dict,date_from,date_to,params)}} -#}\r\n\r\n{%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_relations_by_re", "macro.etlcraft.custom_union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4465618, "supported_languages": null}, "macro.etlcraft.get_min_max_date": {"name": "get_min_max_date", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/get_min_max_date.sql", "original_file_path": "macros/get_min_max_date.sql", "unique_id": "macro.etlcraft.get_min_max_date", "macro_sql": "{% macro get_min_max_date(stage,sourcetype_name,pipeline_name,override_target_model_name=none) %}\n\n{% set override_target_model_name = override_target_model_name %}\n\n{% set table_list_query %}\n    SELECT \n        table \n    {% if override_target_model_name is none %}\n    FROM system.columns \n    {% else %}\n     FROM ({{override_target_model_name}})\n    {% endif %}\n    WHERE \n        database ='{{this.schema}}' AND \n        table LIKE '{{stage}}_{{sourcetype_name}}_{{pipeline_name}}_%' AND \n        name='__date'\n{% endset %}\n\n{% set results = run_query(table_list_query) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0] %}\n{% endif %}\n\n{% set min_max_date_query %}\nSELECT max(toDate(min_date)) as date_from,\n       max(toDate(max_date)) as date_to\nFROM (\n{% for table in results_list %}\n    SELECT \n        '{{table}}' as table_name,\n        max(toDate(__date)) as max_date, \n        min(toDate(__date)) as min_date,\n        {{should_full_refresh()}} as should_full_refresh\n    {% if override_target_model_name is none %}\n    FROM {{this.schema}}.{{table}}\n    {% else %}\n     FROM ({{override_target_model_name}})\n    {% endif %}\n    \n    WHERE toDate(__date) > '1972-01-01'\n    {% if not loop.last %}\n        UNION ALL\n    {% endif %}\n{% endfor %}\n)\nWHERE min_date > '1972-01-01'\n{% endset %}\n\n{% set min_max_date = dbt_utils.get_query_results_as_dict(min_max_date_query) %}\n\n{{ return(min_max_date) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.should_full_refresh", "macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4493196, "supported_languages": null}, "macro.etlcraft.cast_datetime_field": {"name": "cast_datetime_field", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/cast_datetime_field.sql", "original_file_path": "macros/cast_datetime_field.sql", "unique_id": "macro.etlcraft.cast_datetime_field", "macro_sql": "{% macro cast_datetime_field(f) -%}\r\n  {{ adapter.dispatch('cast_datetime_field', 'etlcraft')(f) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__cast_datetime_field"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.449819, "supported_languages": null}, "macro.etlcraft.clickhouse__cast_datetime_field": {"name": "clickhouse__cast_datetime_field", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/cast_datetime_field.sql", "original_file_path": "macros/cast_datetime_field.sql", "unique_id": "macro.etlcraft.clickhouse__cast_datetime_field", "macro_sql": "{% macro clickhouse__cast_datetime_field(f) -%}\r\n  toDateTime({{ f }}, 'UTC')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4500153, "supported_languages": null}, "macro.etlcraft.check_table_exists": {"name": "check_table_exists", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/check_table_exists.sql", "original_file_path": "macros/check_table_exists.sql", "unique_id": "macro.etlcraft.check_table_exists", "macro_sql": "{% macro check_table_exists(source_table = 'master',database = 'marts') -%}\n  {{ adapter.dispatch('check_table_exists', 'etlcraft')(source_table,database) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__check_table_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.450884, "supported_languages": null}, "macro.etlcraft.clickhouse__check_table_exists": {"name": "clickhouse__check_table_exists", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/check_table_exists.sql", "original_file_path": "macros/check_table_exists.sql", "unique_id": "macro.etlcraft.clickhouse__check_table_exists", "macro_sql": "{% macro clickhouse__check_table_exists(source_table,database) -%}\n    {% set sql_statement %}\n        SELECT 1 FROM system.tables WHERE database = '{{database}}' AND name = '{{source_table}}'\n    {% endset %}\n    {% if execute %}\n        {% set results = run_query(sql_statement) %}\n        {% if results|length > 0 %}\n            {{ return(1) }}\n        {% else %}\n            {{ return(0) }}\n        {% endif %}\n    {% else %}\n        {{ return(0) }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4518707, "supported_languages": null}, "macro.etlcraft.custom_union_relations": {"name": "custom_union_relations", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/custom_union_relations.sql", "original_file_path": "macros/custom_union_relations.sql", "unique_id": "macro.etlcraft.custom_union_relations", "macro_sql": "{%- macro custom_union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                toLowCardinality('{{ relation.name }}')  as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) if col_name in relation_columns[relation] else col.data_type %}\n                    {%- set col_expr = adapter.quote(col_name) if col_name in relation_columns[relation] else (\"''\" if 'String' in col_type else \"0\") %}\n                            to{{ col_type.split('(')[0] }}({{ col_expr }}) as {{ col.name }} {% if not loop.last %},{% endif -%}\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4572144, "supported_languages": null}, "macro.etlcraft.etlcraft_defaults": {"name": "etlcraft_defaults", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/etlcraft_defaults.sql", "original_file_path": "macros/etlcraft_defaults.sql", "unique_id": "macro.etlcraft.etlcraft_defaults", "macro_sql": "{% macro etlcraft_defaults() %}\r\n{% set etlcraft_defaults_dict %}\r\nsourcetypes:\r\n  example:\r\n    included_fields:\r\n    - test_field\r\n  appsflyer:\r\n    incremental_datetime_field: event_time\r\n    streams:\r\n      installs:\r\n        incremental_datetime_field: install_time\r\n      post_attribution_installs:\r\n        incremental_datetime_field: install_time \r\n{% endset %}\r\n  {{ return(fromyaml(etlcraft_defaults_dict)) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.457798, "supported_languages": null}, "macro.etlcraft.dataset": {"name": "dataset", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/dataset.sql", "original_file_path": "macros/dataset.sql", "unique_id": "macro.etlcraft.dataset", "macro_sql": "{% macro dataset( table_prefixes = none) %}\n\n{{        \n    config(\n        materialized='table',\n        order_by='toDate(__date)'\n        )   \n     }}\n\n    SELECT\n        *\n    FROM {{ ref('master') }}\n    {% if table_prefixes is not none %}\n    WHERE \n        ({{ etlcraft.like_query_cycle(table_prefixes,'__table_name') }})\n    {% endif %}    \n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.like_query_cycle"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4584966, "supported_languages": null}, "macro.etlcraft.join_mt_datestat": {"name": "join_mt_datestat", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/join_mt_datestat.sql", "original_file_path": "macros/join_mt_datestat.sql", "unique_id": "macro.etlcraft.join_mt_datestat", "macro_sql": "{%- macro join_mt_datestat(\n    sourcetype_name,\n    pipeline_name,\n    relations_dict,\n    date_from,\n    date_to,\n    params\n    ) -%}\n\n{%- set sourcetype_name = 'mt' -%}\n{%- set pipeline_name = 'datestat' -%}\n\n{%- set stream_name_banners_statistics = 'banners_statistics' -%}\n{%- set table_pattern_banners_statistics = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ stream_name_banners_statistics ~ '$' -%}\n{%- set relations_banners_statistics = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_banners_statistics) -%}   \n{%- set source_table_banners_statistics = '(' ~ dbt_utils.union_relations(relations_banners_statistics) ~ ')' -%} \n\n{%- set stream_name_banners = 'banners' -%}\n{%- set table_pattern_banners = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ stream_name_banners ~ '$' -%}\n{%- set relations_banners = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_banners) -%}   \n{%- set source_table_banners = '(' ~ dbt_utils.union_relations(relations_banners) ~ ')' -%}\n\n{%- set stream_name_campaigns = 'campaigns' -%}\n{%- set table_pattern_campaigns = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ stream_name_campaigns ~ '$' -%}\n{%- set relations_campaigns = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_campaigns) -%}   \n{%- set source_table_campaigns = '(' ~ dbt_utils.union_relations(relations_campaigns) ~ ')' -%}\n\nWITH banners_statistics AS (\nSELECT * FROM {{ source_table_banners_statistics }}\n{%- if date_from and date_to %} \nWHERE toDate(__date) BETWEEN '{{date_from}}' AND '{{date_to}}'\n{%- endif -%}\n),\n\nbanners AS (\nSELECT * FROM {{ source_table_banners }}\n),\n\ncampaigns AS (\nSELECT * FROM {{ source_table_campaigns }}\n)\n\nSELECT \n    toDate(banners_statistics.__date) AS __date,\n    toLowCardinality('*') AS reportType,  \n    toLowCardinality(splitByChar('_', banners_statistics.__table_name)[6]) AS accountName,\n    toLowCardinality(banners_statistics.__table_name) AS __table_name,\n    'MyTarget' AS adSourceDirty,\n    '' AS productName,\n    campaigns.name AS adCampaignName,\n    '' AS adGroupName,\n    banners.id AS adId,\n    '' AS adPhraseId,\n    extract(JSON_VALUE(replaceAll(banners.urls, '''', '\"'), '$.primary.url'), 'utm_source=([^&]*)') AS utmSource,\n    extract(JSON_VALUE(replaceAll(banners.urls, '''', '\"'), '$.primary.url'), 'utm_medium=([^&]*)') AS utmMedium,\n    extract(JSON_VALUE(replaceAll(banners.urls, '''', '\"'), '$.primary.url'), 'utm_campaign=([^&]*)') AS utmCampaign,\n    extract(JSON_VALUE(replaceAll(banners.urls, '''', '\"'), '$.primary.url'), 'utm_term=([^&]*)') AS utmTerm,\n    extract(JSON_VALUE(replaceAll(banners.urls, '''', '\"'), '$.primary.url'), 'utm_content=([^&]*)') AS utmContent,\n    {{ etlcraft.get_utmhash('__') }} AS utmHash,\n    JSON_VALUE(replaceAll(banners.textblocks, '''', '\"'), '$.title_25.text') AS adTitle1,\n    '' AS adTitle2,\n    assumeNotNull(coalesce(nullif(JSON_VALUE(replaceAll(banners.textblocks, '''', '\"'), '$.text_90.text'), ''),\n    JSON_VALUE(replaceAll(banners.textblocks, '''', '\"'), '$.text_220.text'), '')) AS adText,\n    '' AS adPhraseName,\n    toFloat64(JSONExtractString(banners_statistics.base, 'spent'))* 1.2 AS adCost,\n    toInt32(JSONExtractString(banners_statistics.base, 'shows')) AS impressions,\n    toInt32(JSONExtractString(banners_statistics.base, 'clicks')) AS clicks,\n    banners_statistics.__emitted_at AS __emitted_at,\n    toLowCardinality('AdCostStat') AS __link \nFROM banners_statistics\nJOIN banners ON banners_statistics.banner_id = banners.id \nJOIN campaigns ON banners.campaign_id = campaigns.id\n\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_relations_by_re", "macro.dbt_utils.union_relations", "macro.etlcraft.get_utmhash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4625635, "supported_languages": null}, "macro.etlcraft.incremental": {"name": "incremental", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/incremental.sql", "original_file_path": "macros/incremental.sql", "unique_id": "macro.etlcraft.incremental", "macro_sql": "{%- macro incremental(\r\n    defaults_dict=etlcraft.etlcraft_defaults(), \r\n    disable_incremental=False) -%}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0438\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0447\u0435\u0440\u0435\u0437 \u0438\u043c\u0435\u044e\u0449\u0435\u0435\u0441\u044f \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 -#}\r\n{%- set model_name = this.name -%}\r\n\r\n{#- \u0435\u0441\u043b\u0438 \u0438\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d\u0443 - \u0432\u044b\u0434\u0430\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0443 -#}\r\n{#- Verify the naming convention of the model -#}\r\n{%- if not model_name.startswith('incremental_') -%}\r\n    {{ exceptions.raise_compiler_error(\"Model name does not match the expected naming convention: 'incremental_{sourcetype_name}_{pipeline_name}_{template_name}_{stream_name}'.\") }}\r\n{%- endif -%}\r\n\r\n{#- \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0438\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 normalize - \u044d\u0442\u043e \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0434\u043b\u044f FROM \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 -#}\r\n{#- Derive the normalized relation's name from the incremental model's name -#}\r\n{%- set model_name_parts = model_name.split('_') -%}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 - \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a, \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d, \u0448\u0430\u0431\u043b\u043e\u043d, \u043f\u043e\u0442\u043e\u043a, \u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 -#}\r\n{%- set sourcetype_name = model_name_parts[1] -%}\r\n{%- set pipeline_name = model_name_parts[2] -%}\r\n{%- set template_name = model_name_parts[3] -%}\r\n{%- set stream_name_parts = model_name_parts[4:] -%}\r\n{%- set stream_name = '_'.join(stream_name_parts) -%}\r\n{%- set normalized_relation_name = 'normalize_' ~ sourcetype_name ~ '_' ~ pipeline_name ~ '_' ~ template_name ~ '_' ~ stream_name -%}\r\n\r\n{#- \u0431\u044b\u043b\u043e \u0432\u043e\u0442 \u0442\u0430\u043a set normalized_relation_name = 'normalize_' + model_name_parts[1] + '_' + model_name_parts[2] + '_' model_name_parts[3] + '_'.join(model_name_parts[4:]) -#}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0435\u0441\u043b\u0438 \u0435\u0433\u043e \u043d\u0435\u0442 -#}\r\n{#- Determine the incremental datetime field (IDF) if not provided -#}\r\n{%- if disable_incremental -%}\r\n    {%- set incremental_datetime_field = False -%}    \r\n{%- else -%}\r\n  {%- set incremental_datetime_field = etlcraft.find_incremental_datetime_field([], normalized_relation_name, defaults_dict=defaults_dict, do_not_throw=True) -%}\r\n{%- endif -%}\r\n\r\n{#- \u0435\u0441\u043b\u0438 \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0442\u0430\u043a \u0438 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0431\u0443\u0434\u0435\u043c \u0434\u0435\u043b\u0430\u0442\u044c SELECT * -#}\r\n{#- If IDF is not found, treat this as a simple proxy -#}\r\n{%- if incremental_datetime_field == False  -%}\r\n    SELECT * \r\n{#- If IDF exists, create an incremental model -#}\r\n{#- \u043d\u0438\u0436\u0435 - \u0442\u043e, \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 -#}\r\n{%- else -%}\r\n    {{ config(\r\n        materialized='incremental',\r\n        order_by=('__date', '__table_name'),\r\n        incremental_strategy='delete+insert',\r\n        unique_key=['__date', '__table_name'],\r\n        on_schema_change='fail'\r\n    ) }}\r\nSELECT * \r\nREPLACE({{ etlcraft.cast_date_field('__date') }} AS __date)   \r\n{%- endif %}\r\nFROM {{ ref(normalized_relation_name) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.etlcraft_defaults", "macro.etlcraft.find_incremental_datetime_field", "macro.etlcraft.cast_date_field"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4654005, "supported_languages": null}, "macro.etlcraft.hash_test": {"name": "hash_test", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hash_test.sql", "original_file_path": "macros/hash_test.sql", "unique_id": "macro.etlcraft.hash_test", "macro_sql": "{%- macro hash_test(\n  params = none,\n  disable_incremental=none,\n  override_target_model_name=none,\n  date_from = none,\n  date_to = none\n  ) -%}\n\n\n\n\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\n{%- set entities_list = [] -%}\n{% set registries = metadata['registries'] %}\n\n{% for registry_name in registries  %}\n    {%- set registry_key = registries[registry_name].get('keys') -%}\n    {%- set entity_glue = registries[registry_name].get('glue') -%}\n    {%- if entity_glue -%}  {# \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a True, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e if #}\n        {%- do entities_list.append(registry_key) -%}\n    {%- endif -%} \n{%- endfor -%}\n\n{%- set final_entities_list = [] -%}\n{%- for unique_entity in unique_entities_list  -%}\n    {%- if unique_entity in metadata_entities_list -%}\n        {%- do final_entities_list.append(unique_entity) -%}\n    {%- endif -%}\n{%- endfor -%}\n\n\nSELECT {{entities_list}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4672072, "supported_languages": null}, "macro.etlcraft.join_ym_events": {"name": "join_ym_events", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/join_ym_events.sql", "original_file_path": "macros/join_ym_events.sql", "unique_id": "macro.etlcraft.join_ym_events", "macro_sql": "{%- macro join_ym_events(\r\n    sourcetype_name,\r\n    pipeline_name,\r\n    relations_dict,\r\n    date_from,\r\n    date_to,\r\n    params\r\n    ) -%}\r\n\r\n{%- set sourcetype_name = 'ym' -%}\r\n{%- set pipeline_name = 'events' -%}\r\n{%- set stream_name = 'yandex_metrika_stream' -%}\r\n{%- set table_pattern = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~ '_[^_]+_' ~ stream_name ~ '$' -%}\r\n{%- set relations = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern) -%}   \r\n{%- set source_table = '(' ~ dbt_utils.union_relations(relations) ~ ')' -%} \r\n\r\nWITH events AS (\r\nSELECT * FROM {{ source_table }}\r\n{%- if date_from and  date_to %} \r\nWHERE toDate(__date) BETWEEN '{{date_from}}' AND '{{date_to}}'\r\n{%- endif -%}\r\n)\r\n\r\nSELECT  \r\n    __date, \r\n    __table_name,  \r\n    ymsvisitID As visitId,\r\n    ymsclientID AS clientId,\r\n    extract(ymspurchaseCoupon, '\\'([^\\'\\[\\],]+)') AS promoCode,   \r\n    'web' AS osName,\r\n    ymsregionCity AS cityName,\r\n    lower(ymsregionCity) AS cityCode,\r\n    assumeNotNull(coalesce({{ etlcraft.get_adsourcedirty('ymsUTMSource', 'ymsUTMMedium') }}, \r\n    multiIf(ymslastTrafficSource = 'ad', {{ etlcraft.get_adsourcedirty('ymslastAdvEngine', 'ymslastTrafficSource') }},  \r\n    ymslastTrafficSource = 'organic', {{ etlcraft.get_adsourcedirty('ymslastSearchEngine', 'ymslastTrafficSource') }},  \r\n    {{ etlcraft.get_adsourcedirty('ymslastReferalSource', 'ymslastTrafficSource') }}), '')) AS adSourceDirty, \r\n    ymsUTMSource AS utmSource,\r\n    ymsUTMMedium AS utmMedium,\r\n    ymsUTMCampaign AS utmCampaign,\r\n    ymsUTMTerm AS utmTerm,\r\n    ymsUTMContent AS utmContent,\r\n    ymspurchaseID AS transactionId,\r\n    {{ etlcraft.get_utmhash('__', ['ymsUTMCampaign', 'ymsUTMContent']) }} AS utmHash,\r\n    1 AS sessions,\r\n    if(countSubstrings(ymsgoalsID, '131126368')>0,1,0) AS addToCartSessions, \r\n    if(countSubstrings(ymsgoalsID, '229829884')>0,1,0) AS cartViewSessions, \r\n    if(countSubstrings(ymsgoalsID, '131126557')>0,1,0) AS checkoutSessions, \r\n    if(countSubstrings(ymsgoalsID, '131127241')>0,1,0) AS webSalesSessions, \r\n    countSubstrings(ymsgoalsID, '131127241') AS sales, \r\n    NULL AS amountSales,\r\n    if(countSubstrings(ymsgoalsID, '199402504')>0,1,0) AS registrationCardSessions,\r\n    if(countSubstrings(ymsgoalsID, '199402597')>0,1,0) AS linkingCardToPhoneNumberSessions, \r\n    if(countSubstrings(ymsgoalsID, '226410025')>0,1,0) AS registrationLendingPromotionsSessions, \r\n    if(countSubstrings(ymsgoalsID, '232977064')>0,1,0) AS registrationCashbackSessions, \r\n    if(countSubstrings(ymsgoalsID, '232977580')>0,1,0) AS couponActivationSessions, \r\n    if(countSubstrings(ymsgoalsID, '232977647')>0,1,0) AS participationInLotterySessions,\r\n    toUInt32(ymspageViews) AS pageViews,\r\n    __emitted_at,\r\n    toLowCardinality('VisitStat') AS __link \r\n\r\nFROM events\r\n\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_relations_by_re", "macro.dbt_utils.union_relations", "macro.etlcraft.get_adsourcedirty", "macro.etlcraft.get_utmhash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.470402, "supported_languages": null}, "macro.etlcraft.get_relations_by_re": {"name": "get_relations_by_re", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/clickhouse-adapters.sql", "original_file_path": "macros/clickhouse-adapters.sql", "unique_id": "macro.etlcraft.get_relations_by_re", "macro_sql": "{% macro get_relations_by_re(schema_pattern, table_pattern, database=target.database) -%}\r\n  {{ return(adapter.dispatch('get_relations_by_re', 'etlcraft')(schema_pattern, table_pattern, database)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__get_relations_by_re"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.473133, "supported_languages": null}, "macro.etlcraft.get_tables_by_re_sql": {"name": "get_tables_by_re_sql", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/clickhouse-adapters.sql", "original_file_path": "macros/clickhouse-adapters.sql", "unique_id": "macro.etlcraft.get_tables_by_re_sql", "macro_sql": "{% macro get_tables_by_re_sql(schema_pattern, table_pattern, database=target.database) -%}\r\n  {{ adapter.dispatch('get_tables_by_re_sql', 'etlcraft')(schema_pattern, table_pattern, database) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__get_tables_by_re_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4734585, "supported_languages": null}, "macro.etlcraft.clickhouse__get_tables_by_re_sql": {"name": "clickhouse__get_tables_by_re_sql", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/clickhouse-adapters.sql", "original_file_path": "macros/clickhouse-adapters.sql", "unique_id": "macro.etlcraft.clickhouse__get_tables_by_re_sql", "macro_sql": "{% macro clickhouse__get_tables_by_re_sql(schema_pattern, table_pattern, database=target.database) %}\r\n        select distinct\r\n            table_schema as {{ adapter.quote(\"table_schema\") }},\r\n            table_name as {{ adapter.quote(\"table_name\") }},\r\n            {{ dbt_utils.get_table_types_sql() }}\r\n        from information_schema.tables\r\n        where match(table_schema, '{{ schema_pattern }}')\r\n        and match(table_name, '{{ table_pattern }}')        \r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.473973, "supported_languages": null}, "macro.etlcraft.clickhouse__get_table_types_sql": {"name": "clickhouse__get_table_types_sql", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/clickhouse-adapters.sql", "original_file_path": "macros/clickhouse-adapters.sql", "unique_id": "macro.etlcraft.clickhouse__get_table_types_sql", "macro_sql": "{% macro clickhouse__get_table_types_sql() %}\r\n            case toString(table_type)\r\n                when 'BASE TABLE' then 'table'\r\n                when 'EXTERNAL TABLE' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(toString(table_type))\r\n            end as {{ adapter.quote('table_type') }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.474279, "supported_languages": null}, "macro.etlcraft.clickhouse__get_relations_by_prefix": {"name": "clickhouse__get_relations_by_prefix", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/clickhouse-adapters.sql", "original_file_path": "macros/clickhouse-adapters.sql", "unique_id": "macro.etlcraft.clickhouse__get_relations_by_prefix", "macro_sql": "{% macro clickhouse__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\r\n    {%- endcall -%}\r\n    {%- set table_list = load_result('get_tables') -%}\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=none,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return(none) }}\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4757802, "supported_languages": null}, "macro.etlcraft.clickhouse__get_relations_by_re": {"name": "clickhouse__get_relations_by_re", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/clickhouse-adapters.sql", "original_file_path": "macros/clickhouse-adapters.sql", "unique_id": "macro.etlcraft.clickhouse__get_relations_by_re", "macro_sql": "{% macro clickhouse__get_relations_by_re(schema_pattern, table_pattern, database=target.database) %}\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ etlcraft.get_tables_by_re_sql(schema_pattern, table_pattern, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=none,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return(none) }}\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.etlcraft.get_tables_by_re_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4770536, "supported_languages": null}, "macro.etlcraft.json_extract_string": {"name": "json_extract_string", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.etlcraft.json_extract_string", "macro_sql": "{%- macro json_extract_string(field_name, key) -%}\r\n    {{ return(adapter.dispatch('json_extract_string', 'etlcraft')(field_name, key)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__json_extract_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4775422, "supported_languages": null}, "macro.etlcraft.clickhouse__json_extract_string": {"name": "clickhouse__json_extract_string", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.etlcraft.clickhouse__json_extract_string", "macro_sql": "{% macro clickhouse__json_extract_string(field_name, key) -%}\r\n    JSONExtractString({{ field_name }}, '{{ key }}')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4777813, "supported_languages": null}, "macro.etlcraft.get_adsourcedirty": {"name": "get_adsourcedirty", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/get_adsourcedirty.sql", "original_file_path": "macros/get_adsourcedirty.sql", "unique_id": "macro.etlcraft.get_adsourcedirty", "macro_sql": "{% macro get_adsourcedirty(utm_source='utmSource', utm_medium='utmMedium') -%}\r\nlower(if(length({{ utm_source }}) > 0, concat({{ utm_source }}, ' / ', {{ utm_medium }}), null))\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4781313, "supported_languages": null}, "macro.etlcraft.get_relations_dict": {"name": "get_relations_dict", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/get_relations_dict.sql", "original_file_path": "macros/get_relations_dict.sql", "unique_id": "macro.etlcraft.get_relations_dict", "macro_sql": "{% macro get_relations_dict(stage,sourcetype_name,pipeline_name,override_target_model_name=none) %}\n\n{% set get_relations_query %}\n    SELECT \n        table, \n        groupArray(name) AS fields\n    {% if override_target_model_name is none %}\n    FROM system.columns\n    {% else %}\n    FROM ({{override_target_model_name}})\n    {% endif %}\n    WHERE database = '{{this.shema}}' AND table LIKE '{{stage}}_{{sourcetype_name}}_{{pipeline_name}}_%'\n    GROUP BY table\n\n{% endset %}\n\n\n{% set relations_dict = dbt_utils.get_query_results_as_dict(get_relations_query) %}\n  \n{% set result = {} %}\n{% for i in range(relations_dict.table|length) %}\n    {% set table = relations_dict.table[i] %}\n    {% set field = relations_dict.fields[i] %}\n    {% set result = result.update({table: field}) %}\n{% endfor %}\n\n{{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4797456, "supported_languages": null}, "macro.etlcraft.test_var": {"name": "test_var", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/test_var.sql", "original_file_path": "macros/test_var.sql", "unique_id": "macro.etlcraft.test_var", "macro_sql": "{% macro test_var() %}\n{% set source_query %}\n    SELECT \n    'test' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    '__datetime' as name,\n    '2023-12-01' as __datetime\n    UNION all\n    SELECT \n    'test' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    'test_col2'as name,\n    '2023-12-02' as __datetime\n    UNION all\n    SELECT \n    'test' as database,\n    'incremental_testsourcetypename_testtemplatename' as table,\n    '__datetime' as name,\n    '2023-12-03' as __datetime\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    '__datetime' as name,\n    '2023-12-01' as __datetime\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    'test_col2' as name,\n    '2023-12-02' as __datetime\n    UNION all\n    SELECT \n    '' as database,\n    'normalize_testsourcetypename_testtemplatename' as table,\n    'test_col3' as name,\n    '2023-12-03' as __datetime\n{% endset %}\n\n{% set min_max_date = etlcraft.get_min_max_date('incremental','testsourcetypename','testtemplatename',source_query) %}\n{% set date_from = min_max_date.get('date_from')[0] ~'' %}\n{% set date_to = min_max_date.get('date_to')[0] ~''  %}\n\n{%- set date_from_parts = date_from.split('-') -%}\n{%- set date_to_parts = date_to.split('-') -%}\n\n{%- set date_from_int = (date_from_parts[0]~date_from_parts[1]~date_from_parts[2])| int -%}\n{%- set date_to_int = (date_to_parts[0]~date_to_parts[1]~date_to_parts[2])| int -%}\n\n\n\n{{date_from_int>date_to_int}}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_min_max_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4815066, "supported_languages": null}, "macro.etlcraft.join_vkads_datestat": {"name": "join_vkads_datestat", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/join_vkads_datestat.sql", "original_file_path": "macros/join_vkads_datestat.sql", "unique_id": "macro.etlcraft.join_vkads_datestat", "macro_sql": "{%- macro join_vkads_datestat(\n    sourcetype_name,\n    pipeline_name,\n    relations_dict,\n    date_from,\n    date_to,\n    params\n    ) -%}\n\n\n{%- set sourcetype_name = 'vkads' -%}\n{%- set pipeline_name = 'datestat' -%}\n\n{%- set stream_name_ad_plans_statistics = 'ad_plans_statistics' -%}\n{%- set table_pattern_ad_plans_statistics = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ stream_name_ad_plans_statistics ~ '$' -%}\n{%- set relations_ad_plans_statistics = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_ad_plans_statistics) -%}   \n{%- set source_table_ad_plans_statistics = '(' ~ dbt_utils.union_relations(relations_ad_plans_statistics) ~ ')' -%} \n\n{%- set stream_name_ad_plans = 'ad_plans' -%}\n{%- set table_pattern_ad_plans = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ stream_name_ad_plans ~ '$' -%}\n{%- set relations_ad_plans = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_ad_plans) -%}   \n{%- set source_table_ad_plans = '(' ~ dbt_utils.union_relations(relations_ad_plans) ~ ')' -%}\n\nWITH ad_plans_statistics AS (\nSELECT * FROM {{ source_table_ad_plans_statistics }}\n{%- if date_from and  date_to %} \nWHERE toDate(__date) between '{{date_from}}' and '{{date_to}}'\n{%- endif -%}\n),\n\nad_plans AS (\nSELECT * FROM {{ source_table_ad_plans }}\n)\n\nSELECT\n    toDate(ad_plans_statistics.__date) AS __date,\n    toLowCardinality('') AS reportType,\n    toLowCardinality(splitByChar('_', ad_plans.__table_name)[6]) AS accountName,\n    toLowCardinality(ad_plans.__table_name) AS __table_name,\n    'VK Ads' AS adSourceDirty,\n    '' AS productName,\n    ad_plans.name AS adCampaignName,\n    '' AS adGroupName,\n    ad_plans.id AS adId,\n    '' AS adPhraseId,\n    '' AS utmSource,\n    '' AS utmMedium,\n    '' AS utmCampaign,\n    '' AS utmTerm,\n    '' AS utmContent,\n    '' AS utmHash,\n    '' AS adTitle1,\n    '' AS adTitle2,\n    '' AS adText,\n    '' AS adPhraseName,  \n    toFloat64(JSONExtractString(ad_plans_statistics.base, 'spent'))* 1.2 AS adCost,\n    toInt32(JSONExtractString(ad_plans_statistics.base, 'shows')) AS impressions,\n    toInt32(JSONExtractString(ad_plans_statistics.base, 'clicks')) AS clicks,\n    ad_plans.__emitted_at AS __emitted_at,\n    toLowCardinality('AdCostStat') AS __link \nFROM ad_plans\nJOIN ad_plans_statistics ON ad_plans.id = ad_plans_statistics.ad_plan_id\n\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_relations_by_re", "macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.484101, "supported_languages": null}, "macro.etlcraft.cast_date_field": {"name": "cast_date_field", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/cast_date_field.sql", "original_file_path": "macros/cast_date_field.sql", "unique_id": "macro.etlcraft.cast_date_field", "macro_sql": "{% macro cast_date_field(f) -%}\r\n  {{ adapter.dispatch('cast_date_field', 'etlcraft')(f) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__cast_date_field"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4845688, "supported_languages": null}, "macro.etlcraft.clickhouse__cast_date_field": {"name": "clickhouse__cast_date_field", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/cast_date_field.sql", "original_file_path": "macros/cast_date_field.sql", "unique_id": "macro.etlcraft.clickhouse__cast_date_field", "macro_sql": "{% macro clickhouse__cast_date_field(f) -%}\r\n  toDate({{ f }}, 'UTC')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4847274, "supported_languages": null}, "macro.etlcraft.get_column_count_in_subquery": {"name": "get_column_count_in_subquery", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/get_column_count_in_subquery.sql", "original_file_path": "macros/get_column_count_in_subquery.sql", "unique_id": "macro.etlcraft.get_column_count_in_subquery", "macro_sql": "{% macro get_column_count_in_subquery(subquery) %}\r\n    (select JSONLength(\r\n        replaceRegexpAll(\r\n            replaceRegexpOne(\r\n                replaceRegexpOne(\r\n                    replaceRegexpAll(\r\n                        toString(tuple(*)), \r\n                        '\"', ''), \r\n                    '^\\(', '['), \r\n                '\\)$', ']'),\r\n            '''', \r\n        '\"'))\r\n     from ({{ subquery }}) limit 1)\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.485004, "supported_languages": null}, "macro.etlcraft.hash": {"name": "hash", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hash.sql", "original_file_path": "macros/hash.sql", "unique_id": "macro.etlcraft.hash", "macro_sql": "{%- macro hash(\r\n  params = none,\r\n  disable_incremental=none,\r\n  override_target_model_name=none,\r\n  date_from = none,\r\n  date_to = none\r\n  ) -%}\r\n\r\n{%- if execute -%}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0447\u0430\u0441\u0442\u0438 \u0438\u043c\u0435\u043d\u0438 - pipeline \u044d\u0442\u043e \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 datestat -#}\r\n{%- set model_name_parts = (override_target_model_name or this.name).split('_') -%}\r\n{%- set pipeline_name = model_name_parts[1] -%}\r\n{%- set registry_name = model_name_parts[2:] -%}\r\n{%- set registry_name = '_'.join(registry_name) -%}\r\n\r\n\r\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\r\n\r\n{#- \u0435\u0441\u043b\u0438 \u0438\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d\u0443 - \u0432\u044b\u0434\u0430\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0443 -#}\r\n{%- if model_name_parts|length < 2 or model_name_parts[0] != 'hash' -%}\r\n{{ exceptions.raise_compiler_error('Model name \"' ~ this.name ~ '\" does not follow the expected pattern: \"hash_{pipeline_name}\"') }}\r\n{%- endif -%}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u043f\u0430\u0442\u0442\u0435\u0440\u043d, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 combine-\u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430 -#}\r\n\r\n{%- if pipeline_name == 'registry' -%}\r\n    {%- set table_pattern = 'join_[^_]+_' ~ pipeline_name ~'_'~ registry_name -%}  \r\n{%- else -%}\r\n    {%- set table_pattern = 'combine_' ~ pipeline_name -%}\r\n{%- endif -%}\r\n\r\n\r\n{#- \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443 -#}\r\n{%- set relations = etlcraft.get_relations_by_re(schema_pattern=target.schema, \r\n                                                              table_pattern=table_pattern) -%} \r\n\r\n{#- \u0435\u0441\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u0430\u043a - \u0432\u044b\u0434\u0430\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0443 -#}                                                                  \r\n{%- if not relations -%}\r\n{{ exceptions.raise_compiler_error('No relations were found matching the pattern \"' ~ table_pattern ~ '\". Please ensure that your source data follows the expected structure.') }}\r\n{%- endif -%}\r\n\r\n\r\n{#- \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043c\u0430\u043a\u0440\u043e\u0441\u0443  - \u0437\u0434\u0435\u0441\u044c union all \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 -#}\r\n{%- set source_table = '(' ~ etlcraft.custom_union_relations(relations) ~ ')' -%}\r\n\r\n{{ config(\r\n    materialized='incremental',\r\n    order_by=('__date', '__table_name'),\r\n    incremental_strategy='delete+insert',\r\n    unique_key=['__date', '__table_name'],\r\n    on_schema_change='fail'\r\n) }}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043b\u0438\u043d\u043a\u043e\u0432 -#}\r\n{%- set links = metadata['links'] -%}\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0441\u043f\u0438\u0441\u043a\u0438, \u043a\u0443\u0434\u0430 \u0431\u0443\u0434\u0435\u043c \u043e\u0442\u0431\u0438\u0440\u0430\u0442\u044c \u043b\u0438\u043d\u043a\u0438 \u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 -#}\r\n{%- set links_list = [] -%}\r\n{%- set entities_list = [] -%}\r\n{%- set registry_main_entities_list = [] -%}\r\n{#- \u043e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u043b\u0438\u043d\u043a\u0438 \u0438 \u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 -#}\r\n{%- for link_name in links  -%}\r\n    {%- set link_pipeline = links[link_name].get('pipeline') -%}\r\n    {%- set datetime_field = links[link_name].get('datetime_field') -%}\r\n    {%- set main_entities = links[link_name].get('main_entities') or [] -%}\r\n    {%- set other_entities = links[link_name].get('other_entities') or [] -%}\r\n    {%- set entities = main_entities + other_entities -%}\r\n    {%- if link_pipeline == pipeline_name -%}\r\n        {%- do links_list.append(link_name) -%}\r\n        {%- for entity in entities -%}\r\n            {%- do entities_list.append(entity) -%}\r\n        {%- endfor -%}\r\n    {%- endif -%} \r\n    {%- for  main_entity in main_entities -%}\r\n        {%- if link_pipeline == 'registry'  -%}\r\n            {%- do registry_main_entities_list.append(main_entity) -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n{%- endfor -%}\r\n\r\n\r\n{#- \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u043b\u0438\u043d\u043a\u0430\u043c\r\n\u042d\u0442\u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\r\nSELECT  {{ links_list }}  \r\n\u0434\u043b\u044f hash_datestat \u0432\u044b\u0432\u043e\u0434\u0438\u0442 ['AdCostStat']\r\n\u0434\u043b\u044f hash_events \u0432\u044b\u0432\u043e\u0434\u0438\u0442 ['AppInstallStat', 'AppEventStat', 'AppSessionStat', 'AppDeeplinkStat', 'VisitStat', 'AppProfileMatching']\r\n-#}\r\n\r\n{#- \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u043b\u0438\u043d\u043a\u0430\u043c\r\n\u042d\u0442\u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\r\nSELECT  {{ registry_main_entities_list }}  \r\n\u0434\u043b\u044f hash_datestat \u0432\u044b\u0432\u043e\u0434\u0438\u0442 ['AppMetricaDevice'] \r\n\u0434\u043b\u044f hash_events \u0432\u044b\u0432\u043e\u0434\u0438\u0442 ['AppMetricaDevice'] \r\n-#}\r\n\r\n\r\n{#- \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043b\u0438\u0431\u043e glue=yes, \u043b\u0438\u0431\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u0438\u0437 main_entities -#}\r\n\r\n{#- \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 glue=yes -#}\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u043c\u0435\u0442\u0430\u0434\u0430\u0442\u044b -#}\r\n{%- set metadata_entities = metadata['entities'] -%}\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0439\u0434\u0451\u043c glue='yes' -#}\r\n{%- set metadata_entities_list = [] -%}\r\n{#- \u043e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 -#}\r\n{%- for entity_name in metadata_entities  -%}\r\n    {%- set entity_glue = metadata_entities[entity_name].get('glue') -%}\r\n    {%- if entity_glue -%}  {# \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a True, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e if #}\r\n        {%- do metadata_entities_list.append(entity_name) -%}\r\n    {%- endif -%} \r\n{%- endfor -%}\r\n\r\n{#- \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e glue='yes'\r\n\u042d\u0442\u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\r\nSELECT {{ metadata_entities_list }}\r\n\u0434\u043b\u044f hash_datestat \u0438 hash_events \u0432\u044b\u0432\u043e\u0434\u0438\u0442  ['YmClient', 'CrmUser', 'AppMetricaDevice']\r\n-#}\r\n\r\n\r\n{#- \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c -#}\r\n{%- set unique_entities_list = entities_list|unique|list -%}\r\n\r\n\r\n{#- \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u043c\r\n\u042d\u0442\u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\r\nSELECT {{ unique_entities_list }}\r\n\u0434\u043b\u044f hash_datestat \u0432\u044b\u0432\u043e\u0434\u0438\u0442  ['Account', 'AdSource', 'AdCampaign', 'AdGroup', 'Ad', 'AdPhrase', 'UtmParams', 'UtmHash']\r\n\u0434\u043b\u044f hash_events \u0432\u044b\u0432\u043e\u0434\u0438\u0442 ['Account', 'AppMetricaDevice', 'MobileAdsId', 'CrmUser', 'OsName', 'City', 'AdSource', 'UtmParams', 'UtmHash', 'Transaction', 'PromoCode', 'AppSession', 'Visit', 'YmClient', 'AppMetricaDeviceId']\r\n-#}\r\n\r\n\r\n{#- \u0438\u0437 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u043e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \r\n    \u043b\u0438\u0431\u043e \u0435\u0441\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 glue='yes', \u043b\u0438\u0431\u043e \u0435\u0441\u0442\u044c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 registries -#}\r\n{%- set final_entities_list = [] -%}\r\n{%- for unique_entity in unique_entities_list  -%}\r\n    {%- if unique_entity in registry_main_entities_list or unique_entity in metadata_entities_list -%}\r\n        {%- do final_entities_list.append(unique_entity) -%}\r\n    {%- endif -%}\r\n{%- endfor -%}\r\n\r\n{#- \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0441\u043f\u0438\u0441\u043a\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \r\n\u042d\u0442\u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\r\nSELECT {{ final_entities_list }}\r\n\u0434\u043b\u044f hash_datestat \u0432\u044b\u0432\u043e\u0434\u0438\u0442 []\r\n\u0434\u043b\u044f hash_events \u0432\u044b\u0432\u043e\u0434\u0438\u0442 ['AppMetricaDevice', 'CrmUser', 'YmClient', 'AppMetricaDeviceId']\r\n-#}\r\n\r\n{#- \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 -#} \r\n\r\n\r\n\r\n\r\n\r\nSELECT *,\r\n  assumeNotNull(CASE \r\n{% for link in links_list %}\r\n    {%- set link_hash = link ~ 'Hash' -%}  \r\n    WHEN __link = '{{link}}' \r\n    THEN {{link_hash}} \r\n{% endfor %}\r\n    END) as __id,\r\n\r\n  assumeNotNull(CASE \r\n{% for link_name in links  %}\r\n    {%- set datetime_field = links[link_name].get('datetime_field') -%}\r\n    {%- set link_pipeline = links[link_name].get('pipeline') -%}\r\n    {%- if link_pipeline == pipeline_name -%}\r\n        WHEN __link = '{{link_name}}' \r\n        THEN toDateTime({{datetime_field}})\r\n    {% endif %}\r\n{% endfor %}\r\n    END) as __datetime\r\nFROM (\r\n\r\nSELECT \r\n    *, \r\n    {% for link in links_list %}\r\n        {# \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0445\u044d\u0448\u0438 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043b\u0438\u043d\u043a\u043e\u0432 #}\r\n        {{ etlcraft.link_hash(link, metadata) }}{% if not loop.last %},{% endif -%}  {# \u0441\u0442\u0430\u0432\u0438\u043c \u0437\u0430\u043f\u044f\u0442\u044b\u0435 \u0432\u0435\u0437\u0434\u0435, \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0446\u0438\u043a\u043b\u0430 #}\r\n    {% endfor %}\r\n    {%- if final_entities_list and links_list -%},{%- endif -%} {# \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u0441\u0442\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u0434 \u0438\u0445 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0437\u0430\u043f\u044f\u0442\u0443\u044e #}\r\n    {% for entity in final_entities_list %}\r\n        {# \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0445\u044d\u0448\u0438 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 #}\r\n        {{ etlcraft.entity_hash(entity, metadata) }}{% if not loop.last %},{% endif -%} {# \u0441\u0442\u0430\u0432\u0438\u043c \u0437\u0430\u043f\u044f\u0442\u044b\u0435 \u0432\u0435\u0437\u0434\u0435, \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0446\u0438\u043a\u043b\u0430 #}\r\n    {% endfor %}\r\n\r\n\r\nFROM {{ source_table }} \r\n    WHERE \r\n    {% for link in links_list %}\r\n        {{ link ~ 'Hash' != ''}}{% if not loop.last %} AND {% endif -%}\r\n    {% endfor %}\r\n    )\r\n\r\n\r\n-- SETTINGS short_circuit_function_evaluation=force_enable\r\n{% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata", "macro.etlcraft.get_relations_by_re", "macro.etlcraft.custom_union_relations", "macro.etlcraft.link_hash", "macro.etlcraft.entity_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4939857, "supported_languages": null}, "macro.etlcraft.normalize_name": {"name": "normalize_name", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/normalize_name.sql", "original_file_path": "macros/normalize_name.sql", "unique_id": "macro.etlcraft.normalize_name", "macro_sql": "{% macro normalize_name(name) %}\r\n    {% set vars = namespace(normalized_name=name) %}\r\n    {% set vars.normalized_name = modules.re.sub('[^0-9A-Z\u0410-\u042fa-z\u0430-\u044f_\\\\s]', '', vars.normalized_name) %}\r\n    {% set vars.normalized_name = modules.re.sub('\\\\s', '_', vars.normalized_name) %}\r\n    {% set transliteration_map = {\r\n        '\u0430': 'a', '\u0431': 'b', '\u0432': 'v', '\u0433': 'g', '\u0434': 'd', '\u0435': 'e', '\u0451': 'yo', '\u0436': 'zh',\r\n        '\u0437': 'z', '\u0438': 'i', '\u0439': 'y', '\u043a': 'k', '\u043b': 'l', '\u043c': 'm', '\u043d': 'n', '\u043e': 'o',\r\n        '\u043f': 'p', '\u0440': 'r', '\u0441': 's', '\u0442': 't', '\u0443': 'u', '\u0444': 'f', '\u0445': 'kh', '\u0446': 'ts',\r\n        '\u0447': 'ch', '\u0448': 'sh', '\u0449': 'shch', '\u044a': '', '\u044b': 'y', '\u044c': '', '\u044d': 'e', '\u044e': 'yu',\r\n        '\u044f': 'ya'\r\n    } %}\r\n    {% for cyrillic, latin in transliteration_map.items() %}\r\n        {% set vars.normalized_name = vars.normalized_name.replace(cyrillic, latin) %}\r\n        {% set vars.normalized_name = vars.normalized_name.replace(cyrillic.upper(), latin.upper()) %}\r\n    {% endfor %}    \r\n    {{ return(vars.normalized_name) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4972029, "supported_languages": null}, "macro.etlcraft.join_appmetrica_registry": {"name": "join_appmetrica_registry", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/join_appmetrica_registry_app_profile_matching.sql", "original_file_path": "macros/join_appmetrica_registry_app_profile_matching.sql", "unique_id": "macro.etlcraft.join_appmetrica_registry", "macro_sql": "{%- macro join_appmetrica_registry(\r\n    sourcetype_name,\r\n    pipeline_name,\r\n    relations_dict,\r\n    date_from,\r\n    date_to,\r\n    params\r\n    ) -%}\r\n\r\n{%- set sourcetype_name = 'appmetrica' -%}\r\n{%- set pipeline_name = 'registry' -%}\r\n{%- set stream_name = 'profiles' -%}\r\n{%- set table_pattern = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ stream_name ~ '$' -%}\r\n{%- set relations = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern) -%}   \r\n{%- set source_table = '(' ~ dbt_utils.union_relations(relations) ~ ')' -%} \r\n\r\nSELECT\r\n    appmetrica_device_id AS appmetricaDeviceId,\r\n    profile_id AS crmUserId,\r\n    city AS cityName,\r\n    __emitted_at,\r\n    toLowCardinality('AppProfileMatching') AS __link \r\nFROM {{ source_table }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_relations_by_re", "macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.4983096, "supported_languages": null}, "macro.etlcraft.normalize": {"name": "normalize", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/normalize.sql", "original_file_path": "macros/normalize.sql", "unique_id": "macro.etlcraft.normalize", "macro_sql": "{%- macro normalize(\r\n    included_fields=[], \r\n    excluded_fields=[], \r\n    incremental_datetime_field=none, \r\n    disable_incremental_datetime_field=none,\r\n    defaults_dict=etlcraft.etlcraft_defaults(), \r\n    schema_pattern=this.schema, \r\n    source_table=none, \r\n    override_target_model_name=none,\r\n    debug_column_names=False) -%}\r\n\r\n{#- \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 (\u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u0442\u0430\u043f - parse, \u0437\u0434\u0435\u0441\u044c \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f manifest, \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0443\u0436\u0435 \u043f\u043e\u0439\u043c\u0451\u0442 ref - \u0432\u043e\u0437\u044c\u043c\u0435\u0442 \u0435\u0433\u043e \u0438\u0437 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0430. \u041d\u0430\u0434\u043e \u0437\u0430\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432 execute, \u0438\u043d\u0430\u0447\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0443\u0441\u0442\u043e -#}\r\n{%- if execute -%}\r\n\r\n    {#- \u0437\u0430\u0434\u0430\u0451\u043c \u0447\u0430\u0441\u0442\u0438 \u0438\u043c\u0435\u043d\u0438 - \u043b\u0438\u0431\u043e \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043b\u0438\u0431\u043e \u0438\u0437 \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430 - \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0437\u043d\u0430\u043a\u0443 _ -#}\r\n    {%- set model_name_parts = (override_target_model_name or this.name).split('_') -%}\r\n\r\n    {#- \u0435\u0441\u043b\u0438 \u0438\u043c\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d\u0443 - \u0432\u044b\u0434\u0430\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0443 -#}\r\n    {%- if model_name_parts|length < 5 or model_name_parts[0] != 'normalize' -%}\r\n        {{ exceptions.raise_compiler_error('Model name \"' ~ this.name ~ '\" does not follow the expected pattern: \"normalize_{sourcetype_name}_{pipeline_name}_{template_name}_{stream_name}\"') }}\r\n    {%- endif -%}\r\n\r\n    {#- \u0437\u0430\u0434\u0430\u0451\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 - \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a, \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d, \u0448\u0430\u0431\u043b\u043e\u043d, \u043f\u043e\u0442\u043e\u043a, \u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 -#}\r\n    {%- set sourcetype_name = model_name_parts[1] -%}\r\n    {%- set pipeline_name = model_name_parts[2] -%}\r\n    {%- set template_name = model_name_parts[3] -%}\r\n    {%- set stream_name_parts = model_name_parts[4:] -%}\r\n    {%- set stream_name = '_'.join(stream_name_parts) -%}\r\n    {%- set table_pattern = '_airbyte_raw_' ~ sourcetype_name ~ '_' ~ pipeline_name ~ '_' ~ template_name ~ '_[^_]+_' ~ stream_name ~ '$' -%}\r\n\r\n    {#- \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 source_table \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u0430\u043a\u0440\u043e\u0441\u0430 \u043d\u0435 \u0437\u0430\u0434\u0430\u043d -#}\r\n    {%- if source_table is none -%}\r\n\r\n        {#- \u0437\u0430\u0434\u0430\u0451\u043c relations \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u043a\u0440\u043e\u0441\u0430 - \u043e\u043d \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 clickhouse-adapters - \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u043f\u043e\u0434 \u0435\u0434\u0438\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0441\u0435 mt \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 -#}\r\n        {%- set relations = etlcraft.get_relations_by_re(schema_pattern=target.schema, \r\n                                                              table_pattern=table_pattern) -%}   \r\n        {#- \u0435\u0441\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u0430\u043a - \u0432\u044b\u0434\u0430\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0443 -#}                                                                  \r\n        {%- if not relations -%}\r\n            {{ exceptions.raise_compiler_error('No relations were found matching the pattern \"' ~ table_pattern ~ '\". Please ensure that your source data follows the expected structure.') }}\r\n        {%- endif -%}\r\n\r\n        {#- \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043c\u0430\u043a\u0440\u043e\u0441\u0443  - \u0437\u0434\u0435\u0441\u044c union all \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 -#}\r\n        {%- set source_table = '(' ~ dbt_utils.union_relations(relations) ~ ')' -%}    \r\n    {%- endif -%}\r\n\r\n    {#- \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 - \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 -#}\r\n    {% if run_query('SELECT ' ~ etlcraft.json_list_keys('_airbyte_data') ~ ' FROM ' ~ source_table ~ '  LIMIT 1').columns[0]|length > 0 %}\r\n        {#- \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0431\u0435\u0440\u0451\u043c \u0441\u0430\u043c\u044b\u0439 \u0434\u043b\u0438\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a -#}\r\n        {%- set json_keys = fromjson(run_query('SELECT ' ~ etlcraft.json_list_keys('_airbyte_data') ~ ' FROM ' ~ source_table ~ ' ORDER BY JSONLength(JSONExtractRaw(_airbyte_data)) desc LIMIT 1').columns[0].values()[0]) -%}\r\n    {#- \u0435\u0441\u043b\u0438 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f -#}\r\n    {%- else -%}    \r\n        {#- \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u044d\u0442\u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 - \u044d\u0442\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 - \u0435\u0441\u043b\u0438 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u044b\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442 -#}\r\n        {%- set query -%}\r\n        SELECT \r\n            column_name\r\n        FROM information_schema.columns \r\n        WHERE \r\n            table_catalog = '{{this.schema}}'\r\n            and table_name = 'incremental_{{sourcetype_name}}_{{pipeline_name}}_{{template_name}}_{{stream_name}}'\r\n            and not match(column_name,'^__*')\r\n        ORDER BY ordinal_position\r\n        {%- endset -%}\r\n        {#- \u0438 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0431\u0435\u0440\u0451\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 -#}\r\n        {%- set json_keys = run_query(query).columns[0].values() -%}\r\n    {%- endif -%} \r\n\r\n    {#- \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u0430\u043a\u0440\u043e\u0441\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b -#}\r\n    {%- if incremental_datetime_field is none and disable_incremental_datetime_field is none -%}\r\n        {#-  \u0437\u0430\u0434\u0430\u0451\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e incremental_datetime_field -#}\r\n        {%- set incremental_datetime_field = etlcraft.find_incremental_datetime_field(json_keys, override_target_model_name or this.name, defaults_dict=defaults_dict) or '' -%}\r\n    {%- endif -%}\r\n    {#- \u0437\u0430\u0434\u0430\u0451\u043c \u043f\u0440\u043e\u0447\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0439 -#}\r\n    {%- set default_included_fields = [] -%}\r\n    {%- set default_excluded_fields = [] -%}\r\n    {%- set default_included_fields = etlcraft.get_from_default_dict(defaults_dict, ['sourcetypes', sourcetype_name, 'included_fields'], []) -%}\r\n    {%- set default_excluded_fields = etlcraft.get_from_default_dict(defaults_dict, ['sourcetypes', sourcetype_name, 'excluded_fields'], []) -%}        \r\n    {%- set default_included_fields = default_included_fields + etlcraft.get_from_default_dict(defaults_dict, ['sourcetypes', sourcetype_name, 'streams', stream_name, 'included_fields'], []) -%}\r\n    {%- set default_excluded_fields = default_excluded_fields + etlcraft.get_from_default_dict(defaults_dict, ['sourcetypes', sourcetype_name, 'streams', stream_name, 'excluded_fields'], []) -%}    \r\n    {%- set column_set = set(json_keys).union(set(included_fields)).union(set(default_included_fields)).difference(set(excluded_fields)).difference(set(default_excluded_fields)) -%}\r\n    {%- set column_list = [] -%}\r\n\r\n    {#- \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 -#}\r\n    {%- for key in column_set -%}        \r\n        {#- \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u0435\u043c \u0441 \u0434\u0430\u0442\u043e\u0439 \r\n        {%- if  key != incremental_datetime_field -%} -#}\r\n            {#- \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c - \u0434\u0435\u043b\u0430\u0435\u043c \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u0430 \u0430\u043d\u0433\u043b -#}\r\n            {%- set alias = etlcraft.normalize_name(key) -%}\r\n            {%- set column_value = etlcraft.json_extract_string('_airbyte_data', key) if not debug_column_names else \"'\" ~ alias ~ \"'\" -%}\r\n            {#- \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0431\u0430\u0432\u044f\u043b\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 -#}\r\n            {%- do column_list.append(column_value ~ \" AS \" ~ alias) -%}\r\n         {#-{%- endif -%} -#}\r\n    {%- endfor -%}\r\n\r\n    {#- \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0439 - \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 -#}\r\n    {%- set column_list = column_list | sort -%}\r\n    {#- \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u0441 \u0434\u0430\u0442\u043e\u0439 -#}\r\n    {%- if incremental_datetime_field -%}\r\n        {%- set column_value = etlcraft.json_extract_string('_airbyte_data', incremental_datetime_field) if not debug_column_names else \"'__date'\" -%}        \r\n        {%- set column_list = [column_value ~ \" AS __date\"] + column_list -%}\r\n    {%- endif -%}\r\n    {#- \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0434\u043b\u044f \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 -#}\r\n    {%- if column_list | length == 0 -%}\r\n        {{ exceptions.raise_compiler_error('Normalize returned empty column list') }}\r\n    {%- endif -%}\r\n\r\n    {#- \u044d\u0442\u043e \u0441\u0430\u043c\u043e\u0435 \u0432\u0430\u0436\u043d\u043e\u0435 - \u0447\u0442\u043e \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 - SELECT \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u0435\u0439 + \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0438\u0437 Airbyte -#}\r\n    SELECT\r\n        {{ column_list | join(', \\n') }},\r\n        toLowCardinality(_dbt_source_relation) AS __table_name,  \r\n        {#- \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0434\u0430\u0442:  parseDateTimeBestEffort, toDateTime32, toDateTimeOrDefault, toDate(splitByWhitespace(dt)[1]) -#}\r\n        toDateTime32(substring(_airbyte_emitted_at, 1, 19)) AS __emitted_at, \r\n        NOW() as __normalized_at\r\n    FROM {{ source_table }}\r\n{%- endif -%}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.etlcraft.etlcraft_defaults", "macro.etlcraft.get_relations_by_re", "macro.dbt_utils.union_relations", "macro.dbt.run_query", "macro.etlcraft.json_list_keys", "macro.etlcraft.find_incremental_datetime_field", "macro.etlcraft.get_from_default_dict", "macro.etlcraft.normalize_name", "macro.etlcraft.json_extract_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5063875, "supported_languages": null}, "macro.etlcraft.default__json_list_keys": {"name": "default__json_list_keys", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/json_list_keys.sql", "original_file_path": "macros/json_list_keys.sql", "unique_id": "macro.etlcraft.default__json_list_keys", "macro_sql": "{% macro default__json_list_keys(field_name) -%}    \r\n    {{ field_name }}::json->>key\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5068142, "supported_languages": null}, "macro.etlcraft.clickhouse__json_list_keys": {"name": "clickhouse__json_list_keys", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/json_list_keys.sql", "original_file_path": "macros/json_list_keys.sql", "unique_id": "macro.etlcraft.clickhouse__json_list_keys", "macro_sql": "{% macro clickhouse__json_list_keys(field_name) -%}    \r\n    JSONExtractKeys({{ field_name }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5069733, "supported_languages": null}, "macro.etlcraft.json_list_keys": {"name": "json_list_keys", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/json_list_keys.sql", "original_file_path": "macros/json_list_keys.sql", "unique_id": "macro.etlcraft.json_list_keys", "macro_sql": "{% macro json_list_keys(field_name) -%}\r\n    {{ adapter.dispatch('json_list_keys', 'etlcraft')(field_name) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__json_list_keys"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5072136, "supported_languages": null}, "macro.etlcraft.find_incremental_datetime_field": {"name": "find_incremental_datetime_field", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/find_incremental_datetime_field.sql", "original_file_path": "macros/find_incremental_datetime_field.sql", "unique_id": "macro.etlcraft.find_incremental_datetime_field", "macro_sql": "{% macro find_incremental_datetime_field(column_list, relation, defaults_dict=etlcraft.etlcraft_defaults(), do_not_throw=False) %}        \r\n    {%- set model_name_parts = relation.split('_') -%}\r\n    {%- if model_name_parts|length <  4 or model_name_parts[0] != 'normalize' -%}\r\n        {{ exceptions.raise_compiler_error('Relation identifier \"' ~ relation.identifier ~ '\" does not follow the expected pattern: \"{normalize}_{sourcetype_name}_{pipeline_name}_{template_name}_{stream_name}\"') }}\r\n    {%- endif -%}\r\n    {%- set sourcetype_name = model_name_parts[1] -%}\r\n    {%- set pipeline_name = model_name_parts[2] -%}\r\n    {%- set template_name = model_name_parts[3] -%}\r\n    {%- set stream_name_parts = model_name_parts[4:] -%}\r\n    {%- set stream_name = '_'.join(stream_name_parts) -%}\r\n        \r\n    {%- set datetime_field = etlcraft.get_from_default_dict(defaults_dict, ['sourcetypes', sourcetype_name, 'streams', stream_name, 'incremental_datetime_field']) -%}\r\n    {%- if datetime_field == {} -%}\r\n        {%- set datetime_field = etlcraft.get_from_default_dict(defaults_dict, ['sourcetypes', sourcetype_name, 'incremental_datetime_field']) -%}\r\n    {%- endif -%}\r\n    \r\n    {%- if datetime_field == {} -%}\r\n        {%- set datetime_columns = [] -%}        \r\n        {%- for column in column_list -%}            \r\n            {%- if  column.lower().endswith('date') \r\n              or column.lower().endswith('datetime')\r\n              or column.lower().endswith('timestamp')\r\n              or column.lower().endswith('_time') -%}\r\n                {%- do datetime_columns.append(column) -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n        {%- if datetime_columns|length == 0 and not do_not_throw -%}\r\n            {{ exceptions.raise_compiler_error('No columns with names ending in \"date\", \"datetime\", \"timestamp\", \"_time\" were found in the relation \"' ~ relation ~ '\". Please ensure that your source data contains such a column for incremental processing.') }}\r\n        {%- elif datetime_columns|length > 1 and not do_not_throw -%}\r\n            {{ exceptions.raise_compiler_error('Multiple columns with names  ending in \"date\", \"datetime\", \"timestamp\", \"_time\" were found in the relation \"' ~ relation ~ '\". Please ensure that only one such column is present for incremental processing, or specify the correct one in the defaults dictionary.') }}\r\n        {%- else -%}\r\n            {%- set datetime_field = datetime_columns[0] -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n    {{ return(datetime_field) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.etlcraft.etlcraft_defaults", "macro.etlcraft.get_from_default_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5113482, "supported_languages": null}, "macro.etlcraft.get_from_default_dict": {"name": "get_from_default_dict", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/get_from_default_dict.sql", "original_file_path": "macros/get_from_default_dict.sql", "unique_id": "macro.etlcraft.get_from_default_dict", "macro_sql": "{%- macro get_from_default_dict(default_dict, path, default_return={}) -%}\r\n    {% set ns = namespace(current_value=default_dict) %}\r\n    {%- for key in path -%}\r\n        {%- set ns.current_value = ns.current_value.get(key, '') -%}\r\n        {%- if ns.current_value == '' -%}\r\n            {{ return(default_return) }}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n    {{ return(ns.current_value) }}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5122886, "supported_languages": null}, "macro.etlcraft.join_appmetrica_events": {"name": "join_appmetrica_events", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/join_appmetrica_events.sql", "original_file_path": "macros/join_appmetrica_events.sql", "unique_id": "macro.etlcraft.join_appmetrica_events", "macro_sql": "{%- macro join_appmetrica_events(\r\n    sourcetype_name,\r\n    pipeline_name,\r\n    relations_dict,\r\n    date_from,\r\n    date_to,\r\n    params\r\n    ) -%}\r\n\r\n{%- if execute -%}\r\n\r\n{#- \u0437\u0430\u0434\u0430\u0451\u043c \u043e\u0431\u0449\u0438\u0435 \u0447\u0430\u0441\u0442\u0438 \u0438\u043c\u0435\u043d\u0438 -#}\r\n{%- set sourcetype_name = 'appmetrica' -%}\r\n{%- set pipeline_name = 'events' -%}  {# \u044d\u0442\u043e \u043e\u0431\u0449\u0435\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 #}\r\n\r\n{#- \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0430\u043b-\u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0441\u0432\u043e\u0439 source_table_<...> -#}\r\n{%- set table_pattern_deeplinks = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ 'deeplinks' ~ '$' -%}\r\n{%- set relations_deeplinks = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_deeplinks) -%}   \r\n{%- set source_table_deeplinks = '(' ~ dbt_utils.union_relations(relations_deeplinks) ~ ')' -%}    \r\n\r\n{%- set table_pattern_events = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ 'events' ~ '$' -%}\r\n{%- set relations_events = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_events) -%}   \r\n{%- set source_table_events = '(' ~ dbt_utils.union_relations(relations_events) ~ ')' -%}  \r\n\r\n{%- set table_pattern_install = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ 'install' ~ '$' -%}\r\n{%- set relations_install = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_install) -%}   \r\n{%- set source_table_install = '(' ~ dbt_utils.union_relations(relations_install) ~ ')' -%} \r\n\r\n{%- set table_pattern_screen_view = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ 'screen_view' ~ '$' -%}\r\n{%- set relations_screen_view = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_screen_view) -%}   \r\n{%- set source_table_screen_view = '(' ~ dbt_utils.union_relations(relations_screen_view) ~ ')' -%} \r\n\r\n{%- set table_pattern_sessions_starts = 'incremental_' ~ sourcetype_name ~ '_' ~ pipeline_name ~  '_[^_]+_' ~ 'sessions_starts' ~ '$' -%}\r\n{%- set relations_sessions_starts = etlcraft.get_relations_by_re(schema_pattern=target.schema, table_pattern=table_pattern_sessions_starts) -%}   \r\n{%- set source_table_sessions_starts = '(' ~ dbt_utils.union_relations(relations_sessions_starts) ~ ')' -%} \r\n\r\n{#- \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0435\u0433\u043e CTE \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u043f\u043e\u043b\u0435\u0439 \u0438 \u0438\u0445 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c -#}\r\n{#- \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0442\u0440\u0438\u043c - deeplinks -#}\r\nWITH join_appmetrica_events_deeplinks AS (\r\nSELECT\r\n    toDateTime(__date) AS __date, \r\n    toLowCardinality(__table_name) AS __table_name,\r\n    toDateTime(event_datetime) AS event_datetime,\r\n    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,\r\n    appmetrica_device_id AS appmetricaDeviceId,\r\n    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,\r\n    profile_id AS crmUserId,\r\n    '' AS visitId,\r\n    '' AS clientId,\r\n    '' AS promoCode,\r\n    os_name AS osName,\r\n    city AS cityName,\r\n    assumeNotNull(coalesce({{ etlcraft.get_adsourcedirty() }}, publisher_name, '')) AS adSourceDirty,\r\n    extract(deeplink_url_parameters, 'utm_source=([^&]*)') AS utmSource,\r\n    extract(deeplink_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,\r\n    extract(deeplink_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,\r\n    extract(deeplink_url_parameters, 'utm_term=([^&]*)') AS utmTerm,\r\n    extract(deeplink_url_parameters, 'utm_content=([^&]*)') AS utmContent,\r\n    '' AS transactionId,\r\n    {{ etlcraft.get_utmhash('__', ['utmCampaign', 'utmContent']) }} AS utmHash,\r\n    0 AS sessions,\r\n    0 AS addToCartSessions,\r\n    0 AS cartViewSessions,\r\n    0 AS checkoutSessions,\r\n    0 AS webSalesSessions,\r\n    0 AS sales,\r\n    0 AS amountSales,\r\n    0 AS registrationCardSessions,\r\n    0 AS registrationButtonClick,\r\n    0 AS linkingCardToPhoneNumberSessions,\r\n    0 AS registrationLendingPromotionsSessions,\r\n    0 AS registrationCashbackSessions,\r\n    0 AS instantDiscountActivationSessions,\r\n    0 AS couponActivationSessions,\r\n    0 AS participationInLotterySessions,\r\n    0 AS pagesViews,\r\n    0 AS screenView,\r\n    0 AS installApp,\r\n    0 AS installs,\r\n    '' AS installationDeviceId,\r\n    __emitted_at,\r\n    toLowCardinality('AppDeeplinkStat') AS __link\r\nFROM {{ source_table_deeplinks }}\r\n)\r\n\r\n{#- \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0448\u0430\u0433\u043e\u0432 \u043a\u043e \u0432\u0442\u043e\u0440\u043e\u043c\u0443 \u0441\u0442\u0440\u0438\u043c\u0443 -#}\r\n, union_events AS (\r\nSELECT\r\n    __emitted_at,\r\n    splitByChar('_', __table_name)[6] AS accountName,\r\n    toLowCardinality(__table_name) AS __table_name,\r\n    city AS cityName,\r\n    event_name AS eventName,\r\n    event_json AS eventJson,\r\n    session_id AS sessionId,\r\n    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,\r\n    JSONExtractString(event_json, 'transaction_id') AS transactionId,\r\n    appmetrica_device_id AS appmetricaDeviceId,\r\n    os_name AS osName,\r\n    profile_id AS crmUserId,\r\n    JSONExtractString(event_json, 'coupon') AS promoCode,    \r\n    toDate(__date) AS __date, \r\n    toDateTime(event_datetime) AS event_datetime, \r\n    0 AS screen_view\r\nFROM {{ source_table_events }}\r\n)\r\n, join_appmetrica_events_prepare AS (\r\nSELECT \r\n    __date,\r\n    toLowCardinality(__table_name) AS __table_name,\r\n    event_datetime,\r\n    toLowCardinality(accountName) AS accountName,\r\n    appmetricaDeviceId,\r\n    mobileAdsId,\r\n    crmUserId,   \r\n    '' AS visitId,\r\n    '' AS clientId,\r\n    promoCode,\r\n    osName,\r\n    cityName,\r\n    '' AS adSourceDirty,\r\n    '' AS utmSource,\r\n    '' AS utmMedium,\r\n    '' AS utmCampaign,\r\n    '' AS utmTerm,\r\n    '' AS utmContent,\r\n    transactionId,\r\n    '' AS UtmHash,\r\n    0 AS sessions,\r\n    eventName = 'add_to_cart' AS addToCartSessions,\r\n    eventName = 'view_cart' AS cartViewSessions,\r\n    eventName = 'begin_checkout' AS checkoutSessions,\r\n    eventName = 'purchase' AS webSalesSessions,\r\n    eventName = 'purchase' AS sales,    \r\n    assumeNotNull(coalesce(if(eventName = 'purchase', toFloat64(nullif(JSONExtractString(JSONExtractString(JSONExtractString(eventJson, 'value'), 'fiat'), 'value'), '')), 0), 0)) AS amountSales,\r\n    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindVirtualCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS registrationCardSessions,\r\n    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'IntroRegistrationButtonClick' AND (JSONExtractString(eventJson, 'item_name') = 'AdventCalendar' or JSONExtractString(eventJson, 'item_name') = 'ScratchCards') as registrationButtonClick,\r\n    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindPlasticCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS linkingCardToPhoneNumberSessions,\r\n    0 AS registrationLendingPromotionsSessions,\r\n    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CashbackButtonRegistration' AND  JSONExtractString(eventJson, 'item_name') = 'Cashback' AS registrationCashbackSessions,\r\n    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'ButtonActivate' AS instantDiscountActivationSessions,\r\n    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR\r\n    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponDetailActivate' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR \r\n    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Club') AS couponActivationSessions,\r\n    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'TakePartButton' AS participationInLotterySessions,\r\n    0 AS pagesViews,\r\n    0 AS screenView,\r\n    0 AS installApp,\r\n    0 AS installs,\r\n    '' AS installationDeviceId,\r\n    __emitted_at,\r\n    toLowCardinality('AppEventStat') AS __link,\r\n    JSONExtractString(eventJson, 'item_category') AS __itemCategory, \r\n    JSONExtractString(eventJson, 'item_name') AS __itemName,\r\n    row_number() over() AS __rn,\r\n    eventName AS __eventName, \r\n    sessionId AS __sessionId\r\nFROM union_events\r\nWHERE addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 OR registrationButtonClick > 0\r\n  OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 \r\n  OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 \r\n  OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 \r\n  OR couponActivationSessions > 0 OR participationInLotterySessions > 0 or screenView > 0\r\nORDER BY __date\r\n)\r\n, min_event AS (\r\nSELECT MIN(__rn) AS __rn \r\nFROM join_appmetrica_events_prepare\r\nGROUP BY appmetricaDeviceId, __sessionId, __eventName, __itemCategory, __itemName\r\n)\r\n\r\n{#- \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u0438\u043c - events -#}\r\n, join_appmetrica_events_events AS (\r\nSELECT * EXCEPT(__itemCategory, __itemName, __rn, __eventName, __sessionId)\r\nFROM join_appmetrica_events_prepare\r\nWHERE __rn IN (SELECT __rn FROM min_event) AND  \r\n    (addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 \r\n    OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 \r\n    OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 \r\n    OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 OR registrationButtonClick > 0\r\n    OR couponActivationSessions > 0 OR participationInLotterySessions > 0)\r\n)\r\n\r\n{#- \u0442\u0440\u0435\u0442\u0438\u0439 \u0441\u0442\u0440\u0438\u043c - install -#}\r\n, join_appmetrica_events_install AS (\r\nSELECT\r\n    toDateTime(__date) AS __date, \r\n    toLowCardinality(__table_name) AS __table_name,\r\n    toDateTime(install_datetime) AS event_datetime, \r\n    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,\r\n    appmetrica_device_id AS appmetricaDeviceId,\r\n    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,\r\n    profile_id AS crmUserId,\r\n    '' AS visitId,\r\n    '' AS clientId,\r\n    '' AS promoCode,\r\n    os_name AS osName,\r\n    city AS cityName,\r\n    if(match(click_url_parameters, 'organic'), '\u041e\u0440\u0433\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430', assumeNotNull(coalesce({{ etlcraft.get_adsourcedirty() }}, publisher_name, ''))) AS adSourceDirty,\r\n    extract(click_url_parameters, 'utm_source=([^&]*)') AS utmSource,\r\n    extract(click_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,\r\n    extract(click_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,\r\n    extract(click_url_parameters, 'utm_term=([^&]*)') AS utmTerm,\r\n    extract(click_url_parameters, 'utm_content=([^&]*)') AS utmContent,\r\n    '' AS transactionId,\r\n    {{ etlcraft.get_utmhash('__', ['utmContent', 'utmCampaign']) }} AS utmHash,\r\n    0 AS sessions,\r\n    0 AS addToCartSessions,\r\n    0 AS cartViewSessions,\r\n    0 AS checkoutSessions,\r\n    0 AS webSalesSessions,\r\n    0 AS sales,\r\n    0 AS amountSales,\r\n    0 AS registrationCardSessions,\r\n    0 AS registrationButtonClick,\r\n    0 AS linkingCardToPhoneNumberSessions,\r\n    0 AS registrationLendingPromotionsSessions,\r\n    0 AS registrationCashbackSessions,\r\n    0 AS instantDiscountActivationSessions,\r\n    0 AS couponActivationSessions,\r\n    0 AS participationInLotterySessions,\r\n    0 AS pagesViews,\r\n    0 AS screenView,\r\n    is_reinstallation = 'false' AS installApp,\r\n    1 AS installs,\r\n    '' AS installationDeviceId,\r\n    __emitted_at,\r\n    toLowCardinality('AppInstallStat') AS __link\r\nFROM {{ source_table_install }}\r\n)\r\n\r\n{#- \u0447\u0435\u0442\u0432\u0451\u0440\u0442\u044b\u0439 \u0441\u0442\u0440\u0438\u043c - screen_view -#}\r\n, join_appmetrica_events_screen_view AS (\r\nSELECT\r\n    toDateTime(date_add(hour, 23, date_add(minute, 59, toDateTime(__date)))) AS __date, \r\n    toLowCardinality(__table_name) AS __table_name,\r\n    toDateTime(event_datetime) AS event_datetime, \r\n    accountName,\r\n    appmetricaDeviceId,\r\n    mobileAdsId,\r\n    crmUserId, \r\n    '' AS visitId,\r\n    '' AS clientId,\r\n    '' AS promoCode,\r\n    osName,\r\n    cityName,\r\n    '' AS adSourceDirty,\r\n    '' AS utmSource,\r\n    '' AS utmMedium,\r\n    '' AS utmCampaign,\r\n    '' AS utmTerm,\r\n    '' AS utmContent,\r\n    '' AS transactionId,\r\n    '' AS utmHash,\r\n    0 AS sessions,\r\n    0 AS addToCartSessions,\r\n    0 AS cartViewSessions,\r\n    0 AS checkoutSessions,\r\n    0 AS webSalesSessions,\r\n    0 AS sales,    \r\n    0 AS amountSales,\r\n    0 AS registrationCardSessions,\r\n    0 AS registrationButtonClick,\r\n    0 AS linkingCardToPhoneNumberSessions,\r\n    0 AS registrationLendingPromotionsSessions,\r\n    0 AS registrationCashbackSessions,\r\n    0 AS instantDiscountActivationSessions,\r\n    0 AS couponActivationSessions,\r\n    0 AS participationInLotterySessions,\r\n    0 AS pagesViews,\r\n    screen_view AS screenView,\r\n    0 AS installApp,\r\n    0 AS installs,\r\n    '' AS installationDeviceId,\r\n    __emitted_at,\r\n    toLowCardinality('AppEventStat') AS __link \r\nFROM {{ source_table_screen_view }}\r\n)\r\n\r\n{#- \u043f\u044f\u0442\u044b\u0439 \u0441\u0442\u0440\u0438\u043c - sessions_starts -#}\r\n, join_appmetrica_events_sessions_starts AS (\r\nSELECT\r\n    toDateTime(date_add(minute, 1, toDateTime(__date))) AS __date, \r\n    toLowCardinality(__table_name) AS __table_name,\r\n    toDateTime(session_start_datetime) AS event_datetime, \r\n    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,\r\n    appmetrica_device_id AS appmetricaDeviceId,\r\n    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,\r\n    profile_id AS crmUserId,\r\n    '' AS visitId,\r\n    '' AS clientId,\r\n    '' AS promoCode,\r\n    os_name AS osName,\r\n    city AS cityName,\r\n    '' AS adSourceDirty,\r\n    '' AS utmSource,\r\n    '' AS utmMedium,\r\n    '' AS utmCampaign,\r\n    '' AS utmTerm,\r\n    '' AS utmContent,\r\n    '' AS transactionId,\r\n    '' AS UtmHash,\r\n    1 AS sessions,\r\n    0 AS addToCartSessions,\r\n    0 AS cartViewSessions,\r\n    0 AS checkoutSessions,\r\n    0 AS webSalesSessions,\r\n    0 AS sales,\r\n    0 AS amountSales,\r\n    0 AS registrationCardSessions,\r\n    0 AS registrationButtonClick,\r\n    0 AS linkingCardToPhoneNumberSessions,\r\n    0 AS registrationLendingPromotionsSessions,\r\n    0 AS registrationCashbackSessions,\r\n    0 AS instantDiscountActivationSessions,\r\n    0 AS couponActivationSessions,\r\n    0 AS participationInLotterySessions,\r\n    0 AS pagesViews,\r\n    0 AS screenView,\r\n    0 AS installApp,\r\n    0 AS installs,\r\n    CONCAT(installation_id, appmetrica_device_id) AS installationDeviceId,\r\n    __emitted_at,\r\n    toLowCardinality('AppSessionStat') AS __link \r\nFROM {{ source_table_sessions_starts }}\r\n)\r\n\r\n{#- \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u0435\u043b\u0430\u0435\u043c  UNION \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u043d\u0435\u0435 CTE -#}\r\n\r\nSELECT * \r\nFROM join_appmetrica_events_deeplinks\r\nUNION ALL\r\nSELECT * \r\nFROM join_appmetrica_events_events\r\nUNION ALL\r\nSELECT * \r\nFROM join_appmetrica_events_install\r\nUNION ALL\r\nSELECT * \r\nFROM join_appmetrica_events_screen_view\r\nUNION ALL\r\nSELECT * \r\nFROM join_appmetrica_events_sessions_starts\r\n\r\n\r\n{% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.get_relations_by_re", "macro.dbt_utils.union_relations", "macro.etlcraft.get_adsourcedirty", "macro.etlcraft.get_utmhash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5211928, "supported_languages": null}, "macro.etlcraft.like_query_cycle": {"name": "like_query_cycle", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/like_query_cycle.sql", "original_file_path": "macros/like_query_cycle.sql", "unique_id": "macro.etlcraft.like_query_cycle", "macro_sql": "{% macro like_query_cycle(list, value) %}\n    {% for element in list %}\n        {% if not loop.last %}\n            {{ value }} like '%_{{ element }}_%' OR\n        {% elif loop.first %}\n             {{ value }} like '%_{{ element }}_%' \n        {% else %}\n            {{ value }} like '%_{{ element }}_%' \n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5221198, "supported_languages": null}, "macro.etlcraft.create_dataset": {"name": "create_dataset", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/dataset/create_dataset.sql", "original_file_path": "macros/dataset/create_dataset.sql", "unique_id": "macro.etlcraft.create_dataset", "macro_sql": "{%- macro create_dataset(\n  funnel = none,\n  conditions = none,\n  override_target_metadata=none,\n  override_target_model_name=none\n  ) -%}\n\n\n{%- set relations = []-%}\n\n{# \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c pipeline \u0432 funnels \u0438\u0437 metadata #}\n\n{% for condition in conditions %}\n  {% if condition.pipeline == 'events' %}\n      {%- set ref =  'attr_' ~ funnel  ~ '_final_table' -%}\n      {%- do relations.append(ref) -%}\n  {% else %}\n      {%- set ref =  'full_' ~ condition.pipeline  -%}\n      {%- do relations.append(ref) -%}\n  {%- endif -%}  \n{%- endfor -%}\n\n{%- set unique_relations = relations|unique|list -%}\n{%- set source_table = '(' ~ etlcraft.custom_union_relations( relations=[ref('full_datestat'), ref('attr_myfirstfunnel_final_table')]) ~ ')' -%}\n{{\n    config(\n        materialized = 'table',\n        order_by = ('__datetime')\n    )\n}}\n\n{%- set source_field = \"splitByChar('_', __table_name)[4]\" -%}\n{%- set preset_field = \"splitByChar('_', __table_name)[4]\" -%}\n{%- set account_field = \"splitByChar('_', __table_name)[4]\" -%}\n\n{% for condition in conditions %}\n  {% if loop.last %}\n    SELECT * FROM {{ source_table }} \n    WHERE \n    {{source_field}} = '{{condition.source}}'\n    and \n    {{account_field}} = '{{condition.account}}'\n    and \n    {{preset_field}} = '{{condition.preset}}'\n  {% else %}\n    SELECT * FROM {{ source_table }} \n    WHERE \n    {{source_field}} = '{{condition.source}}'\n    and \n    {{account_field}} = '{{condition.account}}'\n    and \n    {{preset_field}} = '{{condition.preset}}'\n    UNION ALL\n  {%- endif -%}  \n{%- endfor -%}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.custom_union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.525333, "supported_languages": null}, "macro.etlcraft.link_hash": {"name": "link_hash", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hashes/link_hash.sql", "original_file_path": "macros/hashes/link_hash.sql", "unique_id": "macro.etlcraft.link_hash", "macro_sql": " \n{%- macro link_hash(link_name, metadata_dict) -%}\n    {#- \u0437\u0430\u0434\u0430\u0451\u043c \u0438\u043c\u0435\u043d\u0430 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u043b\u0438\u043d\u043a\u0430 - \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f metadata -#}\n    {%- set entities = metadata_dict['entities'] -%}\n    {%- set links = metadata_dict['links'] -%}\n    {#- \u0438\u043c\u044f \u0445\u044d\u0448\u0430 \u0437\u0430\u0434\u0430\u0451\u043c \u0438\u0437 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u043e\u0431\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0432 \u043a\u0430\u0432\u044b\u0447\u043a\u0438 -#}\n    {%- set name_hash = \"'\" ~ link_name ~ \"'\" -%}\n\n    {#- AppProfileMatching -#}\n\n\n    {#- \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043b\u0438\u043d\u043a\u0430 \u0431\u0435\u0440\u0451\u043c \u0435\u0433\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438  \u0438 \u043a\u043b\u044e\u0447\u0438-#}\n    {%- set link_entities = links[link_name]['main_entities'] -%} {# \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043b\u0438\u043d\u043a\u043e\u043c \u0445\u0430\u0431\u044b #}\n    {%- set link_keys = links[link_name].get('keys') -%} {# \u0434\u043e\u043f. \u043a\u043b\u044e\u0447\u0438 \u0434\u043b\u044f \u043b\u0438\u043d\u043a\u0430 #}\n    {%- set all_keys = []  -%}\n    {%- if 'Stat' in link_name -%}\n        {%- set date_dict = {'name': '__date'} -%}\n        {%- do all_keys.append(date_dict) -%}\n    {%- endif -%}\n    {#- \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043b\u0438\u043d\u043a\u0430 \u0431\u0435\u0440\u0435\u043c \u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0438 -#}\n    {%- for entity in link_entities -%}\n        {%- set _ = all_keys.extend(entities[entity]['keys']) -%} {# \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u044e\u0447\u0435\u0439 \u0445\u0430\u0431\u043e\u0432 #}\n    {%- endfor -%}\n\n    {%- if link_keys is not none -%}\n        {%- set all_keys = all_keys + link_keys -%} {# \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u043a\u043b\u044e\u0447\u0430\u043c \u0445\u0430\u0431\u043e\u0432 \u043a\u043b\u044e\u0447\u0438 \u043b\u0438\u043d\u043a\u043e\u0432 #}\n    {%- endif -%}\n\n    {%- set all_cols = [name_hash] -%} {# \u0441\u044e\u0434\u0430 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u043a\u043b\u044e\u0447\u0438 \u0441 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\u043c\u0438 #}\n\n\n    {%- set skip_null_cols = [] -%} {# skipInNullCheck #}\n\n    {#- \u0442\u0443\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 -#}\n    \n\n    {%- for key in all_keys -%}\n        {#- \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 String -#}\n        {%- set sql_string = 'toString({})'.format(key['name']) -%} \n        \n        {#- \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f, \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u043f\u043e \u043a\u0440\u0430\u044f\u043c -#}\n        {%- if not key.get('notrim') -%}\n            {%- set sql_string = 'trim({})'.format(sql_string) -%}\n        {%- endif -%}\n        {#- \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432\u0441\u0451 \u043a \u0432\u0435\u0440\u0445\u043d\u0435\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443 -#}\n        {%- if not key.get('case-sensitive') -%}\n            {%- set sql_string = 'upper({})'.format(sql_string) -%}\n        {%- endif -%}\n\n        {#- \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 null -#}\n        {%- set sql_string = 'ifnull(nullif({}, \\'\\'), \\'\\')'.format(sql_string) -%}\n\n        {%- if not key.get('skipInNullCheck') -%}\n            {% set _ = skip_null_cols.append(sql_string) %}\n        {%- endif -%}\n\n        {%- set _ = all_cols.append(sql_string) -%}\n\n    {%- endfor -%}\n\n    {%- set all = ' || \\';\\' || '.join(all_cols) -%}\n    {%- set skip_null = ' || '.join(skip_null_cols) -%}\n\n    {#-  \u0437\u0434\u0435\u0441\u044c \u0442\u043e, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 -#}\n    assumeNotNull(coalesce(if({{ skip_null }} = '', null, hex(MD5({{ all }}))))) as {{ link_name }}Hash\n    \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5290437, "supported_languages": null}, "macro.etlcraft.custom_hash": {"name": "custom_hash", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hashes/old_custom_hash.sql", "original_file_path": "macros/hashes/old_custom_hash.sql", "unique_id": "macro.etlcraft.custom_hash", "macro_sql": "\n{%- macro custom_hash(field_list) -%}\n\n    {%- for key in field_list.keys() -%}\n    {%- set fields = [] -%}\n    {%- for line in field_list[key] -%}\n        {%- set _ = fields.append(\n            \"ifNull(nullIf(upper(trim(toString(\" ~ line ~ \"))), ''), '^^')\"\n        ) -%}\n\n        {%- if not loop.last %}\n            {%- set _ = fields.append(\"'||'\") -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n    {{ clickhouse__hash(clickhouse__concat(fields)) }} as {{ key }}\n    {%- if not loop.last -%} , \n    {% endif -%}\n    {%- set fields = [] -%}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__hash", "macro.etlcraft.clickhouse__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5303025, "supported_languages": null}, "macro.etlcraft.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hashes/surrogate_key.sql", "original_file_path": "macros/hashes/surrogate_key.sql", "unique_id": "macro.etlcraft.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5312033, "supported_languages": null}, "macro.etlcraft.clickhouse__surrogate_key": {"name": "clickhouse__surrogate_key", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hashes/surrogate_key.sql", "original_file_path": "macros/hashes/surrogate_key.sql", "unique_id": "macro.etlcraft.clickhouse__surrogate_key", "macro_sql": "\n{%- macro clickhouse__surrogate_key(field_list) -%}\n\n    {%- if varargs|length >= 1 %}\n\n    {%- do exceptions.warn(\"Warning: the `surrogate_key` macro now takes a single list argument instead of multiple string arguments. Support for multiple string arguments will be deprecated in a future release of dbt-utils.\") -%}\n\n    {# first argument is not included in varargs, so add first element to field_list_xf #}\n    {%- set field_list_xf = [field_list] -%}\n\n    {%- for field in varargs %}\n    {%- set _ = field_list_xf.append(field) -%}\n    {%- endfor -%}\n\n    {%- else -%}\n\n    {# if using list, just set field_list_xf as field_list #}\n    {%- set field_list_xf = field_list -%}\n\n    {%- endif -%}\n\n\n    {%- set fields = [] -%}\n\n    {%- for field in field_list_xf -%}\n\n        {%- set _ = fields.append(\n            \"ifNull(nullIf(upper(trim(toString(\" ~ field ~ \"))), ''), '^^')\"\n        ) -%}\n\n        {%- if not loop.last %}\n            {%- set _ = fields.append(\"'||'\") -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {{ clickhouse__hash(clickhouse__concat(fields)) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.etlcraft.clickhouse__hash", "macro.etlcraft.clickhouse__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5323904, "supported_languages": null}, "macro.etlcraft.clickhouse__hash": {"name": "clickhouse__hash", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hashes/surrogate_key.sql", "original_file_path": "macros/hashes/surrogate_key.sql", "unique_id": "macro.etlcraft.clickhouse__hash", "macro_sql": "{% macro clickhouse__hash(field) -%}\n    hex(MD5({{field}}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5325537, "supported_languages": null}, "macro.etlcraft.clickhouse__concat": {"name": "clickhouse__concat", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hashes/surrogate_key.sql", "original_file_path": "macros/hashes/surrogate_key.sql", "unique_id": "macro.etlcraft.clickhouse__concat", "macro_sql": "{% macro clickhouse__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5327518, "supported_languages": null}, "macro.etlcraft.entity_hash": {"name": "entity_hash", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/hashes/entity_hash.sql", "original_file_path": "macros/hashes/entity_hash.sql", "unique_id": "macro.etlcraft.entity_hash", "macro_sql": "{%- macro entity_hash(entity_name, metadata_dict, alias='') -%}\n    {%- set entity_keys = metadata_dict['entities'][entity_name]['keys'] -%}\n\n    {%- set all_cols = [] -%} {# \u0441\u044e\u0434\u0430 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u043a\u043b\u044e\u0447\u0438 \u0441 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\u043c\u0438 #}\n    {%- set skip_null_cols = [] -%} {# skipInNullCheck #}\n\n    {%- for key in entity_keys -%}\n        {% set sql_string = 'toString({})'.format(key['name']) %}\n        \n        {%- if not key.get('notrim') -%}\n            {% set sql_string = 'trim({})'.format(sql_string) %}\n        {%- endif -%}\n        {%- if not key.get('case-sensitive') -%}\n            {%- set sql_string = 'upper({})'.format(sql_string) -%}\n        {%- endif -%}\n\n        {%- set sql_string = 'ifnull(nullif({}, \\'\\'), \\'\\')'.format(sql_string) -%}\n\n        {%- if not key.get('skipInNullCheck') -%}\n            {% set _ = skip_null_cols.append(sql_string) %}\n        {%- endif -%}\n\n        {%- set _ = all_cols.append(sql_string) -%}\n\n    {%- endfor -%}\n\n    {%- set all = ' || \\';\\' || '.join(all_cols) -%}\n    {%- set skip_null = ' || '.join(skip_null_cols) -%}\n\n\n    assumeNotNull(coalesce(if({{ skip_null }} = '', null, hex(MD5({{ all }}))))) as {% if (alias | length > 0) %}{{ alias }}{% else %}{{ entity_name }}{% endif %}Hash\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.53582, "supported_languages": null}, "macro.etlcraft.graph_lookup": {"name": "graph_lookup", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/graphs/graph_lookup.sql", "original_file_path": "macros/graphs/graph_lookup.sql", "unique_id": "macro.etlcraft.graph_lookup", "macro_sql": "{%- macro graph_lookup(\n  params = none,\n  override_target_metadata=none,\n  stage_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('key_number') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443.\n#}\n{{\n    config(\n        materialized='table',\n        order_by=('key_number')\n    )\n}}\n\n{# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 #}\nwith all_keys as\n(\n    {# \n        \u0412\u044b\u0431\u043e\u0440 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0445\u044d\u0448\u0435\u0439 \u0438\u0437 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043c\u0430\u043a\u0440\u043e\u0441\u0430 graph_tuples \n        \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438\u0445 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0443\u0437\u043b\u0430\u043c\u0438.\n    #}\n    select distinct hash as key_hash from {{ ref('graph_tuples') }}\n    union distinct select distinct node_left as key_hash from {{ ref('graph_tuples') }}\n)\n\n{# \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435 \u0438\u043c \u043d\u043e\u043c\u0435\u0440\u0430 #}\nselect *, row_number() over() as key_number from all_keys\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.536742, "supported_languages": null}, "macro.etlcraft.calc_graph": {"name": "calc_graph", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/graphs/calc_graph.sql", "original_file_path": "macros/graphs/calc_graph.sql", "unique_id": "macro.etlcraft.calc_graph", "macro_sql": "{% macro calc_graph() %}\n    {# \u0417\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b #}\n    {% set right_query %}\n        create or replace table {{ target.schema }}.graph_right engine=Log() as\n        with\n        min_group_id as (\n            select\n                node_id_left,\n                min(group_id) as min_group_id\n            from {{ target.schema }}.graph_edge\n            group by node_id_left\n        )\n\n        select\n            node_id_left,\n            node_id_right,\n            min_group_id as group_id,\n            min_group_id != e.group_id as has_changed\n        from {{ target.schema }}.graph_edge e\n        join min_group_id r on r.node_id_left = e.node_id_left\n    {% endset %}\n\n    {# \u0417\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0435\u0432\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b #}\n    {% set left_query %}\n        create or replace table {{ target.schema }}.graph_edge engine=Log() as\n        with\n        min_group_id as (\n            select\n                node_id_right,\n                min(group_id) as min_group_id\n            from {{ target.schema }}.graph_right\n            group by node_id_right\n        )\n\n        select\n            node_id_left,\n            node_id_right,\n            min_group_id as group_id,\n            min_group_id != e.group_id as has_changed\n        from {{ target.schema }}.graph_right e\n        join min_group_id r on r.node_id_right = e.node_id_right\n    {% endset %}\n\n    {# \u0417\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 #}\n    {% set check_changed %}\n        select \n            max(has_changed) \n        from {{ target.schema }}.graph_edge\n    {% endset %}\n\n    {# \u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b #}\n    {% if execute %}\n        {% set ns = namespace(check_change=1) %}\n        {% for i in range(0, 14) %}\n            {{ log(\"Running iteration \" ~ i) }}\n            {{ check_change }}\n\n            {# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0431\u044b\u043b\u0438 \u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f #}\n            {% if ns.check_change == 1 %}\n                {# \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0430\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 #}\n                {% do run_query(right_query) %}\n                {# \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043b\u0435\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 #}\n                {% do run_query(left_query) %}\n                {# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 #}\n                {% set ns.check_change = run_query(check_changed).rows[0][0] %}\n                {{ log('VALUE: ' ~ ns.check_change) }}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5394459, "supported_languages": null}, "macro.etlcraft.graph_tuples": {"name": "graph_tuples", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/graphs/graph_tuples.sql", "original_file_path": "macros/graphs/graph_tuples.sql", "unique_id": "macro.etlcraft.graph_tuples", "macro_sql": "{%- macro graph_tuples(\n  params = none,\n  override_target_metadata=none,\n  stage_name=none\n  ) -%}\n\n{# \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e #}\n{%- set metadata_dict = fromyaml(override_target_metadata or etlcraft.metadata()) -%}\n{# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043a\u043b\u0435\u0439\u043a\u0438 \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 #}\n{%- set glue_models = metadata_dict['glue_models'] -%}\n\n{# \u0426\u0438\u043a\u043b \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u044f\u043c \u0441\u043a\u043b\u0435\u0439\u043a\u0438 #}\n{%- for table, data in glue_models.items() -%}\n    {% set cols = data['cols'] %}\n    {% set datetime_field = data['datetime_field'] %}\n    {%- set query = '' -%}\n    \n    {# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043d\u0435 \u043f\u0435\u0440\u0432\u0430\u044f \u043b\u0438 \u044d\u0442\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f #}\n    {%- if not loop.first %}\n        {{ query ~ 'union all' }}\n    {% endif -%}\n\n    {# \u0426\u0438\u043a\u043b \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043a\u043b\u0435\u0439\u043a\u0438 #}\n    {%- for col in cols[1:] -%}\n\n        {# \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u0435 \u043f\u0435\u0440\u0432\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u0432 \u0446\u0438\u043a\u043b\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f #}\n        {%- if not loop.first %}\n            {{ query ~ 'union all' }}\n        {% endif -%}\n        {%- set tmp -%}\n        \n            {# \u0421\u043e\u0437\u0434\u0430\u0435\u043c SQL-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 #}\n            select\n                    tuple(toLowCardinality(__link), {{ datetime_field }},  __id) as hash,\n                    tuple(toLowCardinality('{{ col }}'), toDateTime(0),  {{ col }}) as node_left\n            from {{ target.schema }}.{{ table }}\n            where nullIf({{ col }}, '') is not null\n        {%- endset -%}\n        \n        {# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430 #}\n        {{ config(\n           materialized='table',\n           on_schema_change='fail'\n        ) }}\n        \n        {# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c SQL-\u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 #}\n        {{ query ~ tmp  }}\n\n    {%- endfor -%}\n{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5417435, "supported_languages": null}, "macro.etlcraft.graph": {"name": "graph", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/graphs/graph.sql", "original_file_path": "macros/graphs/graph.sql", "unique_id": "macro.etlcraft.graph", "macro_sql": "{%- macro graph(\n  params = none,\n  override_target_metadata=none,\n  override_target_model_name=none\n  ) -%}\n\n\n{%- set stage_name = (override_target_model_name or this.name) -%}\n\n\n{{ etlcraft[stage_name](params,override_target_metadata,stage_name)}}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5422573, "supported_languages": null}, "macro.etlcraft.graph_qid": {"name": "graph_qid", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/graphs/graph_qid.sql", "original_file_path": "macros/graphs/graph_qid.sql", "unique_id": "macro.etlcraft.graph_qid", "macro_sql": "{%- macro graph_qid(\n  params = none,\n  override_target_metadata=none,\n  stage_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('__datetime', '__link', '__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0435, \u0441\u0441\u044b\u043b\u043a\u0435 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n    pre_hook=\"{{ etlcraft.calc_graph() }}\" \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0445\u0443\u043a\u0430 etlcraft.calc_graph() \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n#}\n{{\n    config(\n        materialized='table', \n        order_by=('__datetime', '__link', '__id'), \n        pre_hook=\"{{ etlcraft.calc_graph() }}\"  \n    )\n}}\n\n{# \n    \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b.\n    \u041a\u0430\u0436\u0434\u043e\u043c\u0443 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443 (__link, __datetime, __id) \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 qid \u0438\u0437 \u0440\u0430\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b graph_glue.\n#}\nselect  \n    toLowCardinality(\n        tupleElement(key_hash, 1)\n    ) as __link,\n    tupleElement(key_hash, 2) as __datetime,\n    tupleElement(key_hash, 3) as __id,\n    qid\nfrom {{ ref('graph_glue') }}  -- \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 graph_glue\njoin {{ ref('graph_lookup') }} on key_number = node_id_left  -- \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 graph_lookup\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5431337, "supported_languages": null}, "macro.etlcraft.graph_edge": {"name": "graph_edge", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/graphs/graph_edge.sql", "original_file_path": "macros/graphs/graph_edge.sql", "unique_id": "macro.etlcraft.graph_edge", "macro_sql": "{%- macro graph_edge(\n  params = none,\n  override_target_metadata=none,\n  stage_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    materialized='table' \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443.\n    post_hook \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    \u0417\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f post_hook \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 graph_edge \u0432 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0437\u0430\u043c\u0435\u043d\u043e\u0439.\n#}\n{{\n    config(\n        materialized='table',  \n        post_hook= {\n            'sql': 'insert into {{target.schema}}.graph_edge(node_id_left, node_id_right, group_id, has_changed)\n                    select\n                        node_id_right,\n                        node_id_left,\n                        group_id,\n                        has_changed\n                    from {{target.schema}}.graph_edge;'\n        }\n    )\n}}\n\n{# \n    \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b join_left \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0438 \u0443\u0437\u043b\u0430\u043c\u0438.\n    \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b graph_tuples \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 graph_unique \u043f\u043e \u043a\u043b\u044e\u0447\u0430\u043c.\n#}\nwith join_left as (\n    select key_number as node_id_left, node_left\n    from {{ ref('graph_tuples') }} x\n    join {{ ref('graph_unique') }}  y on x.hash = y.key_hash\n)\n\n{# \n    \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0433\u0440\u0430\u0444\u0430, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0434\u0438\u043d \u0443\u0437\u0435\u043b \u0438 \u043e\u0434\u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u0430.\n#}\nselect node_id_left, key_number as node_id_right, node_id_left as group_id, 1 as has_changed \nfrom join_left x\njoin {{ ref('graph_unique') }}  y on x.node_left = y.key_hash\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5440817, "supported_languages": null}, "macro.etlcraft.graph_glue": {"name": "graph_glue", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/graphs/graph_glue.sql", "original_file_path": "macros/graphs/graph_glue.sql", "unique_id": "macro.etlcraft.graph_glue", "macro_sql": "{%- macro graph_glue(\n  params = none,\n  override_target_metadata=none,\n  stage_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('node_id_left') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0443\u0437\u043b\u0430 \u0441\u043b\u0435\u0432\u0430.\n    pre_hook=\"{{ etlcraft.calc_graph() }}\" \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0445\u0443\u043a\u0430 etlcraft.calc_graph() \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n#}\n{{\n    config(\n        materialized='table',\n        order_by=('node_id_left'),\n        pre_hook=\"{{ etlcraft.calc_graph() }}\"\n    )\n}}\n\n{# \n    \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0443\u0437\u043b\u043e\u0432 \u0441\u043b\u0435\u0432\u0430 \u0438 \u0438\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0433\u0440\u0443\u043f\u043f\u044b \u0438\u0437 \u0440\u0430\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b graph_edge.\n    \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0443\u0437\u043b\u0430 \u0441\u043b\u0435\u0432\u0430.\n#}\nselect \n    node_id_left,\n    max(group_id) as qid\nfrom {{ ref('graph_edge') }}\ngroup by node_id_left\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.544747, "supported_languages": null}, "macro.etlcraft.graph_unique": {"name": "graph_unique", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/graphs/graph_unique.sql", "original_file_path": "macros/graphs/graph_unique.sql", "unique_id": "macro.etlcraft.graph_unique", "macro_sql": "{%- macro graph_unique(\n  params = none,\n  override_target_metadata=none,\n  stage_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('key_hash') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u043c\u0443 \u0445\u044d\u0448\u0443.\n#}\n{{\n    config(\n        materialized='table',\n        order_by=('key_hash')\n    )\n}}\n\n{# \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0432\u0441\u0435\u0445 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 \u0438\u0437 \u0440\u0430\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b graph_lookup #}\nselect * from {{ ref('graph_lookup') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.545304, "supported_languages": null}, "macro.etlcraft.metadata": {"name": "metadata", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/misc/metadata.sql", "original_file_path": "macros/misc/metadata.sql", "unique_id": "macro.etlcraft.metadata", "macro_sql": "{%- macro metadata() -%}\nentities:\n  Account:\n    keys:\n    - name: accountName\n  Product:\n    keys:\n    - name: productName\n  AdSource:\n    keys:\n    - name: adSourceDirty\n  UtmParams:\n    keys:\n    - name: utmSource\n    - name: utmMedium\n    - name: utmCampaign\n    - name: utmTerm\n    - name: utmContent\n  UtmHash:\n    keys:\n    - name: utmHash\n  AdPhrase:\n    keys:\n    - name: adPhraseId\n  AdCampaign:\n    keys:\n    - name: adCampaignName\n  AdGroup:\n    keys:\n    - name: adGroupName\n  Ad:\n    keys:\n    - name: adId\n  YmClient:\n    glue: yes\n    keys:\n    - name: clientId\n  CrmUser:\n    glue: yes\n    keys:\n    - name: crmUserId\n  PromoCode:\n    keys:\n    - name: promoCode\n  City:\n    keys:\n    - name: cityName\n  AppMetricaDevice:\n    glue: yes\n    keys:\n    - name: appmetricaDeviceId\n  MobileAdsId:\n    keys:\n    - name: mobileAdsId\n  AppMetricaDeviceId:\n    keys:\n    - name: appmetricaDeviceId\n  OsName:\n    keys:\n    - name: osName\n  Visit:\n    keys:\n    - name: visitId\n  Transaction:\n    keys:\n    - name: transactionId\n  AppSession:\n    keys:\n    {# - name: appSessionId #}\n    - name: installationDeviceId\nlinks: \n  AdCostStat:\n    pipeline: datestat\n    datetime_field: __date\n    keys:\n    - name: __date \n    - name: reportType\n    main_entities:\n    - Account\n    - AdSource \n    - AdCampaign \n    - AdGroup \n    - Ad \n    - AdPhrase  \n    - UtmParams \n    - UtmHash\n  MediaplanStat:\n    datetime_field: planCostDate\n    keys:\n    - name: planCostDate\n    main_entities:\n    - Account\n    - Product\n    - CityCode\n    - AdSource\n    - UtmParams\n  AppInstallStat:\n    pipeline: events\n    datetime_field: event_datetime\n    keys:\n    - name: event_datetime\n    main_entities:\n    - Account\n    - AppMetricaDevice\n    - MobileAdsId\n    - CrmUser\n    - OsName\n    - City\n    - AdSource\n    - UtmParams \n    - UtmHash\n  AppEventStat:\n    pipeline: events\n    datetime_field: event_datetime\n    keys:\n    - name: event_datetime\n    main_entities:\n    - Account\n    - AppMetricaDevice\n    - MobileAdsId\n    - CrmUser\n    - Transaction\n    - PromoCode\n    - OsName\n    - City\n  AppSessionStat:\n    pipeline: events\n    datetime_field: event_datetime\n    keys:\n    - name: event_datetime\n    main_entities:\n    - Account\n    - AppSession\n    - AppMetricaDevice\n    - MobileAdsId\n    - CrmUser\n    - OsName\n    - City\n  AppDeeplinkStat:\n    pipeline: events\n    datetime_field: event_datetime\n    keys:\n    - name: event_datetime\n    main_entities:\n    - Account\n    - AppMetricaDevice\n    - MobileAdsId\n    - CrmUser\n    - OsName\n    - City\n    - AdSource\n    - UtmParams  \n    - UtmHash\n  VisitStat:\n    pipeline: events\n    datetime_field: __date\n    keys:\n    - name: event_datetime\n    main_entities: \n    - Visit\n    other_entities:\n    - Account \n    - YmClient\n    - PromoCode\n    - OsName\n    - City\n    - AdSource\n    - UtmParams  \n    - UtmHash\n  AppProfileMatching:\n    pipeline: registry\n    datetime_field: toDateTime(0)\n    keys:\n    - name: toDateTime(0)\n    main_entities: \n    - AppMetricaDevice\n    other_entities: \n    - CrmUser\nglue_models:\n  hash_events:\n    datetime_field: __datetime\n    cols:\n    - AppEventStatHash\n    - CrmUserHash\n    - YmClientHash\n    - AppMetricaDeviceHash\n  hash_registry_app_profile_matching:\n    datetime_field: __datetime\n    cols:\n    - AppProfileMatchingHash\n    - AppMetricaDeviceHash\n    - CrmUserHash\nsteps:\n  visits_step:\n      - link: VisitStat\n        datetime_field: __datetime\n        condition: osName = 'web'\n        period: 90\n        if_missed: '[\u0411\u0435\u0437 \u0432\u0435\u0431 \u0441\u0435\u0441\u0441\u0438\u0438]'\n  install_step:\n      - link: AppInstallStat\n        datetime_field: __datetime\n        condition: installs >= 1\n        period: 30\n        if_missed: '[\u0411\u0435\u0437 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438]'\n  app_visits_step:\n      - link: AppSessionStat\n        datetime_field: __datetime\n        condition: sessions >= 1\n        period: 30\n        if_missed: '[\u0411\u0435\u0437 \u0430\u043f\u043f \u0441\u0435\u0441\u0441\u0438\u0438]'\n      - link: AppDeeplinkStat\n        datetime_field: __datetime\n        period: 30\n        if_missed: '[\u0411\u0435\u0437 \u0430\u043f\u043f \u0441\u0435\u0441\u0441\u0438\u0438]'\n  event_step:\n      - link: AppEventStat\n        datetime_field: __datetime\n        condition: screenView >= 1\n        period: 7\nattribution_models:\n  my_first_model:\n    type: last_click\n    priorities: \n    - LENGTH (adSourceDirty) < 2\n    - match(adSourceDirty, '\u041e\u0440\u0433\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430')\n    - __priority = 4 and not __if_missed = 1\n    - __priority = 3 and not __if_missed = 1\n    - __priority = 2 and not __if_missed = 1\n    - __priority = 1 and not __if_missed = 1\n    fields:\n    - utmSource\n    - utmMedium\n    - utmCampaign\n    - utmTerm\n    - utmContent\n    - adSourceDirty\n  my_second_model:\n    type: first_click\n    priorities: \n    - __priority = 3 and not __if_missed = 1\n    - __priority = 2 and not __if_missed = 1\n    - __priority = 1 and not __if_missed = 1\n    fields:\n    - utmSource\n    - utmMedium\n    - utmCampaign\n    - utmTerm\n    - utmContent\n    - adSourceDirty\n  my_third_model:\n    type: first_click\n    priorities: \n    - __priority = 3 and not __if_missed = 1\n    - __priority = 2 and not __if_missed = 1\n    - __priority = 1 and not __if_missed = 1\n    fields:\n    - utmSource\n    - utmMedium\n    - utmCampaign\n    - utmTerm\n    - utmContent\n    - adSourceDirty\nfunnels:\n  myfirstfunnel:\n    steps:\n    - visits_step\n    - install_step\n    - app_visits_step\n    - event_step\n    models:\n    - my_first_model\n    - my_second_model\n  mysecondfunnel:\n    steps:\n    - install_step\n    - app_visits_step\n    - event_step\n    models:\n    - my_first_model\ndatasets:\n  event_table:\n    pipelines: events\n    sources:\n    - appmetrica\n    - ym\n    preset: default\n    accounts:\n    - testaccount\n    funnel: myfirstfunnel\n  cost_table:\n    pipelines: datestat\n    sources:\n    - appmetrica\n    - ym\n    preset: default\n    accounts:\n    - testaccount\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5466297, "supported_languages": null}, "macro.etlcraft.make_link": {"name": "make_link", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/misc/make_link.sql", "original_file_path": "macros/misc/make_link.sql", "unique_id": "macro.etlcraft.make_link", "macro_sql": "{%- macro make_link(metadata_dict) %}\r\n{% set link_name = this.name | replace('link_', '', 1) %}\r\n{% set link_name_camel_case = link_name | replace('_', ' ') | title | replace(' ', '') %}\r\n{% set link_keys = (metadata_dict['links'][link_name_camel_case].get('keys')) | map(attribute='name') %}\r\n{% set group_by_fields = [] %}\r\n{% set source_model_name = 'hash_' + (link_name | lower) %}\r\nSELECT {% for c in adapter.get_columns_in_relation(load_relation(ref(source_model_name))) -%}\r\n{% if c.name == link_name_camel_case + 'Hash' or c.name in link_keys | default([], True) %}{{ c.name }}\r\n{%- do group_by_fields.append(c.name)  -%}\r\n{%- elif 'Int' in c.data_type or 'Float' in c.data_type or 'Num' in c.data_type %}SUM({{ c.name }}) AS {{ c.name }}\r\n{%- else %} MAX({{ c.name }}) AS {{ c.name }}\r\n{%- endif %}{% if not loop.last %},{% endif %}{% endfor %} \r\nFROM {{ ref(source_model_name) }}\r\nGROUP BY {{ group_by_fields | join(', ') }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5491414, "supported_languages": null}, "macro.etlcraft.make_hub": {"name": "make_hub", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/misc/make_hub.sql", "original_file_path": "macros/misc/make_hub.sql", "unique_id": "macro.etlcraft.make_hub", "macro_sql": "{%- macro make_hub() %}\r\n{% set hub_name = this.name | replace('hub_', '', 1) %}\r\nSELECT DISTINCT ON ({{ hub_name | replace('_', ' ') | title | replace(' ', '') }}Hash) *\r\nFROM {{ ref('hash_' + hub_name) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5498233, "supported_languages": null}, "macro.etlcraft.attr_model": {"name": "attr_model", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_model.sql", "original_file_path": "macros/attr/attr_model.sql", "unique_id": "macro.etlcraft.attr_model", "macro_sql": "{%- macro attr_model(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\n{%- set funnels = metadata['funnels'] -%}\n{%- set attribution_models = metadata['attribution_models'] -%}\n{%- set model_list = funnels[funnel_name].models -%}\n\n{# \n    \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044f\u0445 \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.\n    \u041a\u0430\u0436\u0434\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u0430\u043a \u043a\u043b\u044e\u0447, \u0430 \u0435\u0435 \u043f\u043e\u043b\u044f \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n#}\n{%- set model_info = {} -%}\n{% for model in model_list %}\n    {%- set _ = model_info.update({attribution_models[model].type: attribution_models[model].fields}) -%}\n{% endfor %}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('qid', '__datetime', '__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u043d\u043e\u043c\u0435\u0440\u0443 \u043f\u0435\u0440\u0438\u043e\u0434\u0430, \u0434\u0430\u0442\u0435, \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0443 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\n\n{{\n    config(\n        materialized='table',\n        order_by = ('qid', '__datetime', '__id')\n    )\n}}\n\n{# \n    \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.\n#}\nwith\nmax_last_click_rank as (\n\n    select\n        *\n{% for model_type in model_info %}\n        ,max({{'__'~ model_type ~ '_rank' }}) over(partition by qid, __period_number order by __datetime, __priority, __id) as {{'__max_' ~ model_type ~ '_rank' }}\n{%  endfor %}\n     from {{ ref('attr_' ~funnel_name~ '_join_to_attr_prepare_with_qid') }}\n\n),\n\n{# \n    \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0447\u0438\u0441\u043b\u0430 \u0446\u0435\u043b\u0435\u0432\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (\u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u043c) \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0430.\n#}\ntarget_count as (\n\n    select\n        *\n{% for model_type in model_info %}\n         ,{{'__'~ model_type ~ '_rank' }} = {{'__max_' ~ model_type ~ '_rank' }} as  {{'__' ~ model_type ~ '__rank_condition' }}\n         ,sum(case when {{'__' ~ model_type ~ '__rank_condition' }} then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as {{'__' ~ model_type ~ '__target_count' }} \n{%  endfor %}\n    from max_last_click_rank\n)\n\n{# \n    \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0440\u0430\u0441\u0447\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.\n#}\nSELECT \n    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number\n\n{% for model_type, fields in model_info.items() %}\n    {% if model_type == 'last_click' %}\n        {# \n            \u0420\u0430\u0441\u0447\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043b\u0438\u043a\u0430.\n        #}\n        {% for field in fields %}\n            ,first_value({{field}}) over(partition by qid, __period_number, {{'__' ~ model_type ~ '__target_count' }}  order by  __datetime, __priority, __id) as {{'__' ~  funnel_name ~'_'~ model_type ~'_'~ field}}\n        {% endfor %}\n    {% elif model_type == 'first_click' %}\n        {# \n            \u0420\u0430\u0441\u0447\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u043a\u0430.\n        #}\n        {% for field in fields %}\n            ,first_value({{field}}) over(partition by qid, __period_number order by {{'__' ~ model_type ~ '_rank' }} desc,__datetime, __priority, __id) as {{'__' ~  funnel_name ~'_'~ model_type ~ '_'~ field}}\n        {% endfor %}\n    {%  endif %} \n{% endfor %}\n\n FROM target_count\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5538888, "supported_languages": null}, "macro.etlcraft.multiver__attr_find_new_period": {"name": "multiver__attr_find_new_period", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/old_multiver__attr_find_new_period.sql", "original_file_path": "macros/attr/old_multiver__attr_find_new_period.sql", "unique_id": "macro.etlcraft.multiver__attr_find_new_period", "macro_sql": "{%- macro multiver__attr_find_new_period(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__datetime', '__link', '__id')\n    )\n}}\n\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\n{%- set funnels = metadata['funnels'] -%}\n\nwith prep_new_period as (\n\n    select\n        *,\n        {% for funnel_name in funnels %}\n        {%- if not loop.last %}\n             max(case when {{funnel_name ~ '__priority'}} in (0,1,2,3,4,5) then __datetime else null end) over (partition by qid order by  {{funnel_name ~ '__rn'}} rows between unbounded preceding and 1 preceding) as  {{funnel_name ~ 'prep_new_period'}},\n        {% else %}   \n            max(case when {{funnel_name ~ '__priority'}} in (0,1,2,3,4,5) then __datetime else null end) over (partition by qid order by  {{funnel_name ~ '__rn'}} rows between unbounded preceding and 1 preceding) as  {{funnel_name ~ 'prep_new_period'}}\n        {% endif %}\n        {% endfor %}\n    from {{ ref('attr_add_row_number') }}\n\n)\n\nselect\n    qid, __link,\n    __id,\n    __datetime,\n    {% for funnel_name in funnels %}\n    {%- if not loop.last %}\n            {{funnel_name ~ '__rn'}},\n            {{funnel_name ~ '__priority'}},\n            if(toDate(__datetime) - toDate({{funnel_name ~ 'prep_new_period'}}) < 90, false, true) as {{funnel_name ~ '__is_new_period'}} ,\n    {% else %}   \n            {{funnel_name ~ '__rn'}},\n            {{funnel_name ~ '__priority'}},\n            if(toDate(__datetime) - toDate({{funnel_name ~ 'prep_new_period'}}) < 90, false, true) as {{funnel_name ~ '__is_new_period'}}\n    {% endif %}\n    {% endfor %}\n from prep_new_period   \n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.556758, "supported_languages": null}, "macro.etlcraft.multiver__attr_calculate_period_number": {"name": "multiver__attr_calculate_period_number", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/old_multiver__attr_calculate_period_number.sql", "original_file_path": "macros/attr/old_multiver__attr_calculate_period_number.sql", "unique_id": "macro.etlcraft.multiver__attr_calculate_period_number", "macro_sql": "{%- macro multiver__attr_calculate_period_number(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\nselect\n    *,\n    {% for funnel_name in funnels %}\n    {%- if not loop.last %}\n        sum(toInt32({{funnel_name ~ '__is_new_period'}})) over (partition by qid order by  {{funnel_name ~ '__rn'}}) AS  {{funnel_name ~ '__period_number'}}, \n    {% else %}   \n        sum(toInt32({{funnel_name ~ '__is_new_period'}})) over (partition by qid order by  {{funnel_name ~ '__rn'}}) AS  {{funnel_name ~ '__period_number'}}\n    {% endif %}\n    {% endfor %}\n    \n\nfrom {{ ref('attr_find_new_period') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5578523, "supported_languages": null}, "macro.etlcraft.multiver__attr_create_events": {"name": "multiver__attr_create_events", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/old_multiver__attr_create_events.sql", "original_file_path": "macros/attr/old_multiver__attr_create_events.sql", "unique_id": "macro.etlcraft.multiver__attr_create_events", "macro_sql": "{%- macro multiver__attr_create_events(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__datetime','__link','__id')\n    )\n}}\n\n\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\n{%- set funnels = metadata['funnels'] -%}\n\n\nselect\n    qid, \n    __link,   \n{% for funnel_name in funnels %}\n    CASE\n    {%- set funnel_steps = funnels[funnel_name] -%}\n    {%- for step in funnel_steps -%}\n        {%- set counter = loop.index -%}\n        {%- for  key, value in step.items() -%}\n            {%- for item in value -%}\n                {%- for sub_key, sub_value in item.items() -%}\n                    {% if sub_key == 'link' %} \n                        WHEN __link = '{{sub_value}}' {% if 'condition' in item %} and {{ item['condition'] }}  {% endif %} THEN  {{ counter }}\n                    {%- endif -%}\n                {%- endfor -%}\n            {%- endfor -%}\n        {%- endfor -%}\n    {% endfor %}\n    END as {{funnel_name ~ '__priority'}},\n{% endfor %}\n        \n        __id,\n        __datetime,\n from {{ ref('attr_prepare_with_qid') }}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5602062, "supported_languages": null}, "macro.etlcraft.attr_create_missed_steps": {"name": "attr_create_missed_steps", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_create_missed_steps.sql", "original_file_path": "macros/attr/attr_create_missed_steps.sql", "unique_id": "macro.etlcraft.attr_create_missed_steps", "macro_sql": "{%- macro attr_create_missed_steps(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('qid', '__datetime','__link','__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u0434\u0430\u0442\u0435, \u0441\u0441\u044b\u043b\u043a\u0435 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__datetime','__link','__id')\n    )\n}}\n\n{# \n    \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b (qid) \u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0430.\n#}\nwith calc_max_priority as (\n    select\n        qid, \n        __link,\n        __id,\n        __datetime,\n        __rn,\n        __priority,\n        __period_number,\n        __step,\n        max(__priority) over(partition by qid, __period_number) as max_priority\n    from {{ ref('attr_' ~ funnel_name ~ '_calculate_period_number') }}\n),\n\n{# \n    \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430.\n#}\ngenerate_all_priorities as (\n    select\n        distinct qid, __link,\n        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority\n    from calc_max_priority\n),\n\n{# \n    \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0448\u0430\u0433\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430.\n#}\nfinal as (\n    select\n        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,\n        gen_priority as __priority,\n        qid, __link,\n        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,\n        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,\n        case when calc_max_priority.qid = 0 then true else false end as __if_missed,\n        __step\n    from generate_all_priorities\n    left join calc_max_priority\n        on generate_all_priorities.qid = calc_max_priority.qid and\n           generate_all_priorities.gen_priority = calc_max_priority.__priority\n)\n\n{# \n    \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (__rn) \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b.\n#}\nselect\n    qid, __link, __id,\n    __priority, __datetime,\n    __period_number,\n    __if_missed,__step,\n    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn\nfrom final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5614765, "supported_languages": null}, "macro.etlcraft.attr_calculate_period_number": {"name": "attr_calculate_period_number", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_calculate_period_number.sql", "original_file_path": "macros/attr/attr_calculate_period_number.sql", "unique_id": "macro.etlcraft.attr_calculate_period_number", "macro_sql": "{%- macro attr_calculate_period_number(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('qid', '__datetime', '__link', '__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u0434\u0430\u0442\u0435, \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0443 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__datetime', '__link', '__id')\n    )\n}}\n\n{# \n    \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b (qid).\n    \u0421\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f __is_new_period \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0433\u0440\u0443\u043f\u043f\u0435 \u0434\u0430\u0435\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430.\n#}\nselect\n    *,\n    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number\nfrom {{ ref('attr_' ~funnel_name~ '_find_new_period') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5622108, "supported_languages": null}, "macro.etlcraft.attr": {"name": "attr", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr.sql", "original_file_path": "macros/attr/attr.sql", "unique_id": "macro.etlcraft.attr", "macro_sql": "{%- macro attr(\n  params = none,\n  override_target_metadata=none,\n  override_target_model_name=none\n  ) -%}\n\n\n\n\n\n{%- set model_name_parts = (override_target_model_name or this.name).split('_') -%}\n{%- set funnel_name = model_name_parts[1] -%}\n{%- set stage_name = model_name_parts[2:] -%}\n\n{%- set stage_name = 'attr_' ~ '_'.join(stage_name) -%}\n\n\n{{ etlcraft[stage_name](params,override_target_metadata,funnel_name)}}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.563114, "supported_languages": null}, "macro.etlcraft.multiver__attr_add_row_number": {"name": "multiver__attr_add_row_number", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/old_multiver__attr_add_row_number.sql", "original_file_path": "macros/attr/old_multiver__attr_add_row_number.sql", "unique_id": "macro.etlcraft.multiver__attr_add_row_number", "macro_sql": "{%- macro multiver__attr_add_row_number(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__datetime', '__link', '__id')\n    )\n}}\n\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\n{%- set funnels = metadata['funnels'] -%}\nselect\n    * ,\n    {% for funnel_name in funnels %}\n    {%- if not loop.last %}\n        row_number() over (partition by qid order by __datetime, {{funnel_name ~ '__priority'}},  __id) AS  {{funnel_name ~ '__rn'}},\n    {% else %}   \n        row_number() over (partition by qid order by __datetime, {{funnel_name ~ '__priority'}},  __id) AS {{funnel_name ~ '__rn'}}\n    {% endif %}\n    {% endfor %}\n\nfrom {{ ref('attr_create_events') }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5644686, "supported_languages": null}, "macro.etlcraft.attr_find_new_period": {"name": "attr_find_new_period", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_find_new_period.sql", "original_file_path": "macros/attr/attr_find_new_period.sql", "unique_id": "macro.etlcraft.attr_find_new_period", "macro_sql": "{%- macro attr_find_new_period(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    materialized='table' \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443.\n    order_by=('qid', '__datetime', '__link', '__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u0434\u0430\u0442\u0435, \u0441\u0441\u044b\u043b\u043a\u0435 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__datetime', '__link', '__id')\n    )\n}}\n\n{# \n    \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0448\u0430\u0433\u043e\u0432 \u0432\u043e\u0440\u043e\u043d\u043a\u0438 \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0448\u0430\u0433\u043e\u0432 \u0438 \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430.\n#}\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\n{%- set funnels = metadata['funnels'] -%}\n{%- set step_name_list = funnels[funnel_name].steps -%}\n{%- set counter = [] -%}\n{%- set steps = metadata['steps'] -%}\n\n{%- for step_name in step_name_list -%}\n    {%- do counter.append(loop.index) -%}\n{% endfor %}\n\n{# \n    \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430.\n    \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043d\u0430 \u0448\u0430\u0433\u0430\u0445, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u043f\u0435\u0440\u0438\u043e\u0434\u0430.\n#}\nwith prep_new_period as (\n    select\n        *,\n        max(case when __priority in {{counter}} then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period\n    from {{ ref('attr_' ~funnel_name~ '_add_row_number') }}\n)\n\n{# \n    \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u043e\u0432\u044b\u043c \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c.\n    \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0435\u0433\u043e \u0434\u0430\u0442\u043e\u0439 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0432 \u043f\u0435\u0440\u0438\u043e\u0434\u0435.\n    \u0415\u0441\u043b\u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 (\u0438\u043b\u0438 90 \u0434\u043d\u0435\u0439, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0438\u043e\u0434 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d), \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043f\u0435\u0440\u0438\u043e\u0434\u0443.\n#}\nselect\n    qid, \n    __link,\n    __priority,\n    __id,\n    __datetime,\n    __rn,\n    __step,\n    CASE\n    {% for step_name in step_name_list %}\n        {%- set counter = loop.index -%}\n        {% for step_info in steps[step_name] %}\n            WHEN __link = '{{step_info.link}}' and toDate(__datetime) - toDate(prep_new_period) < \n            {% if 'period' in step_info %} {{step_info.period}} {% else %} 90 {% endif %} THEN false\n        {% endfor %}\n    {%- endfor -%}\n    ELSE true\n    END as __is_new_period\n from prep_new_period   \n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5668669, "supported_languages": null}, "macro.etlcraft.attr_join_to_attr_prepare_with_qid": {"name": "attr_join_to_attr_prepare_with_qid", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_join_to_attr_prepare_with_qid.sql", "original_file_path": "macros/attr/attr_join_to_attr_prepare_with_qid.sql", "unique_id": "macro.etlcraft.attr_join_to_attr_prepare_with_qid", "macro_sql": "{%- macro attr_join_to_attr_prepare_with_qid(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{# \n    \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0438\u0445 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432.\n#}\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\n{%- set funnels = metadata['funnels'] -%}\n{%- set attribution_models = metadata['attribution_models'] -%}\n{%- set model_list = funnels[funnel_name].models -%}\n{%- set step_name_list = funnels[funnel_name].steps -%}\n{%- set steps = metadata['steps'] -%}\n\n{# \n    \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043c\u043e\u0434\u0435\u043b\u044f\u0445.\n    \u041a\u0430\u0436\u0434\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u0430\u043a \u043a\u043b\u044e\u0447, \u0430 \u0435\u0435 \u0442\u0438\u043f \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n#}\n{%- set model_info = {} -%}\n{% for model in model_list %}\n    {%- set _ = model_info.update({attribution_models[model].type: attribution_models[model].priorities}) -%}\n{% endfor %}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('qid', '__period_number', '__datetime', '__priority', '__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u043d\u043e\u043c\u0435\u0440\u0443 \u043f\u0435\u0440\u0438\u043e\u0434\u0430, \u0434\u0430\u0442\u0435, \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0443 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__period_number', '__datetime', '__priority', '__id')\n    )\n}}\n\n{# \n    \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0434\u0432\u0443\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: attr_prepare_with_qid \u0438 attr_create_missed_steps.\n#}\nselect \n    y.__period_number as __period_number, \n    y.__if_missed as __if_missed, \n    y.__priority as __priority, \n    y.__step as __step,\n    x.*EXCEPT(adSourceDirty),\n\n{# \n    \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0435\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430.\n#}\n{% for model_type, priorities in model_info.items() %}\n    CASE\n    {% for priority in priorities %}\n        {%- set counter = loop.index -%}\n        WHEN {{ priority }} THEN {{ counter }}\n    {% endfor %}\n    ELSE 0\n    END as {{ '__'~ model_type ~ '_rank' }},\n{% endfor %}\n\n{# \n    \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 adSourceDirty \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0435\u0433\u043e \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0438 \u0444\u043b\u0430\u0433\u0430 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u0448\u0430\u0433\u0430.\n#}\nCASE\n{% for step_name in step_name_list %}\n    {%- set counter = loop.index -%}\n    {% for step_info in steps[step_name] %}\n         WHEN  __if_missed and __priority = {{ counter }} \n         THEN '{{step_info.if_missed}}'\n    {% endfor %}\n{% endfor %}\nELSE adSourceDirty\nEND as adSourceDirty\n\nfrom {{ ref('attr_' ~funnel_name~ '_prepare_with_qid') }} AS x\njoin {{ ref('attr_' ~funnel_name~ '_create_missed_steps') }} AS y\n    using (qid, __datetime, __link, __id)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5701346, "supported_languages": null}, "macro.etlcraft.multiver__attr_create_missed_steps": {"name": "multiver__attr_create_missed_steps", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/old_multiver__attr_create_missed_steps.sql", "original_file_path": "macros/attr/old_multiver__attr_create_missed_steps.sql", "unique_id": "macro.etlcraft.multiver__attr_create_missed_steps", "macro_sql": "{%- macro multiver__attr_create_missed_steps(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__datetime','__link','__id')\n    )\n}}\n\nwith calc_max_priority as (\n\n      select\n          qid, \n          __link,\n          __id,\n          __datetime,\n\n            {% for funnel_name in funnels %}\n            {%- if not loop.last %}\n                    {{funnel_name ~ '__rn'}},\n                    {{funnel_name ~ '__priority'}},\n                    {{funnel_name ~ '__period_number'}},\n                    max({{funnel_name ~ '__priority'}}) over(partition by qid, {{funnel_name ~ '__period_number'}}) as  {{funnel_name ~ '__max_priority'}},\n            {% else %}   \n                    {{funnel_name ~ '__rn'}},\n                    {{funnel_name ~ '__priority'}},\n                    {{funnel_name ~ '__period_number'}},\n                    max({{funnel_name ~ '__priority'}}) over(partition by qid, {{funnel_name ~ '__period_number'}}) as {{funnel_name ~ '__max_priority'}}\n            {% endif %}\n            {% endfor %}\n          max(__priority) over(partition by qid, __period_number) as max_priority\n    from {{ ref('attr_calculate_period_number') }}\n\n),\n\ngenerate_all_priorities as (\n\n    select\n        distinct qid, __link,\n        {% for funnel_name in funnels %}\n            {%- if not loop.last %}\n                arrayJoin(range(1, assumeNotNull({{funnel_name ~ '__max_priority'}}) + 1)) as  {{funnel_name ~ '__gen_priority'}}\n            {% endif %}\n        {% endfor %}\n    from calc_max_priority\n\n),\n\nfinal as (\n    select\n        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,\n        gen_priority as __priority,\n        qid, record_source,\n        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,\n        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,\n        case when calc_max_priority.qid = 0 then true else false end as __if_missed\n\n    from generate_all_priorities\n    left join calc_max_priority\n        on generate_all_priorities.qid = calc_max_priority.qid and\n           generate_all_priorities.gen_priority = calc_max_priority.__priority\n)\n\nselect\n    qid, record_source, __id,\n    __priority, __datetime,\n    __period_number,\n    __if_missed,\n    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn\n\nfrom final\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5734234, "supported_languages": null}, "macro.etlcraft.attr_final_table": {"name": "attr_final_table", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_final_table.sql", "original_file_path": "macros/attr/attr_final_table.sql", "unique_id": "macro.etlcraft.attr_final_table", "macro_sql": "{%- macro attr_final_table(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438: \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (__datetime).\n#}\n{{\n    config(\n        materialized = 'table',\n        order_by = ('__datetime')\n    )\n}}\n\n{# \n    \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b.\n    \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0434\u0432\u0443\u0445 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043c\u0430\u043a\u0440\u043e\u0441\u043e\u0432: attr_join_to_attr_prepare_with_qid \u0438 attr_model.\n#}\nwith \n    out as ( \n        select * except(_dbt_source_relation) \n        from  {{ ref('attr_' ~funnel_name~ '_join_to_attr_prepare_with_qid') }}\n        join  {{ ref('attr_' ~funnel_name~ '_model') }}\n            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)\n    )\n    \nselect * from out \n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.574221, "supported_languages": null}, "macro.etlcraft.attr_add_row_number": {"name": "attr_add_row_number", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_add_row_number.sql", "original_file_path": "macros/attr/attr_add_row_number.sql", "unique_id": "macro.etlcraft.attr_add_row_number", "macro_sql": "{%- macro attr_add_row_number(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('qid', '__datetime', '__link', '__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u0434\u0430\u0442\u0435, \u0441\u0441\u044b\u043b\u043a\u0435 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\n{{\n    config(\n        materialized='table',\n        order_by=('qid', '__datetime', '__link', '__id')\n    )\n}}\n\n{# \n    \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (__rn) \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b (qid), \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0443 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\nselect\n    *,\n    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn\nfrom {{ ref('attr_' ~ funnel_name ~ '_create_events') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5749445, "supported_languages": null}, "macro.etlcraft.attr_create_events": {"name": "attr_create_events", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_create_events.sql", "original_file_path": "macros/attr/attr_create_events.sql", "unique_id": "macro.etlcraft.attr_create_events", "macro_sql": "{%- macro attr_create_events(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('qid', '__datetime','__link','__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u0434\u0430\u0442\u0435, \u0441\u0441\u044b\u043b\u043a\u0435 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\n{{\n    config(\n        materialized='table', \n        order_by=('qid', '__datetime','__link','__id')  \n    )\n}}\n\n{# \n    \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0448\u0430\u0433\u043e\u0432 \u0432\u043e\u0440\u043e\u043d\u043a\u0438 \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439.\n#}\n{%- set metadata = fromyaml(etlcraft.metadata()) -%}\n{%- set funnels = metadata['funnels'] -%}\n{%- set step_name_list = funnels[funnel_name].steps -%}\n{%- set steps = metadata['steps'] -%}\n\n{# \n    \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0448\u0430\u0433\u043e\u0432 \u0432\u043e\u0440\u043e\u043d\u043a\u0438.\n    \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 CASE WHEN \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 __link \u0441 \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 \u043d\u0430 \u0448\u0430\u0433\u0438 \u0432\u043e\u0440\u043e\u043d\u043a\u0438.\n    \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0448\u0430\u0433\u0430 \u0432\u043e\u0440\u043e\u043d\u043a\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0448\u0430\u0433\u043e\u0432 \u0432 \u0432\u043e\u0440\u043e\u043d\u043a\u0435.\n    \u0415\u0441\u043b\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u043c\u0443 \u0448\u0430\u0433\u0443 \u0432\u043e\u0440\u043e\u043d\u043a\u0438, \u0435\u043c\u0443 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 0.\n    \u041a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u043e\u0431\u044b\u0442\u0438\u044e \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b (qid), \u0434\u0430\u0442\u0430, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0441\u044b\u043b\u043a\u0438 (__link), \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 (__id) \u0438 \u0448\u0430\u0433 \u0432\u043e\u0440\u043e\u043d\u043a\u0438 (__step).\n#}\nselect\n    qid, \n    __link,\n    CASE\n    {% for step_name in step_name_list %}\n        {%- set counter = loop.index -%}\n        {%- for step_info in steps[step_name] -%}\n            WHEN __link = '{{step_info.link}}' {% if 'condition' in step_info %} and {{step_info.condition}} {% endif %} THEN  {{ counter }}\n        {% endfor %}\n    {% endfor %}\n    ELSE 0\n    END as __priority, \n    __id,\n    __datetime,\n    toLowCardinality(\n    CASE\n    {% for step_name in step_name_list %}\n        {%- for step_info in steps[step_name] -%}\n            WHEN __link = '{{step_info.link}}' THEN '{{step_name}}'\n        {% endfor %}\n    {% endfor %}\n    END) as __step\n from {{ ref('attr_' ~funnel_name~ '_prepare_with_qid') }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.metadata"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5772188, "supported_languages": null}, "macro.etlcraft.attr_prepare_with_qid": {"name": "attr_prepare_with_qid", "resource_type": "macro", "package_name": "etlcraft", "path": "macros/attr/attr_prepare_with_qid.sql", "original_file_path": "macros/attr/attr_prepare_with_qid.sql", "unique_id": "macro.etlcraft.attr_prepare_with_qid", "macro_sql": "{%- macro attr_prepare_with_qid(\n  params = none,\n  override_target_metadata=none,\n  funnel_name=none\n  ) -%}\n\n{# \n    \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n    order_by=('qid', '__datetime','__link','__id') \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u0434\u0430\u0442\u0435, \u0441\u0441\u044b\u043b\u043a\u0435 \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443.\n#}\n{{\n    config(\n        materialized='table',  \n        order_by=('qid', '__datetime','__link','__id')  \n    )\n}}\n\n{# \n    \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b hash_events \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0433\u0440\u0443\u043f\u043f\u044b \u0438\u0437 \u0440\u0430\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b graph_qid.\n#}\nselect\n    y.qid, x.*\nfrom {{ ref('hash_events') }} as x\nleft join {{ ref('graph_qid') }} as y\n    using (__datetime,__link, __id)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.578043, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_view_as": {"name": "clickhouse__create_view_as", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_view_as", "macro_sql": "{% macro clickhouse__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation.include(database=False) }} {{ on_cluster_clause()}}\n  as (\n    {{ sql }}\n  )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5839717, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__list_schemas": {"name": "clickhouse__list_schemas", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__list_schemas", "macro_sql": "{% macro clickhouse__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select name from system.databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.584436, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_schema": {"name": "clickhouse__create_schema", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_schema", "macro_sql": "{% macro clickhouse__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create database if not exists {{ relation.without_identifier().include(database=False) }}\n        {{ on_cluster_clause()}}\n        {{ adapter.clickhouse_db_engine_clause() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5848913, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_schema": {"name": "clickhouse__drop_schema", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_schema", "macro_sql": "{% macro clickhouse__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop database if exists {{ relation.without_identifier().include(database=False) }} {{ on_cluster_clause()}}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5853958, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__list_relations_without_caching": {"name": "clickhouse__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__list_relations_without_caching", "macro_sql": "{% macro clickhouse__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      t.name as name,\n      t.database as schema,\n      if(engine not in ('MaterializedView', 'View'), 'table', 'view') as type,\n      db.engine as db_engine\n    from system.tables as t JOIN system.databases as db on t.database = db.name\n    where schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.585836, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_columns_in_relation": {"name": "clickhouse__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_columns_in_relation", "macro_sql": "{% macro clickhouse__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns', fetch_result=True) %}\n    select name, type from system.columns where table = '{{ relation.identifier }}'\n    {% if relation.schema %}\n      and database = '{{ relation.schema }}'\n    {% endif %}\n    order by position\n  {% endcall %}\n  {{ return(sql_convert_columns_in_relation(load_result('get_columns').table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5864046, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_relation": {"name": "clickhouse__drop_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_relation", "macro_sql": "{% macro clickhouse__drop_relation(relation, obj_type='table') -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ obj_type }} if exists {{ relation }} {{ on_cluster_clause()}}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5867994, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__rename_relation": {"name": "clickhouse__rename_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__rename_relation", "macro_sql": "{% macro clickhouse__rename_relation(from_relation, to_relation, obj_type='table') -%}\n  {% call statement('drop_relation') %}\n    drop {{ obj_type }} if exists {{ to_relation }} {{ on_cluster_clause()}}\n  {% endcall %}\n  {% call statement('rename_relation') %}\n    rename {{ obj_type }} {{ from_relation }} to {{ to_relation }} {{ on_cluster_clause()}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5874481, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__truncate_relation": {"name": "clickhouse__truncate_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__truncate_relation", "macro_sql": "{% macro clickhouse__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }} {{ on_cluster_clause()}}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5877619, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__make_temp_relation": {"name": "clickhouse__make_temp_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__make_temp_relation", "macro_sql": "{% macro clickhouse__make_temp_relation(base_relation, suffix) %}\n  {% set tmp_identifier = base_relation.identifier ~ suffix %}\n  {% set tmp_relation = base_relation.incorporate(\n                              path={\"identifier\": tmp_identifier, \"schema\": None}) -%}\n  {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5882583, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__generate_database_name": {"name": "clickhouse__generate_database_name", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__generate_database_name", "macro_sql": "{% macro clickhouse__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5885236, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_columns_in_query": {"name": "clickhouse__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_columns_in_query", "macro_sql": "{% macro clickhouse__get_columns_in_query(select_sql) %}\n  {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    limit 0\n  {% endcall %}\n\n  {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.589029, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__alter_column_type": {"name": "clickhouse__alter_column_type", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__alter_column_type", "macro_sql": "{% macro clickhouse__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} {{ on_cluster_clause()}} modify column {{ adapter.quote(column_name) }} {{ new_column_type }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.589476, "supported_languages": null}, "macro.dbt_clickhouse.exchange_tables_atomic": {"name": "exchange_tables_atomic", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.exchange_tables_atomic", "macro_sql": "{% macro exchange_tables_atomic(old_relation, target_relation, obj_types='TABLES') %}\n\n  {%- if adapter.get_clickhouse_cluster_name() is not none and obj_types == 'TABLES' and 'Replicated' in engine_clause() %}\n    {% do run_query(\"SYSTEM SYNC REPLICA \" + on_cluster_clause() + target_relation.schema + '.' + target_relation.identifier) %}\n  {%- endif %}\n  \n  {%- call statement('exchange_tables_atomic') -%}\n    EXCHANGE {{ obj_types }} {{ old_relation }} AND {{ target_relation }} {{ on_cluster_clause()}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.engine_clause", "macro.dbt.run_query", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.590298, "supported_languages": null}, "macro.dbt_clickhouse.one_alter_relation": {"name": "one_alter_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.one_alter_relation", "macro_sql": "{% macro one_alter_relation(relation, alter_comments) %}\n  alter table {{ relation }} {{ on_cluster_clause() }} {{ alter_comments }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5918634, "supported_languages": null}, "macro.dbt_clickhouse.one_alter_column_comment": {"name": "one_alter_column_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.one_alter_column_comment", "macro_sql": "{% macro one_alter_column_comment(relation, column_name, comment) %}\n  alter table {{ relation }} {{ on_cluster_clause() }} comment column {{ column_name }} '{{ comment }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5921764, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__alter_relation_comment": {"name": "clickhouse__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__alter_relation_comment", "macro_sql": "{% macro clickhouse__alter_relation_comment(relation, comment) %}\n  alter table {{ relation }} {{ on_cluster_clause() }} modify comment '{{ comment }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5924318, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__persist_docs": {"name": "clickhouse__persist_docs", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__persist_docs", "macro_sql": "{% macro clickhouse__persist_docs(relation, model, for_relation, for_columns) %}\n  {%- set alter_comments = [] %}\n\n  {%- if for_relation and config.persist_relation_docs() and model.description -%}\n    {% set escaped_comment = clickhouse_escape_comment(model.description) %}\n    {% do alter_comments.append(\"modify comment {comment}\".format(comment=escaped_comment)) %}\n  {%- endif -%}\n\n  {%- if for_columns and config.persist_column_docs() and model.columns -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% for column_name in model.columns if (column_name in existing_columns) %}\n      {%- set comment = model.columns[column_name]['description'] -%}\n      {%- if comment %}\n        {% set escaped_comment = clickhouse_escape_comment(comment) %}\n        {% do alter_comments.append(\"comment column {column_name} {comment}\".format(column_name=column_name, comment=escaped_comment)) %}\n      {%- endif %}\n    {%- endfor -%}\n  {%- endif -%}\n\n  {%- if alter_comments | length > 0 -%}\n    {% do run_query(one_alter_relation(relation, alter_comments|join(', '))) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse_escape_comment", "macro.dbt.run_query", "macro.dbt_clickhouse.one_alter_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5941799, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_escape_comment": {"name": "clickhouse_escape_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_escape_comment", "macro_sql": "{% macro clickhouse_escape_comment(comment) -%}\n  {% if adapter.is_before_version('21.9.2.17') %}\n    {% do exceptions.raise_compiler_error('Unsupported ClickHouse version for using heredoc syntax') %}\n  {% endif %}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5951543, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_catalog": {"name": "clickhouse__get_catalog", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_catalog", "macro_sql": "{% macro clickhouse__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n      null as table_database,\n      columns.database as table_schema,\n      columns.table as table_name,\n      if(tables.engine not in ('MaterializedView', 'View'), 'table', 'view') as table_type,\n      nullIf(tables.comment, '') as table_comment,\n      columns.name as column_name,\n      columns.position as column_index,\n      columns.type as column_type,\n      nullIf(columns.comment, '') as column_comment,\n      null as table_owner\n    from system.columns as columns\n    join system.tables as tables on tables.database = columns.database and tables.name = columns.table\n    where database != 'system' and\n    (\n    {%- for schema in schemas -%}\n      columns.database = '{{ schema }}'\n      {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    )\n    order by columns.database, columns.table, columns.position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5960724, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__current_timestamp": {"name": "clickhouse__current_timestamp", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__current_timestamp", "macro_sql": "{% macro clickhouse__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5962954, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_string_as_time": {"name": "clickhouse__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_string_as_time", "macro_sql": "{% macro clickhouse__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"toDateTime('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5965934, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__any_value": {"name": "clickhouse__any_value", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__any_value", "macro_sql": "{% macro clickhouse__any_value(expression) -%}\n    any({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5978577, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__bool_or": {"name": "clickhouse__bool_or", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__bool_or", "macro_sql": "{% macro clickhouse__bool_or(expression) -%}\n    any({{ expression }}) > 0\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5980523, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__cast_bool_to_text": {"name": "clickhouse__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__cast_bool_to_text", "macro_sql": "{% macro clickhouse__cast_bool_to_text(field) %}\n    multiIf({{ field }} > 0, 'true', {{ field }} = 0, 'false', NULL)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5982504, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__hash": {"name": "clickhouse__hash", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__hash", "macro_sql": "{% macro clickhouse__hash(field) -%}\n    lower(hex(MD5(toString({{ field }} ))))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.598402, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__last_day": {"name": "clickhouse__last_day", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__last_day", "macro_sql": "\n\n\n{%- macro clickhouse__last_day(date, datepart) -%}\n    {{ dbt.dateadd('day', '-1', dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date)))}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.598787, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__split_part": {"name": "clickhouse__split_part", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__split_part", "macro_sql": "{% macro clickhouse__split_part(string_text, delimiter_text, part_number) %}\n    splitByChar('{{delimiter_text}}', {{ string_text }})[{{ part_number }}]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5990784, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__replace": {"name": "clickhouse__replace", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__replace", "macro_sql": "{% macro clickhouse__replace(field, old_chars, new_chars) %}\n   replaceAll({{ field }},'{{ old_chars }}','{{ new_chars }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5993245, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__listagg": {"name": "clickhouse__listagg", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__listagg", "macro_sql": "{% macro clickhouse__listagg(measure, delimiter_text, order_by_clause, limit_num) %}\n  {{ exceptions.raise_compiler_error(\n    'ClickHouse does not support the listagg function.  See the groupArray function instead')\n    }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.5995936, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_construct": {"name": "clickhouse__array_construct", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_construct", "macro_sql": "{% macro clickhouse__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    emptyArray{{data_type}}()\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.600014, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_append": {"name": "clickhouse__array_append", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_append", "macro_sql": "{% macro clickhouse__array_append(array, new_element) -%}\n    arrayPushBack({{ array }}, {{ new_element }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6002445, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_concat": {"name": "clickhouse__array_concat", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_concat", "macro_sql": "{% macro clickhouse__array_concat(array_1, array_2) -%}\n   arrayConcat({{ array_1 }}, {{ array_2 }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6004355, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__load_csv_rows": {"name": "clickhouse__load_csv_rows", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__load_csv_rows", "macro_sql": "{% macro clickhouse__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set data_sql = adapter.get_csv_data(agate_table) %}\n\n  {% set sql -%}\n    insert into {{ this.render() }} ({{ cols_sql }})\n    {{ adapter.get_model_settings(model) }}\n    format CSV\n    {{ data_sql }}\n  {%- endset %}\n\n  {% do adapter.add_query(sql, bindings=agate_table, abridge_sql_log=True) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6021373, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_csv_table": {"name": "clickhouse__create_csv_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_csv_table", "macro_sql": "{% macro clickhouse__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} {{ on_cluster_clause() }} (\n      {%- for col_name in agate_table.column_names -%}\n        {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n        {%- set type = column_override.get(col_name, inferred_type) -%}\n        {%- set column_name = (col_name | string) -%}\n          {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n      {%- endfor -%}\n    )\n    {{ engine_clause() }}\n    {{ order_cols(label='order by') }}\n    {{ partition_cols(label='partition by') }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.partition_cols", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6039116, "supported_languages": null}, "macro.dbt_clickhouse.materialization_distributed_incremental_clickhouse": {"name": "materialization_distributed_incremental_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_incremental.sql", "original_file_path": "macros/materializations/distributed_incremental.sql", "unique_id": "macro.dbt_clickhouse.materialization_distributed_incremental_clickhouse", "macro_sql": "{% materialization distributed_incremental, adapter='clickhouse' %}\n  {% set insert_distributed_sync = run_query(\"SELECT value FROM system.settings WHERE name = 'insert_distributed_sync'\")[0][0] %}\n  {% if insert_distributed_sync != '1' %}\n     {% do exceptions.raise_compiler_error('To use distributed materialization setting insert_distributed_sync should be set to 1') %}\n  {% endif %}\n\n  {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {% set existing_relation_local = existing_relation.incorporate(path={\"identifier\": model['name'] + local_suffix}) if existing_relation is not none else none %}\n  {% set target_relation_local = target_relation.incorporate(path={\"identifier\": model['name'] + local_suffix}) if target_relation is not none else none %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {% if unique_key is not none and unique_key|length == 0 %}\n    {% set unique_key = none %}\n  {% endif %}\n  {% if unique_key is iterable and (unique_key is not string and unique_key is not mapping) %}\n     {% set unique_key = unique_key|join(', ') %}\n  {% endif %}\n  {%- set inserts_only = config.get('inserts_only') -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {%- set intermediate_relation = make_intermediate_relation(target_relation_local)-%}\n  {%- set distributed_intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation_local, backup_relation_type) -%}\n  {%- set distributed_backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  {%- set view_relation = default__make_temp_relation(target_relation, '__dbt_view_tmp') -%}\n\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n  {{ drop_relation_if_exists(view_relation) }}\n  {{ drop_relation_if_exists(distributed_intermediate_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  {% set to_drop = [] %}\n  {% set schema_changes = none %}\n\n  {% call statement('main') %}\n    {{ create_view_as(view_relation, sql) }}\n  {% endcall %}\n\n  {% if existing_relation is none %}\n    -- No existing table, simply create a new one\n    {{ create_distributed_local_table(target_relation, target_relation_local, view_relation, sql) }}\n\n  {% elif full_refresh_mode %}\n    -- Completely replacing the old table, so create a temporary table and then swap it\n    {{ create_distributed_local_table(distributed_intermediate_relation, intermediate_relation, view_relation, sql) }}\n    {% do adapter.drop_relation(distributed_intermediate_relation) or '' %}\n    {% set need_swap = true %}\n\n  {% elif inserts_only or unique_key is none -%}\n    -- There are no updates/deletes or duplicate keys are allowed.  Simply add all of the new rows to the existing\n    -- table. It is the user's responsibility to avoid duplicates.  Note that \"inserts_only\" is a ClickHouse adapter\n    -- specific configurable that is used to avoid creating an expensive intermediate table.\n    {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n    {% endcall %}\n\n  {% else %}\n    {% set incremental_strategy = adapter.calculate_incremental_strategy(config.get('incremental_strategy'))  %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% if on_schema_change != 'ignore' %}\n      {%- set schema_changes = check_for_schema_changes(existing_relation, target_relation) -%}\n      {% if schema_changes['schema_changed'] and incremental_strategy in ('append', 'delete_insert') %}\n        {% set incremental_strategy = 'legacy' %}\n        {% do log('Schema changes detected, switching to legacy incremental strategy') %}\n      {% endif %}\n    {% endif %}\n    {% if incremental_strategy != 'delete_insert' and incremental_predicates %}\n      {% do exceptions.raise_compiler_error('Cannot apply incremental predicates with ' + incremental_strategy + ' strategy.') %}\n    {% endif %}\n    {% if incremental_strategy == 'legacy' %}\n      {% do clickhouse__incremental_legacy(existing_relation, intermediate_relation, schema_changes, unique_key, True) %}\n      {% set need_swap = true %}\n    {% elif incremental_strategy == 'delete_insert' %}\n      {% do clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates, True) %}\n    {% elif incremental_strategy == 'append' %}\n      {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% if False %}\n        {% do adapter.rename_relation(intermediate_relation, backup_relation) %}\n        {% do exchange_tables_atomic(backup_relation, target_relation_local) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation_local, backup_relation) %}\n        {% do adapter.rename_relation(intermediate_relation, target_relation_local) %}\n      {% endif %}\n\n      -- Structure could have changed, need to update distributed table from replaced local table\n      {% set target_relation_new = target_relation.incorporate(path={\"identifier\": model['name'] + '_temp'}) %}\n      {{ drop_relation_if_exists(target_relation_new) }}\n      {% do run_query(create_distributed_table(target_relation_new, target_relation_local)) %}\n\n      {% if False %}\n        {% do adapter.rename_relation(target_relation_new, distributed_backup_relation) %}\n        {% do exchange_tables_atomic(distributed_backup_relation, target_relation) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation, distributed_backup_relation) %}\n        {% do adapter.rename_relation(target_relation_new, target_relation) %}\n      {% endif %}\n\n      {% do to_drop.append(backup_relation) %}\n      {% do to_drop.append(distributed_backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.load_cached_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.default__make_temp_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt.check_for_schema_changes", "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6221545, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments": {"name": "clickhouse__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments", "macro_sql": "{% macro clickhouse__snapshot_hash_arguments(args) -%}\n  halfMD5({%- for arg in args -%}\n    coalesce(cast({{ arg }} as varchar ), '')\n    {% if not loop.last %} || '|' || {% endif %}\n  {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6256776, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__post_snapshot": {"name": "clickhouse__post_snapshot", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__post_snapshot", "macro_sql": "{% macro clickhouse__post_snapshot(staging_relation) %}\n    {{ drop_relation_if_exists(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6258736, "supported_languages": null}, "macro.dbt_clickhouse.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.626573, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_merge_sql": {"name": "clickhouse__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_merge_sql", "macro_sql": "{% macro clickhouse__snapshot_merge_sql(target, source, insert_cols) -%}\n  {%- set insert_cols_csv = insert_cols | join(', ') -%}\n  {%- set valid_to_col = adapter.quote('dbt_valid_to') -%}\n\n  {%- set upsert = target ~ '__snapshot_upsert' -%}\n  {% call statement('create_upsert_relation') %}\n    create table if not exists {{ upsert }} as {{ target }}\n  {% endcall %}\n\n  {% call statement('insert_unchanged_data') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n      {{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ target }}\n    where dbt_scd_id not in (\n      select {{ source }}.dbt_scd_id from {{ source }} \n    )\n  {% endcall %}\n\n {% call statement('insert_updated_and_deleted') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    with updates_and_deletes as (\n      select\n        dbt_scd_id,\n        dbt_valid_to\n      from {{ source }}\n      where dbt_change_type IN ('update', 'delete')\n    )\n    select {% for column in insert_cols %}\n      {%- if column == valid_to_col -%}\n        updates_and_deletes.dbt_valid_to as dbt_valid_to\n      {%- else -%}\n        target.{{ column }} as {{ column }}\n      {%- endif %} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ target }} target\n    join updates_and_deletes on target.dbt_scd_id = updates_and_deletes.dbt_scd_id;\n  {% endcall %}\n\n  {% call statement('insert_new') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n      {{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }}\n    where {{ source }}.dbt_change_type IN ('insert');\n  {% endcall %}\n\n  {% if target.can_exchange %}\n    {% do exchange_tables_atomic(upsert, target) %}\n    {% call statement('drop_exchanged_relation') %}\n      drop table if exists {{ upsert }};\n    {% endcall %}\n  {% else %}\n    {% call statement('drop_target_relation') %}\n      drop table if exists {{ target }};\n    {% endcall %}\n    {% call statement('rename_upsert_relation') %}\n      rename table {{ upsert }} to {{ target }};\n    {% endcall %}\n  {% endif %}\n\n  {% do return ('select 1') %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.exchange_tables_atomic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6293428, "supported_languages": null}, "macro.dbt_clickhouse.materialization_incremental_clickhouse": {"name": "materialization_incremental_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_clickhouse.materialization_incremental_clickhouse", "macro_sql": "{% materialization incremental, adapter='clickhouse' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {% if unique_key is not none and unique_key|length == 0 %}\n    {% set unique_key = none %}\n  {% endif %}\n  {% if unique_key is iterable and (unique_key is not string and unique_key is not mapping) %}\n     {% set unique_key = unique_key|join(', ') %}\n  {% endif %}\n  {%- set inserts_only = config.get('inserts_only') -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    -- No existing table, simply create a new one\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, target_relation, sql) }}\n    {% endcall %}\n\n  {% elif full_refresh_mode %}\n    -- Completely replacing the old table, so create a temporary table and then swap it\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n    {% endcall %}\n    {% set need_swap = true %}\n\n  {% elif inserts_only or unique_key is none -%}\n    -- There are no updates/deletes or duplicate keys are allowed.  Simply add all of the new rows to the existing\n    -- table. It is the user's responsibility to avoid duplicates.  Note that \"inserts_only\" is a ClickHouse adapter\n    -- specific configurable that is used to avoid creating an expensive intermediate table.\n    {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n    {% endcall %}\n\n  {% else %}\n    {% set schema_changes = none %}\n    {% set incremental_strategy = adapter.calculate_incremental_strategy(config.get('incremental_strategy'))  %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% if on_schema_change != 'ignore' %}\n      {%- set schema_changes = check_for_schema_changes(existing_relation, target_relation) -%}\n      {% if schema_changes['schema_changed'] and incremental_strategy in ('append', 'delete_insert') %}\n        {% set incremental_strategy = 'legacy' %}\n        {% do log('Schema changes detected, switching to legacy incremental strategy') %}\n      {% endif %}\n    {% endif %}\n    {% if incremental_strategy != 'delete_insert' and incremental_predicates %}\n      {% do exceptions.raise_compiler_error('Cannot apply incremental predicates with ' + incremental_strategy + ' strategy.') %}\n    {% endif %}\n    {% if incremental_strategy == 'legacy' %}\n      {% do clickhouse__incremental_legacy(existing_relation, intermediate_relation, schema_changes, unique_key) %}\n      {% set need_swap = true %}\n    {% elif incremental_strategy == 'delete_insert' %}\n      {% do clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates) %}\n    {% elif incremental_strategy == 'append' %}\n      {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% if existing_relation.can_exchange %}\n        {% do adapter.rename_relation(intermediate_relation, backup_relation) %}\n        {% do exchange_tables_atomic(backup_relation, target_relation) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation, backup_relation) %}\n        {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% endif %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt.check_for_schema_changes", "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6584947, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_clickhouse.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {%- set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) -%}\n    {% if not schema_changes_dict['schema_changed'] %}\n      {{ return }}\n    {% endif %}\n\n    {% if on_schema_change == 'fail' %}\n      {% set fail_msg %}\n          The source and target schemas on this incremental model are out of sync!\n          They can be reconciled in several ways:\n            - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n            - Re-run the incremental model with `full_refresh: True` to update the target schema.\n            - update the schema manually and re-run the process.\n      {% endset %}\n      {% do exceptions.raise_compiler_error(fail_msg) %}\n      {{ return }}\n    {% endif %}\n\n    {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6594818, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__incremental_legacy": {"name": "clickhouse__incremental_legacy", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro_sql": "{% macro clickhouse__incremental_legacy(existing_relation, intermediate_relation, on_schema_change, unique_key, is_distributed=False) %}\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": model['name'] + '__dbt_new_data'}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n\n    {%- set inserted_relation = intermediate_relation -%}\n    {%- set inserting_relation = new_data_relation -%}\n\n    -- First create a temporary table for all of the new data\n    {% if is_distributed %}\n      -- Need to use distributed table to have data on all shards\n      {%- set distributed_new_data_relation = existing_relation.incorporate(path={\"identifier\": model['name'] + '__dbt_distributed_new_data'}) -%}\n      {%- set inserting_relation = distributed_new_data_relation -%}\n      {{ create_distributed_local_table(distributed_new_data_relation, new_data_relation, existing_relation, sql) }}\n    {% else %}\n      {% call statement('create_new_data_temp') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n\n    -- Next create another temporary table that will eventually be used to replace the existing table.  We can't\n    -- use the table just created in the previous step because we don't want to override any updated rows with\n    -- old rows when we insert the old data\n    {% if is_distributed %}\n      {%- set distributed_intermediate_relation = make_intermediate_relation(existing_relation) -%}\n      {%- set inserted_relation = distributed_intermediate_relation -%}\n      {{ create_distributed_local_table(distributed_intermediate_relation, intermediate_relation, existing_relation) }}\n    {% else %}\n      {% call statement('main') %}\n          create table {{ intermediate_relation }} as {{ new_data_relation }} {{ on_cluster_clause() }}\n      {% endcall %}\n    {% endif %}\n\n    -- Insert all the existing rows into the new temporary table, ignoring any rows that have keys in the \"new data\"\n    -- table.\n    {%- set dest_columns = adapter.get_columns_in_relation(existing_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% call statement('insert_existing_data') %}\n        insert into {{ inserted_relation }} ({{ dest_cols_csv }})\n        select {{ dest_cols_csv }}\n        from {{ existing_relation }}\n          where ({{ unique_key }}) not in (\n            select {{ unique_key }}\n            from {{ inserting_relation }}\n          )\n       {{ adapter.get_model_settings(model) }}\n    {% endcall %}\n\n    -- Insert all of the new data into the temporary table\n    {% call statement('insert_new_data') %}\n     insert into {{ inserted_relation }} ({{ dest_cols_csv }})\n        select {{ dest_cols_csv }}\n        from {{ inserting_relation }}\n      {{ adapter.get_model_settings(model) }}\n    {% endcall %}\n\n    {% do adapter.drop_relation(new_data_relation) %}\n    {% if is_distributed %}\n      {{ drop_relation_if_exists(distributed_new_data_relation) }}\n      {{ drop_relation_if_exists(distributed_intermediate_relation) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.make_intermediate_relation", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6628194, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__incremental_delete_insert": {"name": "clickhouse__incremental_delete_insert", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro_sql": "{% macro clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates, is_distributed=False) %}\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": model['name']\n       + '__dbt_new_data_' + invocation_id.replace('-', '_')}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n    {%- set distributed_new_data_relation = existing_relation.incorporate(path={\"identifier\": model['name'] + '__dbt_distributed_new_data'}) -%}\n\n    {%- set inserting_relation = new_data_relation -%}\n\n    {% if is_distributed %}\n      -- Need to use distributed table to have data on all shards\n      {%- set inserting_relation = distributed_new_data_relation -%}\n      {{ create_distributed_local_table(distributed_new_data_relation, new_data_relation, existing_relation, sql) }}\n    {% else %}\n      {% call statement('main') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n\n    {% call statement('delete_existing_data') %}\n      delete from {{ existing_relation }} where ({{ unique_key }}) in (select {{ unique_key }}\n                                          from {{ inserting_relation }})\n      {%- if incremental_predicates %}\n        {% for predicate in incremental_predicates %}\n            and {{ predicate }}\n        {% endfor %}\n      {%- endif -%};\n    {% endcall %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(existing_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% call statement('insert_new_data') %}\n        insert into {{ existing_relation }} select {{ dest_cols_csv }} from {{ inserting_relation }}\n    {% endcall %}\n    {% do adapter.drop_relation(new_data_relation) %}\n    {{ drop_relation_if_exists(distributed_new_data_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.drop_relation_if_exists", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.665354, "supported_languages": null}, "macro.dbt_clickhouse.materialization_distributed_table_clickhouse": {"name": "materialization_distributed_table_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.materialization_distributed_table_clickhouse", "macro_sql": "{% materialization distributed_table, adapter='clickhouse' %}\n  {% set insert_distributed_sync = run_query(\"SELECT value FROM system.settings WHERE name = 'insert_distributed_sync'\")[0][0] %}\n  {% if insert_distributed_sync != '1' %}\n     {% do exceptions.raise_compiler_error('To use distributed materialization setting insert_distributed_sync should be set to 1') %}\n  {% endif %}\n\n  {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {% set existing_relation_local = existing_relation.incorporate(path={\"identifier\": model['name'] + local_suffix}) if existing_relation is not none else none %}\n  {% set target_relation_local = target_relation.incorporate(path={\"identifier\": model['name'] + local_suffix}) if target_relation is not none else none %}\n\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation_local is not none %}\n    {%- set backup_relation_type = existing_relation_local.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation_local, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation_local) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n  {% set view_relation = default__make_temp_relation(target_relation, '__dbt_tmp') %}\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n  {{ drop_relation_if_exists(view_relation) }}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {% call statement('main') %}\n    {{ create_view_as(view_relation, sql) }}\n  {% endcall %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ create_distributed_local_table(target_relation, target_relation_local, view_relation) }}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ create_empty_table_from_relation(backup_relation, view_relation) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation_local) %}\n  {% else %}\n    {% do run_query(create_empty_table_from_relation(intermediate_relation, view_relation)) or '' %}\n    {{ adapter.rename_relation(existing_relation_local, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation_local) }}\n    {{ create_distributed_table(target_relation, target_relation_local) }}\n  {% endif %}\n  {% do run_query(clickhouse__insert_into(target_relation, sql)) or '' %}\n  {{ drop_relation_if_exists(view_relation) }}\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.default__make_temp_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt_clickhouse.create_empty_table_from_relation", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6763363, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.create_distributed_table": {"name": "create_distributed_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_distributed_table", "macro_sql": "{% macro create_distributed_table(relation, local_relation) %}\n    {%- set cluster = adapter.get_clickhouse_cluster_name() -%}\n   {% if cluster is none %}\n        {% do exceptions.raise_compiler_error('Cluster name should be defined for using distributed materializations, current is None') %}\n    {% endif %}\n\n   {%- set cluster = cluster[1:-1] -%}\n   {%- set sharding = config.get('sharding_key') -%}\n\n    CREATE TABLE {{ relation }} {{ on_cluster_clause() }} AS {{ local_relation }}\n    ENGINE = Distributed('{{ cluster}}', '{{ relation.schema }}', '{{ local_relation.name }}'\n    {% if sharding is not none %}\n        , {{ sharding }}\n    {% endif %}\n    )\n {% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6774325, "supported_languages": null}, "macro.dbt_clickhouse.create_empty_table_from_relation": {"name": "create_empty_table_from_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_empty_table_from_relation", "macro_sql": "{% macro create_empty_table_from_relation(relation, source_relation) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set columns = adapter.get_columns_in_relation(source_relation) | list -%}\n\n  {%- set col_list = [] -%}\n  {% for col in columns %}\n    {{col_list.append(col.name + ' ' + col.data_type) or '' }}\n  {% endfor %}\n  {{ sql_header if sql_header is not none }}\n\n  create table {{ relation.include(database=False) }}\n  {{ on_cluster_clause() }} (\n      {{col_list | join(', ')}}\n  )\n\n  {{ engine_clause() }}\n  {{ order_cols(label=\"order by\") }}\n  {{ primary_key_clause(label=\"primary key\") }}\n  {{ partition_cols(label=\"partition by\") }}\n  {{ adapter.get_model_settings(model) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.primary_key_clause", "macro.dbt_clickhouse.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6788454, "supported_languages": null}, "macro.dbt_clickhouse.create_distributed_local_table": {"name": "create_distributed_local_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_distributed_local_table", "macro_sql": "{% macro create_distributed_local_table(distributed_relation, shard_relation, structure_relation, sql_query=none) -%}\n  {{ drop_relation_if_exists(shard_relation) }}\n  {{ drop_relation_if_exists(distributed_relation) }}\n  {% do run_query(create_empty_table_from_relation(shard_relation, structure_relation)) or '' %}\n  {% do run_query(create_distributed_table(distributed_relation, shard_relation)) or '' %}\n  {% if sql_query is not none %}\n    {% do run_query(clickhouse__insert_into(distributed_relation, sql_query)) or '' %}\n  {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_query", "macro.dbt_clickhouse.create_empty_table_from_relation", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt_clickhouse.clickhouse__insert_into"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6797247, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_s3source": {"name": "clickhouse_s3source", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/s3.sql", "original_file_path": "macros/materializations/s3.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_s3source", "macro_sql": "{% macro clickhouse_s3source(config_name='', bucket='', path='', fmt='', structure='',\n    aws_access_key_id='', aws_secret_access_key='', compression='') %}\n  {% if config_name and not config_name.lower().endswith('s3') %}\n    {{ exceptions.raise_compiler_error(\"S3 configuration should end with 's3'\") }}\n  {% endif %}\n  {% set s3config = config.get(config_name, {}) %}\n  {{ adapter.s3source_clause(\n    config_name=config_name,\n    s3_model_config=s3config,\n    bucket=bucket,\n    path=path,\n    fmt=fmt,\n    structure=structure,\n    aws_access_key_id=aws_access_key_id,\n    aws_secret_access_key=aws_secret_access_key,\n    compression=compression) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6810448, "supported_languages": null}, "macro.dbt_clickhouse.materialization_table_clickhouse": {"name": "materialization_table_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.materialization_table_clickhouse", "macro_sql": "{% materialization table, adapter='clickhouse' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new relation ' + target_relation.name )}}\n    -- There is not existing relation, so we can just create\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, target_relation, sql) }}\n    {%- endcall %}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, backup_relation, sql) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n  {% else %}\n    -- We have to use an intermediate and rename accordingly\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n    {%- endcall %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6901624, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.engine_clause": {"name": "engine_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.engine_clause", "macro_sql": "{% macro engine_clause() %}\n  engine = {{ config.get('engine', default='MergeTree()') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6904433, "supported_languages": null}, "macro.dbt_clickhouse.partition_cols": {"name": "partition_cols", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.partition_cols", "macro_sql": "{% macro partition_cols(label) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.691248, "supported_languages": null}, "macro.dbt_clickhouse.primary_key_clause": {"name": "primary_key_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.primary_key_clause", "macro_sql": "{% macro primary_key_clause(label) %}\n  {%- set primary_key = config.get('primary_key', validator=validation.any[basestring]) -%}\n\n  {%- if primary_key is not none %}\n    {{ label }} {{ primary_key }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6917005, "supported_languages": null}, "macro.dbt_clickhouse.order_cols": {"name": "order_cols", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.order_cols", "macro_sql": "{% macro order_cols(label) %}\n  {%- set cols = config.get('order_by', validator=validation.any[list, basestring]) -%}\n  {%- set engine = config.get('engine', default='MergeTree()') -%}\n  {%- set supported = [\n    'HDFS',\n    'MaterializedPostgreSQL',\n    'S3',\n    'EmbeddedRocksDB',\n    'Hive'\n  ] -%}\n\n  {%- if 'MergeTree' in engine or engine in supported %}\n    {%- if cols is not none %}\n      {%- if cols is string -%}\n        {%- set cols = [cols] -%}\n      {%- endif -%}\n      {{ label }} (\n      {%- for item in cols -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n    {%- else %}\n      {{ label }} (tuple())\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6930625, "supported_languages": null}, "macro.dbt_clickhouse.on_cluster_clause": {"name": "on_cluster_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.on_cluster_clause", "macro_sql": "{% macro on_cluster_clause(label) %}\n  {% set active_cluster = adapter.get_clickhouse_cluster_name() %}\n  {%- if active_cluster is not none %}\n    {# Add trailing whitespace to avoid problems when this clause is not last #}\n    ON CLUSTER {{ active_cluster + ' ' }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6935563, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_table_as": {"name": "clickhouse__create_table_as", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_table_as", "macro_sql": "{% macro clickhouse__create_table_as(temporary, relation, sql) -%}\n    {% set create_table = create_table_or_empty(temporary, relation, sql) %}\n    {% if adapter.is_before_version('22.7.1.2484') -%}\n        {{ create_table }}\n    {%- else %}\n        {% call statement('create_table_empty') %}\n            {{ create_table }}\n        {% endcall %}\n        {{ clickhouse__insert_into(relation.include(database=False), sql) }}\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.create_table_or_empty", "macro.dbt.statement", "macro.dbt_clickhouse.clickhouse__insert_into"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6942906, "supported_languages": null}, "macro.dbt_clickhouse.create_table_or_empty": {"name": "create_table_or_empty", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.create_table_or_empty", "macro_sql": "{% macro create_table_or_empty(temporary, relation, sql) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    {% if temporary -%}\n        create temporary table {{ relation.name }}\n        engine Memory\n        {{ order_cols(label=\"order by\") }}\n        {{ partition_cols(label=\"partition by\") }}\n        {{ adapter.get_model_settings(model) }}\n    {%- else %}\n        create table {{ relation.include(database=False) }}\n        {{ on_cluster_clause()}}\n        {{ engine_clause() }}\n        {{ order_cols(label=\"order by\") }}\n        {{ primary_key_clause(label=\"primary key\") }}\n        {{ partition_cols(label=\"partition by\") }}\n        {{ adapter.get_model_settings(model) }}\n        {% if not adapter.is_before_version('22.7.1.2484') -%}\n            empty\n        {%- endif %}\n    {%- endif %}\n    as (\n        {{ sql }}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.partition_cols", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.primary_key_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6956227, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__insert_into": {"name": "clickhouse__insert_into", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__insert_into", "macro_sql": "{% macro clickhouse__insert_into(target_relation, sql) %}\n  {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n  insert into {{ target_relation }} ({{ dest_cols_csv }})\n  {{ sql }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.6961253, "supported_languages": null}, "macro.dbt_clickhouse.materialization_view_clickhouse": {"name": "materialization_view_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_clickhouse.materialization_view_clickhouse", "macro_sql": "{%- materialization view, adapter='clickhouse' -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new relation ' + target_relation.name )}}\n    -- There is not existing relation, so we can just create\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(target_relation, sql) }}\n    {%- endcall %}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(backup_relation, sql) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n  {% else %}\n    -- We have to use an intermediate and rename accordingly\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(intermediate_relation, sql) }}\n    {%- endcall %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7012346, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__get_or_create_relation": {"name": "clickhouse__get_or_create_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_or_create_relation", "macro_sql": "{% macro clickhouse__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set can_exchange = adapter.can_exchange(schema, type) %}\n  {%- set new_relation = api.Relation.create(\n      database=None,\n      schema=schema,\n      identifier=identifier,\n      type=type,\n      can_exchange=can_exchange\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7026439, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_database": {"name": "clickhouse__get_database", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_database", "macro_sql": "{% macro clickhouse__get_database(database) %}\n    {% call statement('get_database', fetch_result=True) %}\n        select name, engine, comment\n        from system.databases\n        where name = '{{ database }}'\n   {% endcall %}\n   {% do return(load_result('get_database').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7031043, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_show_grant_sql": {"name": "clickhouse__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_show_grant_sql", "macro_sql": "{% macro clickhouse__get_show_grant_sql(relation) %}\n    SELECT access_type as privilege_type, COALESCE(user_name, role_name) as grantee FROM system.grants WHERE table = '{{ relation.name }}'\n    AND database = '{{ relation.schema }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.703741, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__call_dcl_statements": {"name": "clickhouse__call_dcl_statements", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__call_dcl_statements", "macro_sql": "{% macro clickhouse__call_dcl_statements(dcl_statement_list) %}\n    {% for dcl_statement in dcl_statement_list %}\n      {% call statement('dcl') %}\n        {{ dcl_statement }};\n      {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7041044, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_grant_sql": {"name": "clickhouse__get_grant_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_grant_sql", "macro_sql": "\n\n\n{%- macro clickhouse__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ on_cluster_clause()}} {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7044244, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_revoke_sql": {"name": "clickhouse__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_revoke_sql", "macro_sql": "{%- macro clickhouse__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ on_cluster_clause()}} {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.704787, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__test_relationships": {"name": "clickhouse__test_relationships", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__test_relationships", "macro_sql": "{% macro clickhouse__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\nsettings join_use_nulls = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7052748, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7058368, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.706199, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7066097, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7068408, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7071652, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7072902, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7078223, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.708254, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7085133, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7089267, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.709062, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.710376, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7108867, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7111666, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7114036, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7116482, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7119157, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7121713, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.712488, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.712814, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7130783, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7133594, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7136118, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.713925, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7141871, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.714768, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7150602, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7159104, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.716288, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7169285, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7171564, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7176678, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7178826, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.718355, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7187624, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7191613, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7194407, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7198596, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7200584, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7205045, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7207203, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7212055, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7214952, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7218888, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7221987, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7226195, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7227836, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7233691, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.723635, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7242117, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7244754, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.724907, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7250693, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7255893, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.726049, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7267714, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7270527, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7274125, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7282557, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7289073, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.729275, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7294292, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7299693, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.730465, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7310126, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.732664, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.733014, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7332692, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7334871, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.733858, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.742507, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7469876, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.747262, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.747647, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7487957, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.749053, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.749312, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7515435, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7537026, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7579434, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7584016, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7586884, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7588286, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7590532, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7592251, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.759522, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.760867, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.761228, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7616906, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7623613, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7630014, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7633986, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7664447, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.767102, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7676005, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7681053, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7687154, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.773481, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7786965, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7801058, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7804742, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7812438, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7815394, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7817388, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7819977, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7821817, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7824168, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.78259, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7833455, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7836182, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.785605, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7862334, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.786497, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7868085, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7872486, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7894819, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7931354, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7936127, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7939444, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.7996404, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8016696, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8037214, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8050656, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8123257, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8143954, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.815306, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.816403, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8167675, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8179703, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8192039, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8195574, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8198264, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8202858, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8205564, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8210118, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.82136, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8218393, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8221736, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.822407, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8228135, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8237429, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8298864, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8325734, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8330023, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.834653, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.835075, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8360517, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8397102, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.840422, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8406954, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8413644, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8420124, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8424916, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8429434, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8433192, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8441668, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8462992, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.847257, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8477123, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8499434, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8520124, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8531737, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8535562, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8541288, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8545601, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8550801, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8554463, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8561316, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8565578, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8569925, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8587463, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.859168, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8594425, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.859671, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8599613, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8603468, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8606524, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8611543, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8614306, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8616643, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8636355, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.864, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.864678, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.865003, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.865554, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8659043, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8668768, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8672717, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8685594, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8695166, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8697798, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8700733, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.870316, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.870736, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8714826, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8721359, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8723562, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8726091, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8727694, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8730214, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.873163, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.873418, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8736923, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.877403, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8780372, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.878383, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8788142, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8792593, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8797598, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8800638, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.880404, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8806648, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8809035, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8812954, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8817568, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8821337, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8829927, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8833349, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8835435, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8838623, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8844051, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8846753, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8849442, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8852167, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.887347, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8876474, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8879278, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8880973, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.888605, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8889065, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8890626, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8893964, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8896701, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8900352, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.89032, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8906841, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.891764, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8920631, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8924356, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8927734, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8946998, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.895474, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8956883, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8959217, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8965893, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8971753, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8978384, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.8994486, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.899679, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9003077, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9009182, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9018424, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9025607, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9026723, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9033883, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9037738, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9042091, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9046082, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9050424, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.905422, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9063504, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9067225, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.907005, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9076598, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9089339, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9093251, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9095857, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9102633, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9114206, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.911926, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9126613, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9131165, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.913637, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9142897, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9147518, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.91572, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9172509, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9180965, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.918846, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.919978, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9214246, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.922025, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9225976, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.923883, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.925548, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9263532, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9271138, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9279752, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.929284, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9301355, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9306717, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9316587, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9330494, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9337869, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.934304, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9379241, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9403892, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.94154, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9426644, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.943835, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9455507, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.946294, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9468923, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.947743, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.948977, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.949424, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9496346, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9506054, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9513083, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9516394, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.etlcraft.clickhouse__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9523008, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9525032, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9527, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9530435, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.953619, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9540768, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9547002, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9557257, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9564416, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9576352, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.958688, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9600937, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.960524, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9609287, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9625351, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9651535, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9665828, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9670143, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9678922, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.969177, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9727712, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9785326, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9800122, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9823983, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9840014, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9862685, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9868128, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9873405, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.988061, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.989239, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.990322, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9910252, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.991315, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9921055, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9934988, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9949615, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9955485, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9959154, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9967756, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9976742, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9980466, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9985816, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.999061, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751767.9996006, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.000184, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0012558, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0020163, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0029452, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.etlcraft.clickhouse__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0039513, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0052896, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0058746, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0066965, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0085843, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0092406, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0103543, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0111613, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0121167, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0124545, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.012759, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0130413, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0132868, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0135698, "supported_languages": null}, "macro.dbt_unittest.assert_is_none": {"name": "assert_is_none", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_is_none.sql", "original_file_path": "macros/assert_is_none.sql", "unique_id": "macro.dbt_unittest.assert_is_none", "macro_sql": "{% macro assert_is_none(value) %}\n  {% if value is none %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not none.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0141435, "supported_languages": null}, "macro.dbt_unittest.assert_list_equals": {"name": "assert_list_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_list_equals.sql", "original_file_path": "macros/assert_list_equals.sql", "unique_id": "macro.dbt_unittest.assert_list_equals", "macro_sql": "{% macro assert_list_equals(value, expected) %}\n  {% if value is not iterable %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 1st argument \" ~ value ~ \" is not iterable.\") %}\n  {% endif %}\n  {% if expected is not iterable %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 2nd argument \" ~ expected ~ \" is not iterable.\") %}\n  {% endif %}\n\n  {% set length_of_1st_arg = value | length %}\n  {% set length_of_2nd_arg = expected | length %}\n\n  {% if length_of_1st_arg != length_of_2nd_arg %}\n      {% do exceptions.raise_compiler_error(\"FAILED: lengths of the two are not equal.\") %}\n  {% endif %}\n\n  {% for i in range(length_of_1st_arg) %}\n    {% if value[i] != expected[i] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values at the index {{ i }} is not equal.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% do log(\"SUCCESS\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0159285, "supported_languages": null}, "macro.dbt_unittest.assert_not_equals": {"name": "assert_not_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_not_equals.sql", "original_file_path": "macros/assert_not_equals.sql", "unique_id": "macro.dbt_unittest.assert_not_equals", "macro_sql": "{% macro assert_not_equals(value, expected) %}\n  {% if value != expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is equal to \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0166667, "supported_languages": null}, "macro.dbt_unittest.assert_is_not_none": {"name": "assert_is_not_none", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_is_not_none.sql", "original_file_path": "macros/assert_is_not_none.sql", "unique_id": "macro.dbt_unittest.assert_is_not_none", "macro_sql": "{% macro assert_is_not_none(value) %}\n  {% if value is not none %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is none.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.017222, "supported_languages": null}, "macro.dbt_unittest.assert_dict_equals": {"name": "assert_dict_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_dict_equals.sql", "original_file_path": "macros/assert_dict_equals.sql", "unique_id": "macro.dbt_unittest.assert_dict_equals", "macro_sql": "{% macro assert_dict_equals(value, expected) %}\n  {% if value is not mapping %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 1st argument \" ~ value ~ \" is not a mapping.\") %}\n  {% endif %}\n  {% if expected is not mapping %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 2nd argument \" ~ expected ~ \" is not a mapping.\") %}\n  {% endif %}\n\n  {% for k, v in value.items() %}\n    {% if k not in expected %}\n      {% do exceptions.raise_compiler_error(\"FAILED: key \" ~ k ~ \" of 1st argument is not in \" ~ expected ~ \".\") %}\n    {% endif %}\n\n    {% if v is none and expected[k] is not none %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n\n    {% if v != expected[k] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% for k, v in expected.items() %}\n    {% if k not in value %}\n      {% do exceptions.raise_compiler_error(\"FAILED: key \" ~ k ~ \" of 2nd argument is not in \" ~ value ~ \".\") %}\n    {% endif %}\n\n    {% if v is none and value[k] is not none %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n\n    {% if v != value[k] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% do log(\"SUCCESS\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.020716, "supported_languages": null}, "macro.dbt_unittest.assert_not_in": {"name": "assert_not_in", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_not_in.sql", "original_file_path": "macros/assert_not_in.sql", "unique_id": "macro.dbt_unittest.assert_not_in", "macro_sql": "{% macro assert_not_in(value, expected) %}\n  {% if value not in expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is in \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0214484, "supported_languages": null}, "macro.dbt_unittest.assert_in": {"name": "assert_in", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_in.sql", "original_file_path": "macros/assert_in.sql", "unique_id": "macro.dbt_unittest.assert_in", "macro_sql": "{% macro assert_in(value, expected) %}\n  {% if value in expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not in \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.022071, "supported_languages": null}, "macro.dbt_unittest.assert_true": {"name": "assert_true", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_true.sql", "original_file_path": "macros/assert_true.sql", "unique_id": "macro.dbt_unittest.assert_true", "macro_sql": "{% macro assert_true(value) %}\n  {% if value is not boolean %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not boolean.\") %}\n  {% endif %}\n\n  {% if value is true %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not true.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0228581, "supported_languages": null}, "macro.dbt_unittest.assert_equals": {"name": "assert_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_equals.sql", "original_file_path": "macros/assert_equals.sql", "unique_id": "macro.dbt_unittest.assert_equals", "macro_sql": "{% macro assert_equals(value, expected) %}\n  {% if value == expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not equal to \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.023469, "supported_languages": null}, "macro.dbt_unittest.assert_false": {"name": "assert_false", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_false.sql", "original_file_path": "macros/assert_false.sql", "unique_id": "macro.dbt_unittest.assert_false", "macro_sql": "{% macro assert_false(value) %}\n  {% if value is not boolean %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not boolean.\") %}\n  {% endif %}\n\n  {% if value is false %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not false.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1712751768.0242805, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"test.etlcraft.test_normalize": [], "test.etlcraft.test_get_column_count_in_subquery": [], "test.etlcraft.test_get_min_max_date": [], "test.etlcraft.test_normalize_name": [], "test.etlcraft.test_get_from_default_dict": [], "test.etlcraft.test_json_list_keys": [], "test.etlcraft.test_find_incremental_datetime_field": [], "test.etlcraft.test_get_relations_dist": []}, "child_map": {"test.etlcraft.test_normalize": [], "test.etlcraft.test_get_column_count_in_subquery": [], "test.etlcraft.test_get_min_max_date": [], "test.etlcraft.test_normalize_name": [], "test.etlcraft.test_get_from_default_dict": [], "test.etlcraft.test_json_list_keys": [], "test.etlcraft.test_find_incremental_datetime_field": [], "test.etlcraft.test_get_relations_dist": []}}