[0m07:36:07.870692 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = '_airbyte_raw_mt_registry_default_testaccount_campaigns'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:07.871753 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:07.881740 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"
[0m07:36:07.883496 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:07.888773 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"
[0m07:36:07.889512 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns (compile): 2024-05-17 07:36:07.851290 => 2024-05-17 07:36:07.889346
[0m07:36:07.889999 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_banners (compile): 2024-05-17 07:36:07.843825 => 2024-05-17 07:36:07.889899
[0m07:36:07.890623 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m07:36:07.891310 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m07:36:07.897747 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"
[0m07:36:07.902638 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"
[0m07:36:07.903948 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */


  create view test.normalize_mt_registry_default_campaigns__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'name') AS name,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('_airbyte_raw_mt_registry_default_testaccount_campaigns') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id ,
        toString("_airbyte_data") AS _airbyte_data ,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at 
FROM test._airbyte_raw_mt_registry_default_testaccount_campaigns
)

)
  )...
[0m07:36:07.905209 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */


  create view test.normalize_mt_registry_default_banners__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'campaign_id') AS campaign_id, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'textblocks') AS textblocks, 
        JSONExtractString(_airbyte_data, 'urls') AS urls,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('_airbyte_raw_mt_registry_default_testaccount_banners') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id ,
        toString("_airbyte_data") AS _airbyte_data ,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at 
FROM test._airbyte_raw_mt_registry_default_testaccount_banners
)

)
  )...
[0m07:36:07.916220 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:07.919418 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    drop table if exists test.normalize_mt_registry_default_banners__dbt_backup 
  
  ...
[0m07:36:07.920237 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:07.924233 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    drop table if exists test.normalize_mt_registry_default_campaigns__dbt_backup 
  
  ...
[0m07:36:07.927093 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:07.928469 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    rename table test.normalize_mt_registry_default_banners to test.normalize_mt_registry_default_banners__dbt_backup 
  
  ...
[0m07:36:07.929235 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:07.932367 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    rename table test.normalize_mt_registry_default_campaigns to test.normalize_mt_registry_default_campaigns__dbt_backup 
  
  ...
[0m07:36:07.933574 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:07.937425 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    drop table if exists test.normalize_mt_registry_default_banners 
  
  ...
[0m07:36:07.940038 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:07.940684 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:07.943779 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    drop table if exists test.normalize_mt_registry_default_campaigns 
  
  ...
[0m07:36:07.946167 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    rename table test.normalize_mt_registry_default_banners__dbt_tmp to test.normalize_mt_registry_default_banners 
  
  ...
[0m07:36:07.949359 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:07.950565 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    rename table test.normalize_mt_registry_default_campaigns__dbt_tmp to test.normalize_mt_registry_default_campaigns 
  
  ...
[0m07:36:07.951997 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:07.956943 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */
drop table if exists test.normalize_mt_registry_default_banners__dbt_backup 
  ...
[0m07:36:07.957825 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:07.963501 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */
drop table if exists test.normalize_mt_registry_default_campaigns__dbt_backup 
  ...
[0m07:36:07.964799 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:07.966793 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_banners (execute): 2024-05-17 07:36:07.898315 => 2024-05-17 07:36:07.966734
[0m07:36:07.967522 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81dfa90>]}
[0m07:36:07.968064 [info ] [Thread-1 (]: 12 of 90 OK created sql view model test.normalize_mt_registry_default_banners .. [[32mOK[0m in 0.13s]
[0m07:36:07.968664 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m07:36:07.969691 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m07:36:07.971076 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:07.972970 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns (execute): 2024-05-17 07:36:07.891617 => 2024-05-17 07:36:07.972911
[0m07:36:07.970464 [info ] [Thread-1 (]: 14 of 90 START sql view model test.normalize_sheets_periodstat_default_planCosts  [RUN]
[0m07:36:07.974141 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81dc580>]}
[0m07:36:07.974944 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts'
[0m07:36:07.976066 [info ] [Thread-2 (]: 13 of 90 OK created sql view model test.normalize_mt_registry_default_campaigns  [[32mOK[0m in 0.13s]
[0m07:36:07.976712 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts)
[0m07:36:07.977504 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m07:36:07.978412 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m07:36:07.979423 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m07:36:07.984314 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, '_airbyte_raw_sheets_periodstat_default_[^_]+_planCosts$')        
...
[0m07:36:07.985548 [info ] [Thread-2 (]: 15 of 90 START sql view model test.normalize_utmcraft_registry_default_utmresult  [RUN]
[0m07:36:07.988675 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult'
[0m07:36:07.988943 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult)
[0m07:36:07.989130 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m07:36:07.994834 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, '_airbyte_raw_utmcraft_registry_default_[^_]+_utmresult$')        
...
[0m07:36:07.995597 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.002518 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = '_airbyte_raw_sheets_periodstat_default_testaccount_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.003431 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.008710 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = '_airbyte_raw_utmcraft_registry_default_testaccount_utmresult'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.010683 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.017619 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.018967 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"
[0m07:36:08.028106 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"
[0m07:36:08.029469 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult (compile): 2024-05-17 07:36:07.989243 => 2024-05-17 07:36:08.029285
[0m07:36:08.030347 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m07:36:08.035063 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"
[0m07:36:08.035874 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts (compile): 2024-05-17 07:36:07.979970 => 2024-05-17 07:36:08.035634
[0m07:36:08.036810 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m07:36:08.037430 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */


  create view test.normalize_utmcraft_registry_default_utmresult__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'created_at') AS created_at, 
        JSONExtractString(_airbyte_data, 'created_by_id') AS created_by_id, 
        JSONExtractString(_airbyte_data, 'data') AS data, 
        JSONExtractString(_airbyte_data, 'form_id') AS form_id, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'updated_at') AS updated_at, 
        JSONExtractString(_airbyte_data, 'updated_by_id') AS updated_by_id, 
        JSONExtractString(_airbyte_data, 'utm_hashcode') AS utm_hashcode,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('_airbyte_raw_utmcraft_registry_default_testaccount_utmresult') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id ,
        toString("_airbyte_data") AS _airbyte_data ,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at 
FROM test._airbyte_raw_utmcraft_registry_default_testaccount_utmresult
)

)
  )...
[0m07:36:08.042315 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"
[0m07:36:08.044826 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */


  create view test.normalize_sheets_periodstat_default_planCosts__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'Period_start') AS __date, 
        JSONExtractString(_airbyte_data, 'Campaign') AS Campaign, 
        JSONExtractString(_airbyte_data, 'Cost') AS Cost, 
        JSONExtractString(_airbyte_data, 'Period_end') AS Period_end, 
        JSONExtractString(_airbyte_data, 'Period_start') AS Period_start,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('_airbyte_raw_sheets_periodstat_default_testaccount_planCosts') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id ,
        toString("_airbyte_data") AS _airbyte_data ,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at 
FROM test._airbyte_raw_sheets_periodstat_default_testaccount_planCosts
)

)
  )...
[0m07:36:08.052433 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.055725 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    drop table if exists test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  
  ...
[0m07:36:08.056600 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.062703 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    drop table if exists test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m07:36:08.063447 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.066228 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    rename table test.normalize_utmcraft_registry_default_utmresult to test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  
  ...
[0m07:36:08.068695 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.069599 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.070983 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    rename table test.normalize_sheets_periodstat_default_planCosts to test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m07:36:08.075192 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    drop table if exists test.normalize_utmcraft_registry_default_utmresult 
  
  ...
[0m07:36:08.079298 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.079970 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.083615 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    drop table if exists test.normalize_sheets_periodstat_default_planCosts 
  
  ...
[0m07:36:08.085583 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    rename table test.normalize_utmcraft_registry_default_utmresult__dbt_tmp to test.normalize_utmcraft_registry_default_utmresult 
  
  ...
[0m07:36:08.089215 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.089839 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.094485 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */
drop table if exists test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  ...
[0m07:36:08.096823 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    rename table test.normalize_sheets_periodstat_default_planCosts__dbt_tmp to test.normalize_sheets_periodstat_default_planCosts 
  
  ...
[0m07:36:08.100398 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.101308 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.103125 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult (execute): 2024-05-17 07:36:08.030714 => 2024-05-17 07:36:08.103058
[0m07:36:08.107661 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */
drop table if exists test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  ...
[0m07:36:08.108866 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80dbf70>]}
[0m07:36:08.110158 [info ] [Thread-2 (]: 15 of 90 OK created sql view model test.normalize_utmcraft_registry_default_utmresult  [[32mOK[0m in 0.12s]
[0m07:36:08.110923 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m07:36:08.111386 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m07:36:08.113275 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.112363 [info ] [Thread-2 (]: 16 of 90 START sql view model test.normalize_vkads_datestat_default_ad_plans_statistics  [RUN]
[0m07:36:08.114884 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts (execute): 2024-05-17 07:36:08.037746 => 2024-05-17 07:36:08.114824
[0m07:36:08.115772 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics'
[0m07:36:08.116444 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81a4fa0>]}
[0m07:36:08.116699 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics)
[0m07:36:08.117514 [info ] [Thread-1 (]: 14 of 90 OK created sql view model test.normalize_sheets_periodstat_default_planCosts  [[32mOK[0m in 0.14s]
[0m07:36:08.118231 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m07:36:08.118753 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m07:36:08.123812 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, '_airbyte_raw_vkads_datestat_default_[^_]+_ad_plans_statistics$')        
...
[0m07:36:08.124900 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m07:36:08.128044 [info ] [Thread-1 (]: 17 of 90 START sql view model test.normalize_vkads_periodstat_default_ad_plans . [RUN]
[0m07:36:08.129350 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans'
[0m07:36:08.129894 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans)
[0m07:36:08.130118 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m07:36:08.136352 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, '_airbyte_raw_vkads_periodstat_default_[^_]+_ad_plans$')        
...
[0m07:36:08.137224 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.143818 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = '_airbyte_raw_vkads_datestat_default_testaccount_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.150518 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.156850 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:08.166186 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = '_airbyte_raw_vkads_periodstat_default_testaccount_ad_plans'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.171149 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"
[0m07:36:08.173472 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics (compile): 2024-05-17 07:36:08.119255 => 2024-05-17 07:36:08.173301
[0m07:36:08.174082 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m07:36:08.180031 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"
[0m07:36:08.181306 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.198412 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"
[0m07:36:08.198970 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */


  create view test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'ad_offers') AS ad_offers, 
        JSONExtractString(_airbyte_data, 'ad_plan_id') AS ad_plan_id, 
        JSONExtractString(_airbyte_data, 'base') AS base, 
        JSONExtractString(_airbyte_data, 'carousel') AS carousel, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'moat') AS moat, 
        JSONExtractString(_airbyte_data, 'playable') AS playable, 
        JSONExtractString(_airbyte_data, 'romi') AS romi, 
        JSONExtractString(_airbyte_data, 'social_network') AS social_network, 
        JSONExtractString(_airbyte_data, 'tps') AS tps, 
        JSONExtractString(_airbyte_data, 'uniques') AS uniques, 
        JSONExtractString(_airbyte_data, 'uniques_video') AS uniques_video, 
        JSONExtractString(_airbyte_data, 'video') AS video,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('_airbyte_raw_vkads_datestat_default_testaccount_ad_plans_statistics') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id ,
        toString("_airbyte_data") AS _airbyte_data ,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at 
FROM test._airbyte_raw_vkads_datestat_default_testaccount_ad_plans_statistics
)

)
  )...
[0m07:36:08.199931 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans (compile): 2024-05-17 07:36:08.130224 => 2024-05-17 07:36:08.199824
[0m07:36:08.200515 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m07:36:08.207132 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"
[0m07:36:08.207900 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */


  create view test.normalize_vkads_periodstat_default_ad_plans__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'ad_groups') AS ad_groups, 
        JSONExtractString(_airbyte_data, 'autobidding_mode') AS autobidding_mode, 
        JSONExtractString(_airbyte_data, 'budget_limit') AS budget_limit, 
        JSONExtractString(_airbyte_data, 'budget_limit_day') AS budget_limit_day, 
        JSONExtractString(_airbyte_data, 'created') AS created, 
        JSONExtractString(_airbyte_data, 'date_end') AS date_end, 
        JSONExtractString(_airbyte_data, 'date_start') AS date_start, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'max_price') AS max_price, 
        JSONExtractString(_airbyte_data, 'name') AS name, 
        JSONExtractString(_airbyte_data, 'objective') AS objective, 
        JSONExtractString(_airbyte_data, 'priced_goal') AS priced_goal, 
        JSONExtractString(_airbyte_data, 'pricelist_id') AS pricelist_id, 
        JSONExtractString(_airbyte_data, 'status') AS status, 
        JSONExtractString(_airbyte_data, 'updated') AS updated, 
        JSONExtractString(_airbyte_data, 'vkads_status') AS vkads_status,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('_airbyte_raw_vkads_periodstat_default_testaccount_ad_plans') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id ,
        toString("_airbyte_data") AS _airbyte_data ,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at 
FROM test._airbyte_raw_vkads_periodstat_default_testaccount_ad_plans
)

)
  )...
[0m07:36:08.210612 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.215150 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m07:36:08.218252 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.219424 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    rename table test.normalize_vkads_datestat_default_ad_plans_statistics to test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m07:36:08.220786 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.224231 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    drop table if exists test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  
  ...
[0m07:36:08.225881 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.230072 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics 
  
  ...
[0m07:36:08.231284 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.232598 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    rename table test.normalize_vkads_periodstat_default_ad_plans to test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  
  ...
[0m07:36:08.235673 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.236825 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    rename table test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_tmp to test.normalize_vkads_datestat_default_ad_plans_statistics 
  
  ...
[0m07:36:08.238219 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.242238 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    drop table if exists test.normalize_vkads_periodstat_default_ad_plans 
  
  ...
[0m07:36:08.242991 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.247892 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */
drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  ...
[0m07:36:08.248547 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.250886 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    rename table test.normalize_vkads_periodstat_default_ad_plans__dbt_tmp to test.normalize_vkads_periodstat_default_ad_plans 
  
  ...
[0m07:36:08.253157 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.254576 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics (execute): 2024-05-17 07:36:08.174684 => 2024-05-17 07:36:08.254512
[0m07:36:08.255358 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea813dba0>]}
[0m07:36:08.255934 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.257061 [info ] [Thread-2 (]: 16 of 90 OK created sql view model test.normalize_vkads_datestat_default_ad_plans_statistics  [[32mOK[0m in 0.14s]
[0m07:36:08.261982 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */
drop table if exists test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  ...
[0m07:36:08.262601 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m07:36:08.264064 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m07:36:08.264619 [info ] [Thread-2 (]: 18 of 90 START sql view model test.normalize_yd_datestat_default_custom_report . [RUN]
[0m07:36:08.266431 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report'
[0m07:36:08.267617 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report)
[0m07:36:08.268629 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m07:36:08.274958 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, '_airbyte_raw_yd_datestat_default_[^_]+_custom_report$')        
...
[0m07:36:08.275964 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.278863 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans (execute): 2024-05-17 07:36:08.201045 => 2024-05-17 07:36:08.278801
[0m07:36:08.279613 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81a4ee0>]}
[0m07:36:08.280090 [info ] [Thread-1 (]: 17 of 90 OK created sql view model test.normalize_vkads_periodstat_default_ad_plans  [[32mOK[0m in 0.15s]
[0m07:36:08.280433 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m07:36:08.280775 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m07:36:08.282070 [info ] [Thread-1 (]: 19 of 90 START sql view model test.normalize_ym_events_default_yandex_metrika_stream  [RUN]
[0m07:36:08.283465 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream'
[0m07:36:08.283722 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream)
[0m07:36:08.283896 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m07:36:08.373465 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.10 seconds
[0m07:36:08.378210 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, '_airbyte_raw_ym_events_default_[^_]+_yandex_metrika_stream$')        
...
[0m07:36:08.382217 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = '_airbyte_raw_yd_datestat_default_testaccount_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.388157 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.394485 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.399865 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"
[0m07:36:08.403793 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = '_airbyte_raw_ym_events_default_testaccount_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.406530 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report (compile): 2024-05-17 07:36:08.269064 => 2024-05-17 07:36:08.406357
[0m07:36:08.407198 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m07:36:08.411713 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"
[0m07:36:08.412808 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.435353 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"
[0m07:36:08.435799 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */


  create view test.normalize_yd_datestat_default_custom_report__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'Date') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'AdId') AS AdId, 
        JSONExtractString(_airbyte_data, 'CampaignId') AS CampaignId, 
        JSONExtractString(_airbyte_data, 'CampaignName') AS CampaignName, 
        JSONExtractString(_airbyte_data, 'CampaignType') AS CampaignType, 
        JSONExtractString(_airbyte_data, 'Clicks') AS Clicks, 
        JSONExtractString(_airbyte_data, 'Cost') AS Cost, 
        JSONExtractString(_airbyte_data, 'Date') AS Date, 
        JSONExtractString(_airbyte_data, 'Impressions') AS Impressions,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('_airbyte_raw_yd_datestat_default_testaccount_custom_report') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id ,
        toString("_airbyte_data") AS _airbyte_data ,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at 
FROM test._airbyte_raw_yd_datestat_default_testaccount_custom_report
)

)
  )...
[0m07:36:08.437527 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream (compile): 2024-05-17 07:36:08.283991 => 2024-05-17 07:36:08.437389
[0m07:36:08.437895 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m07:36:08.443749 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"
[0m07:36:08.444922 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */


  create view test.normalize_ym_events_default_yandex_metrika_stream__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'ym:s:dateTime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'ym:s:clientID') AS ymsclientID, 
        JSONExtractString(_airbyte_data, 'ym:s:dateTime') AS ymsdateTime, 
        JSONExtractString(_airbyte_data, 'ym:s:goalsID') AS ymsgoalsID, 
        JSONExtractString(_airbyte_data, 'ym:s:goalsOrder') AS ymsgoalsOrder, 
        JSONExtractString(_airbyte_data, 'ym:s:lastAdvEngine') AS ymslastAdvEngine, 
        JSONExtractString(_airbyte_data, 'ym:s:lastReferalSource') AS ymslastReferalSource, 
        JSONExtractString(_airbyte_data, 'ym:s:lastSearchEngine') AS ymslastSearchEngine, 
        JSONExtractString(_airbyte_data, 'ym:s:lastTrafficSource') AS ymslastTrafficSource, 
        JSONExtractString(_airbyte_data, 'ym:s:pageViews') AS ymspageViews, 
        JSONExtractString(_airbyte_data, 'ym:s:parsedParamsKey1') AS ymsparsedParamsKey1, 
        JSONExtractString(_airbyte_data, 'ym:s:parsedParamsKey2') AS ymsparsedParamsKey2, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseCoupon') AS ymspurchaseCoupon, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseID') AS ymspurchaseID, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseRevenue') AS ymspurchaseRevenue, 
        JSONExtractString(_airbyte_data, 'ym:s:regionCity') AS ymsregionCity, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMCampaign') AS ymsUTMCampaign, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMContent') AS ymsUTMContent, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMMedium') AS ymsUTMMedium, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMSource') AS ymsUTMSource, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMTerm') AS ymsUTMTerm, 
        JSONExtractString(_airbyte_data, 'ym:s:visitID') AS ymsvisitID,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('_airbyte_raw_ym_events_default_testaccount_yandex_metrika_stream') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id ,
        toString("_airbyte_data") AS _airbyte_data ,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at 
FROM test._airbyte_raw_ym_events_default_testaccount_yandex_metrika_stream
)

)
  )...
[0m07:36:08.447832 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.451418 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    drop table if exists test.normalize_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m07:36:08.454796 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.455956 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    rename table test.normalize_yd_datestat_default_custom_report to test.normalize_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m07:36:08.457489 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.460699 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    drop table if exists test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m07:36:08.461384 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.465711 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    drop table if exists test.normalize_yd_datestat_default_custom_report 
  
  ...
[0m07:36:08.468668 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.469382 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.470505 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    rename table test.normalize_ym_events_default_yandex_metrika_stream to test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m07:36:08.471843 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    rename table test.normalize_yd_datestat_default_custom_report__dbt_tmp to test.normalize_yd_datestat_default_custom_report 
  
  ...
[0m07:36:08.476442 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.477043 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.479876 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    drop table if exists test.normalize_ym_events_default_yandex_metrika_stream 
  
  ...
[0m07:36:08.484207 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */
drop table if exists test.normalize_yd_datestat_default_custom_report__dbt_backup 
  ...
[0m07:36:08.488044 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.489407 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report (execute): 2024-05-17 07:36:08.407411 => 2024-05-17 07:36:08.489349
[0m07:36:08.490049 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b7cb520>]}
[0m07:36:08.490533 [info ] [Thread-2 (]: 18 of 90 OK created sql view model test.normalize_yd_datestat_default_custom_report  [[32mOK[0m in 0.22s]
[0m07:36:08.491455 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.492041 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m07:36:08.493377 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    rename table test.normalize_ym_events_default_yandex_metrika_stream__dbt_tmp to test.normalize_ym_events_default_yandex_metrika_stream 
  
  ...
[0m07:36:08.494105 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m07:36:08.496262 [info ] [Thread-2 (]: 20 of 90 START sql incremental model test.incremental_adjust_events_default_cohorts  [RUN]
[0m07:36:08.497113 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts'
[0m07:36:08.497529 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts)
[0m07:36:08.497825 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m07:36:08.505329 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.506080 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_cohorts')        
...
[0m07:36:08.511008 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */
drop table if exists test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  ...
[0m07:36:08.516692 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.518410 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream (execute): 2024-05-17 07:36:08.438082 => 2024-05-17 07:36:08.518333
[0m07:36:08.519082 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.520070 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9b8aec0>]}
[0m07:36:08.524501 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_cohorts'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.525626 [info ] [Thread-1 (]: 19 of 90 OK created sql view model test.normalize_ym_events_default_yandex_metrika_stream  [[32mOK[0m in 0.24s]
[0m07:36:08.527738 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m07:36:08.528165 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m07:36:08.528476 [info ] [Thread-1 (]: 21 of 90 START sql incremental model test.incremental_adjust_events_default_event_metrics  [RUN]
[0m07:36:08.529657 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics'
[0m07:36:08.530651 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics)
[0m07:36:08.531333 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m07:36:08.532137 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.537067 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_event_metrics')        
...
[0m07:36:08.540270 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"
[0m07:36:08.543463 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts (compile): 2024-05-17 07:36:08.498379 => 2024-05-17 07:36:08.543262
[0m07:36:08.543916 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m07:36:08.553503 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.576698 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_event_metrics'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.594920 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.609446 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"
[0m07:36:08.613523 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

            

    
        create table test.incremental_adjust_events_default_cohorts__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_cohorts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("period") as period ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_cohorts
        )

        )

    )
        ...
[0m07:36:08.615109 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics (compile): 2024-05-17 07:36:08.532437 => 2024-05-17 07:36:08.614989
[0m07:36:08.615539 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m07:36:08.621327 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

            

    
        create table test.incremental_adjust_events_default_event_metrics__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_event_metrics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_event_metrics
        )

        )

    )
        ...
[0m07:36:08.638776 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:08.643664 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_cohorts__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.645237 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:08.648822 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_event_metrics__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.649546 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.652324 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"
[0m07:36:08.653459 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_cohorts__dbt_tmp ("__date", "country", "date", "event_name", "event_token", "events", "network", "period", "tracker_token", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_cohorts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("period") as period ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_cohorts
        )

        )

  
    ...
[0m07:36:08.654716 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.656331 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"
[0m07:36:08.657209 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_event_metrics__dbt_tmp ("__date", "country", "date", "event_name", "event_token", "events", "network", "tracker_token", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_event_metrics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_event_metrics
        )

        )

  
    ...
[0m07:36:08.668781 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.671745 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    drop table if exists test.incremental_adjust_events_default_cohorts__dbt_backup 
  
  ...
[0m07:36:08.672682 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:08.677879 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    drop table if exists test.incremental_adjust_events_default_event_metrics__dbt_backup 
  
  ...
[0m07:36:08.680321 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.681506 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    rename table test.incremental_adjust_events_default_cohorts__dbt_tmp to test.incremental_adjust_events_default_cohorts__dbt_backup 
  
  ...
[0m07:36:08.682839 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.684082 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    rename table test.incremental_adjust_events_default_event_metrics__dbt_tmp to test.incremental_adjust_events_default_event_metrics__dbt_backup 
  
  ...
[0m07:36:08.686970 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.691413 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */
EXCHANGE TABLES test.incremental_adjust_events_default_cohorts__dbt_backup AND test.incremental_adjust_events_default_cohorts 
  
  ...
[0m07:36:08.692315 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.695076 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */
EXCHANGE TABLES test.incremental_adjust_events_default_event_metrics__dbt_backup AND test.incremental_adjust_events_default_event_metrics 
  
  ...
[0m07:36:08.696725 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.702959 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.707164 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */
drop table if exists test.incremental_adjust_events_default_event_metrics__dbt_backup 
  ...
[0m07:36:08.710504 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */
drop table if exists test.incremental_adjust_events_default_cohorts__dbt_backup 
  ...
[0m07:36:08.715325 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.716471 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.718325 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics (execute): 2024-05-17 07:36:08.615982 => 2024-05-17 07:36:08.718262
[0m07:36:08.719694 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts (execute): 2024-05-17 07:36:08.544041 => 2024-05-17 07:36:08.719573
[0m07:36:08.720480 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8247070>]}
[0m07:36:08.721185 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9b89d20>]}
[0m07:36:08.721731 [info ] [Thread-1 (]: 21 of 90 OK created sql incremental model test.incremental_adjust_events_default_event_metrics  [[32mOK[0m in 0.19s]
[0m07:36:08.722867 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m07:36:08.722348 [info ] [Thread-2 (]: 20 of 90 OK created sql incremental model test.incremental_adjust_events_default_cohorts  [[32mOK[0m in 0.22s]
[0m07:36:08.724068 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m07:36:08.725310 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m07:36:08.725890 [info ] [Thread-1 (]: 22 of 90 START sql incremental model test.incremental_adjust_events_default_network  [RUN]
[0m07:36:08.726457 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m07:36:08.727453 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_network'
[0m07:36:08.728131 [info ] [Thread-2 (]: 23 of 90 START sql table model test.incremental_adjust_registry_default_events . [RUN]
[0m07:36:08.728722 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_network)
[0m07:36:08.729779 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_registry_default_events'
[0m07:36:08.730314 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m07:36:08.730629 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_registry_default_events)
[0m07:36:08.735978 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_network')        
...
[0m07:36:08.736854 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m07:36:08.742296 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_registry_default_events')        
...
[0m07:36:08.749061 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.749842 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.753465 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_network'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.758461 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

    select name, type from system.columns where table = 'normalize_adjust_registry_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.764249 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.767349 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_network"
[0m07:36:08.768427 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.770964 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"
[0m07:36:08.771540 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_network (compile): 2024-05-17 07:36:08.730926 => 2024-05-17 07:36:08.771355
[0m07:36:08.772151 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m07:36:08.778916 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

            

    
        create table test.incremental_adjust_events_default_network__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_network

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("clicks") as clicks ,
                            toString("country") as country ,
                            toString("country_code") as country_code ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("impressions") as impressions ,
                            toString("installs") as installs ,
                            toString("network") as network ,
                            toString("rejected_installs") as rejected_installs ,
                            toString("sessions") as sessions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_network
        )

        )

    )
        ...
[0m07:36:08.780675 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_registry_default_events (compile): 2024-05-17 07:36:08.738122 => 2024-05-17 07:36:08.780471
[0m07:36:08.781521 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m07:36:08.796131 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

            

    
        create table test.incremental_adjust_registry_default_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_registry_default_events


SELECT *
FROM (

        (
            select
                            toString("app_token") as app_token ,
                            toString("description") as description ,
                            toString("formatting") as formatting ,
                            toString("id") as id ,
                            toString("is_skad_event") as is_skad_event ,
                            toString("name") as name ,
                            toString("section") as section ,
                            toString("short_name") as short_name ,
                            toString("tokens") as tokens ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_registry_default_events
        )

        )

    )
        ...
[0m07:36:08.797491 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:08.801349 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_network__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.806315 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.807922 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_network"
[0m07:36:08.808550 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_network__dbt_tmp ("__date", "clicks", "country", "country_code", "date", "events", "impressions", "installs", "network", "rejected_installs", "sessions", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_network

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("clicks") as clicks ,
                            toString("country") as country ,
                            toString("country_code") as country_code ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("impressions") as impressions ,
                            toString("installs") as installs ,
                            toString("network") as network ,
                            toString("rejected_installs") as rejected_installs ,
                            toString("sessions") as sessions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_network
        )

        )

  
    ...
[0m07:36:08.812261 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:08.815502 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

    select name, type from system.columns where table = 'incremental_adjust_registry_default_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.820196 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.821193 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.825397 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    drop table if exists test.incremental_adjust_events_default_network__dbt_backup 
  
  ...
[0m07:36:08.827316 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"
[0m07:36:08.829136 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

  
    
    
        
        insert into test.incremental_adjust_registry_default_events__dbt_backup ("app_token", "description", "formatting", "id", "is_skad_event", "name", "section", "short_name", "tokens", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_registry_default_events


SELECT *
FROM (

        (
            select
                            toString("app_token") as app_token ,
                            toString("description") as description ,
                            toString("formatting") as formatting ,
                            toString("id") as id ,
                            toString("is_skad_event") as is_skad_event ,
                            toString("name") as name ,
                            toString("section") as section ,
                            toString("short_name") as short_name ,
                            toString("tokens") as tokens ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_registry_default_events
        )

        )

  ...
[0m07:36:08.830687 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.831857 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    rename table test.incremental_adjust_events_default_network__dbt_tmp to test.incremental_adjust_events_default_network__dbt_backup 
  
  ...
[0m07:36:08.835256 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.836639 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */
EXCHANGE TABLES test.incremental_adjust_events_default_network__dbt_backup AND test.incremental_adjust_events_default_network 
  
  ...
[0m07:36:08.840394 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.841159 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.845449 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */
drop table if exists test.incremental_adjust_events_default_network__dbt_backup 
  ...
[0m07:36:08.848014 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */
EXCHANGE TABLES test.incremental_adjust_registry_default_events__dbt_backup AND test.incremental_adjust_registry_default_events 
  
  ...
[0m07:36:08.852593 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.856444 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */
drop table if exists test.incremental_adjust_registry_default_events__dbt_backup 
  ...
[0m07:36:08.857558 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.860975 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_network (execute): 2024-05-17 07:36:08.772450 => 2024-05-17 07:36:08.860899
[0m07:36:08.861729 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea82aed70>]}
[0m07:36:08.862426 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:08.864404 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_registry_default_events (execute): 2024-05-17 07:36:08.781790 => 2024-05-17 07:36:08.864335
[0m07:36:08.862977 [info ] [Thread-1 (]: 22 of 90 OK created sql incremental model test.incremental_adjust_events_default_network  [[32mOK[0m in 0.13s]
[0m07:36:08.865546 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80bdcc0>]}
[0m07:36:08.865938 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m07:36:08.866693 [info ] [Thread-2 (]: 23 of 90 OK created sql table model test.incremental_adjust_registry_default_events  [[32mOK[0m in 0.14s]
[0m07:36:08.867654 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m07:36:08.868461 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m07:36:08.868969 [info ] [Thread-1 (]: 24 of 90 START sql incremental model test.incremental_appmetrica_events_default_deeplinks  [RUN]
[0m07:36:08.869500 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m07:36:08.870671 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks'
[0m07:36:08.871373 [info ] [Thread-2 (]: 25 of 90 START sql incremental model test.incremental_appmetrica_events_default_installations  [RUN]
[0m07:36:08.871987 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks)
[0m07:36:08.872809 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations'
[0m07:36:08.873174 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m07:36:08.873497 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations)
[0m07:36:08.878684 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_deeplinks')        
...
[0m07:36:08.879439 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m07:36:08.886167 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_installations')        
...
[0m07:36:08.892941 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.894074 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.898726 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.903582 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.910470 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.911390 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.916961 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"
[0m07:36:08.920701 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"
[0m07:36:08.922364 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks (compile): 2024-05-17 07:36:08.873797 => 2024-05-17 07:36:08.922213
[0m07:36:08.922792 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m07:36:08.928485 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations (compile): 2024-05-17 07:36:08.881624 => 2024-05-17 07:36:08.928282
[0m07:36:08.930945 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

            

    
        create table test.incremental_appmetrica_events_default_deeplinks__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_deeplinks

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("deeplink_url_parameters") as deeplink_url_parameters ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_deeplinks
        )

        )

    )
        ...
[0m07:36:08.931517 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m07:36:08.938021 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

            

    
        create table test.incremental_appmetrica_events_default_installations__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_installations

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("click_datetime") as click_datetime ,
                            toString("click_url_parameters") as click_url_parameters ,
                            toString("google_aid") as google_aid ,
                            toString("install_receive_datetime") as install_receive_datetime ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("is_reinstallation") as is_reinstallation ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_installations
        )

        )

    )
        ...
[0m07:36:08.957796 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:08.962991 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.964586 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:08.967753 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:08.972414 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.974247 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"
[0m07:36:08.975501 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.977812 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"
[0m07:36:08.978668 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_installations__dbt_tmp ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "click_datetime", "click_url_parameters", "google_aid", "install_receive_datetime", "ios_ifa", "is_reinstallation", "os_name", "profile_id", "publisher_name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_installations

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("click_datetime") as click_datetime ,
                            toString("click_url_parameters") as click_url_parameters ,
                            toString("google_aid") as google_aid ,
                            toString("install_receive_datetime") as install_receive_datetime ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("is_reinstallation") as is_reinstallation ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_installations
        )

        )

  
    ...
[0m07:36:08.979012 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_deeplinks__dbt_tmp ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "deeplink_url_parameters", "event_receive_datetime", "google_aid", "ios_ifa", "os_name", "profile_id", "publisher_name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_deeplinks

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("deeplink_url_parameters") as deeplink_url_parameters ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_deeplinks
        )

        )

  
    ...
[0m07:36:08.989066 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.989835 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:08.993906 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    drop table if exists test.incremental_appmetrica_events_default_installations__dbt_backup 
  
  ...
[0m07:36:08.998311 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    drop table if exists test.incremental_appmetrica_events_default_deeplinks__dbt_backup 
  
  ...
[0m07:36:09.002557 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:09.003283 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:09.004340 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    rename table test.incremental_appmetrica_events_default_deeplinks__dbt_tmp to test.incremental_appmetrica_events_default_deeplinks__dbt_backup 
  
  ...
[0m07:36:09.005750 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    rename table test.incremental_appmetrica_events_default_installations__dbt_tmp to test.incremental_appmetrica_events_default_installations__dbt_backup 
  
  ...
[0m07:36:09.009892 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:09.011133 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_installations__dbt_backup AND test.incremental_appmetrica_events_default_installations 
  
  ...
[0m07:36:09.012487 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.014282 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_deeplinks__dbt_backup AND test.incremental_appmetrica_events_default_deeplinks 
  
  ...
[0m07:36:09.015982 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:09.020659 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */
drop table if exists test.incremental_appmetrica_events_default_installations__dbt_backup 
  ...
[0m07:36:09.021677 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.027278 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */
drop table if exists test.incremental_appmetrica_events_default_deeplinks__dbt_backup 
  ...
[0m07:36:09.028771 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.030911 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations (execute): 2024-05-17 07:36:08.932528 => 2024-05-17 07:36:09.030840
[0m07:36:09.031636 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b7d28f0>]}
[0m07:36:09.032258 [info ] [Thread-2 (]: 25 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_installations  [[32mOK[0m in 0.16s]
[0m07:36:09.033130 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.033586 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m07:36:09.035339 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks (execute): 2024-05-17 07:36:08.922973 => 2024-05-17 07:36:09.035278
[0m07:36:09.035874 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m07:36:09.037219 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcebd7904c0>]}
[0m07:36:09.037905 [info ] [Thread-2 (]: 26 of 90 START sql incremental model test.incremental_appmetrica_events_default_events  [RUN]
[0m07:36:09.040109 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_events'
[0m07:36:09.041855 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_events)
[0m07:36:09.042266 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m07:36:09.046518 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_events')        
...
[0m07:36:09.053215 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.056395 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:09.061790 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.065667 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"
[0m07:36:09.066122 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_events (compile): 2024-05-17 07:36:09.042376 => 2024-05-17 07:36:09.066048
[0m07:36:09.066325 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m07:36:09.072262 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

            

    
        create table test.incremental_appmetrica_events_default_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_events

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("app_version_name") as app_version_name ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("event_json") as event_json ,
                            toString("event_name") as event_name ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_id") as session_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_events
        )

        )

    )
        ...
[0m07:36:09.090189 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:09.094076 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:09.100121 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.101644 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"
[0m07:36:09.102038 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_events__dbt_tmp ("__date", "__clientName", "__productName", "app_version_name", "appmetrica_device_id", "city", "event_json", "event_name", "event_receive_datetime", "google_aid", "installation_id", "ios_ifa", "os_name", "profile_id", "session_id", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_events

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("app_version_name") as app_version_name ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("event_json") as event_json ,
                            toString("event_name") as event_name ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_id") as session_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_events
        )

        )

  
    ...
[0m07:36:09.120689 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:09.123525 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    drop table if exists test.incremental_appmetrica_events_default_events__dbt_backup 
  
  ...
[0m07:36:09.126695 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:09.128836 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    rename table test.incremental_appmetrica_events_default_events__dbt_tmp to test.incremental_appmetrica_events_default_events__dbt_backup 
  
  ...
[0m07:36:09.132700 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:09.133870 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_events__dbt_backup AND test.incremental_appmetrica_events_default_events 
  
  ...
[0m07:36:09.137804 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:09.141841 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */
drop table if exists test.incremental_appmetrica_events_default_events__dbt_backup 
  ...
[0m07:36:09.146232 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:09.147671 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_events (execute): 2024-05-17 07:36:09.066440 => 2024-05-17 07:36:09.147607
[0m07:36:09.148250 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81ecca0>]}
[0m07:36:09.846127 [info ] [Thread-1 (]: 24 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_deeplinks  [[32mOK[0m in 0.17s]
[0m07:36:09.847956 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m07:36:09.847280 [info ] [Thread-2 (]: 26 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_events  [[32mOK[0m in 0.11s]
[0m07:36:09.848823 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m07:36:09.849440 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m07:36:09.850075 [info ] [Thread-1 (]: 27 of 90 START sql incremental model test.incremental_appmetrica_events_default_screen_view  [RUN]
[0m07:36:09.850868 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m07:36:09.852043 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view'
[0m07:36:09.852860 [info ] [Thread-2 (]: 28 of 90 START sql incremental model test.incremental_appmetrica_events_default_sessions_starts  [RUN]
[0m07:36:09.853531 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view)
[0m07:36:09.854453 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts'
[0m07:36:09.854986 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m07:36:09.855327 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts)
[0m07:36:09.862005 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_screen_view')        
...
[0m07:36:09.862475 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m07:36:09.870448 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_sessions_starts')        
...
[0m07:36:09.871851 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.876163 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:09.878963 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.883219 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:09.884955 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.888182 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"
[0m07:36:09.889125 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:09.892557 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"
[0m07:36:09.893150 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view (compile): 2024-05-17 07:36:09.855609 => 2024-05-17 07:36:09.892997
[0m07:36:09.894486 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m07:36:09.894907 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts (compile): 2024-05-17 07:36:09.863892 => 2024-05-17 07:36:09.894711
[0m07:36:09.901000 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

            

    
        create table test.incremental_appmetrica_events_default_screen_view__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_screen_view

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toDateTime("event_receive_datetime") as event_receive_datetime ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("cityName") as cityName ,
                            toString("osName") as osName ,
                            toString("crmUserId") as crmUserId ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("session_id") as session_id ,
                            toUInt64("screen_view") as screen_view 

            from test.normalize_appmetrica_events_default_screen_view
        )

        )

    )
        ...
[0m07:36:09.901596 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m07:36:09.908116 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

            

    
        create table test.incremental_appmetrica_events_default_sessions_starts__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_sessions_starts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_start_receive_datetime") as session_start_receive_datetime ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_sessions_starts
        )

        )

    )
        ...
[0m07:36:09.926738 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:09.927873 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:09.931180 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.013300 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.018733 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.019761 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.021274 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"
[0m07:36:10.023789 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"
[0m07:36:10.024780 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_sessions_starts__dbt_tmp ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "google_aid", "installation_id", "ios_ifa", "os_name", "profile_id", "session_start_receive_datetime", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_sessions_starts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_start_receive_datetime") as session_start_receive_datetime ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_sessions_starts
        )

        )

  
    ...
[0m07:36:10.026075 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_screen_view__dbt_tmp ("__date", "event_receive_datetime", "mobileAdsId", "accountName", "appmetricaDeviceId", "cityName", "osName", "crmUserId", "__table_name", "__emitted_at", "session_id", "screen_view")
  -- depends_on: test.normalize_appmetrica_events_default_screen_view

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toDateTime("event_receive_datetime") as event_receive_datetime ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("cityName") as cityName ,
                            toString("osName") as osName ,
                            toString("crmUserId") as crmUserId ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("session_id") as session_id ,
                            toUInt64("screen_view") as screen_view 

            from test.normalize_appmetrica_events_default_screen_view
        )

        )

  
    ...
[0m07:36:10.036440 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.040425 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    drop table if exists test.incremental_appmetrica_events_default_sessions_starts__dbt_backup 
  
  ...
[0m07:36:10.043490 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.044888 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    rename table test.incremental_appmetrica_events_default_sessions_starts__dbt_tmp to test.incremental_appmetrica_events_default_sessions_starts__dbt_backup 
  
  ...
[0m07:36:10.045609 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.049976 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    drop table if exists test.incremental_appmetrica_events_default_screen_view__dbt_backup 
  
  ...
[0m07:36:10.050628 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.053185 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_sessions_starts__dbt_backup AND test.incremental_appmetrica_events_default_sessions_starts 
  
  ...
[0m07:36:10.054452 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.055900 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    rename table test.incremental_appmetrica_events_default_screen_view__dbt_tmp to test.incremental_appmetrica_events_default_screen_view__dbt_backup 
  
  ...
[0m07:36:10.057260 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.061738 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */
drop table if exists test.incremental_appmetrica_events_default_sessions_starts__dbt_backup 
  ...
[0m07:36:10.062837 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.065576 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_screen_view__dbt_backup AND test.incremental_appmetrica_events_default_screen_view 
  
  ...
[0m07:36:10.068783 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.070771 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts (execute): 2024-05-17 07:36:09.902686 => 2024-05-17 07:36:10.070706
[0m07:36:10.071486 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80bb5e0>]}
[0m07:36:10.072353 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.072914 [info ] [Thread-2 (]: 28 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_sessions_starts  [[32mOK[0m in 0.22s]
[0m07:36:10.077403 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */
drop table if exists test.incremental_appmetrica_events_default_screen_view__dbt_backup 
  ...
[0m07:36:10.078266 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m07:36:10.080376 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m07:36:10.081215 [info ] [Thread-2 (]: 29 of 90 START sql table model test.incremental_appmetrica_registry_default_profiles  [RUN]
[0m07:36:10.082028 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles'
[0m07:36:10.082289 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles)
[0m07:36:10.082488 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m07:36:10.087167 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_registry_default_profiles')        
...
[0m07:36:10.088979 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.090877 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view (execute): 2024-05-17 07:36:09.895137 => 2024-05-17 07:36:10.090784
[0m07:36:10.092582 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81b5240>]}
[0m07:36:10.093440 [info ] [Thread-1 (]: 27 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_screen_view  [[32mOK[0m in 0.24s]
[0m07:36:10.094255 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m07:36:10.094817 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m07:36:10.096358 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.096883 [info ] [Thread-1 (]: 30 of 90 START sql incremental model test.incremental_mt_datestat_default_banners_statistics  [RUN]
[0m07:36:10.103243 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

    select name, type from system.columns where table = 'normalize_appmetrica_registry_default_profiles'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.104021 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics'
[0m07:36:10.105576 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics)
[0m07:36:10.105886 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m07:36:10.110851 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_datestat_default_banners_statistics')        
...
[0m07:36:10.111744 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.116588 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"
[0m07:36:10.117116 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles (compile): 2024-05-17 07:36:10.082668 => 2024-05-17 07:36:10.117032
[0m07:36:10.117311 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m07:36:10.121477 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

            

    
        create table test.incremental_appmetrica_registry_default_profiles__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_registry_default_profiles


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("profile_id") as profile_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_registry_default_profiles
        )

        )

    )
        ...
[0m07:36:10.123186 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.127747 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'normalize_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.133840 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.136404 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"
[0m07:36:10.137193 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics (compile): 2024-05-17 07:36:10.106062 => 2024-05-17 07:36:10.137060
[0m07:36:10.137562 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m07:36:10.142682 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

            

    
        create table test.incremental_mt_datestat_default_banners_statistics__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_datestat_default_banners_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("banner_id") as banner_id ,
                            toString("base") as base ,
                            toString("date") as date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_datestat_default_banners_statistics
        )

        )

    )
        ...
[0m07:36:10.144747 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.149282 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

    select name, type from system.columns where table = 'incremental_appmetrica_registry_default_profiles__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.154534 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.156340 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"
[0m07:36:10.156915 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

  
    
    
        
        insert into test.incremental_appmetrica_registry_default_profiles__dbt_backup ("__clientName", "__productName", "appmetrica_device_id", "city", "profile_id", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_registry_default_profiles


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("profile_id") as profile_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_registry_default_profiles
        )

        )

  ...
[0m07:36:10.163061 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.167656 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.169028 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.170543 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */
EXCHANGE TABLES test.incremental_appmetrica_registry_default_profiles__dbt_backup AND test.incremental_appmetrica_registry_default_profiles 
  
  ...
[0m07:36:10.173102 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.174710 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"
[0m07:36:10.175701 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.181028 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */
drop table if exists test.incremental_appmetrica_registry_default_profiles__dbt_backup 
  ...
[0m07:36:10.182405 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

        
  
    
    
        
        insert into test.incremental_mt_datestat_default_banners_statistics__dbt_tmp ("__date", "__clientName", "__productName", "banner_id", "base", "date", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_datestat_default_banners_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("banner_id") as banner_id ,
                            toString("base") as base ,
                            toString("date") as date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_datestat_default_banners_statistics
        )

        )

  
    ...
[0m07:36:10.185454 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.187005 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles (execute): 2024-05-17 07:36:10.117401 => 2024-05-17 07:36:10.186937
[0m07:36:10.187751 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80bb5e0>]}
[0m07:36:10.188338 [info ] [Thread-2 (]: 29 of 90 OK created sql table model test.incremental_appmetrica_registry_default_profiles  [[32mOK[0m in 0.11s]
[0m07:36:10.188832 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m07:36:10.189277 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m07:36:10.191277 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.190247 [info ] [Thread-2 (]: 31 of 90 START sql table model test.incremental_mt_registry_default_banners .... [RUN]
[0m07:36:10.195008 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    drop table if exists test.incremental_mt_datestat_default_banners_statistics__dbt_backup 
  
  ...
[0m07:36:10.196278 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_registry_default_banners'
[0m07:36:10.198131 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_registry_default_banners)
[0m07:36:10.198598 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m07:36:10.203310 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_registry_default_banners')        
...
[0m07:36:10.205517 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.206832 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    rename table test.incremental_mt_datestat_default_banners_statistics__dbt_tmp to test.incremental_mt_datestat_default_banners_statistics__dbt_backup 
  
  ...
[0m07:36:10.211072 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.212617 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */
EXCHANGE TABLES test.incremental_mt_datestat_default_banners_statistics__dbt_backup AND test.incremental_mt_datestat_default_banners_statistics 
  
  ...
[0m07:36:10.214323 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.218660 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

    select name, type from system.columns where table = 'normalize_mt_registry_default_banners'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.220816 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.226558 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */
drop table if exists test.incremental_mt_datestat_default_banners_statistics__dbt_backup 
  ...
[0m07:36:10.227540 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.232223 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"
[0m07:36:10.232983 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_banners (compile): 2024-05-17 07:36:10.198909 => 2024-05-17 07:36:10.232873
[0m07:36:10.233302 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m07:36:10.238715 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

            

    
        create table test.incremental_mt_registry_default_banners__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_registry_default_banners


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("campaign_id") as campaign_id ,
                            toString("id") as id ,
                            toString("textblocks") as textblocks ,
                            toString("urls") as urls ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_banners
        )

        )

    )
        ...
[0m07:36:10.239575 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.242891 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics (execute): 2024-05-17 07:36:10.137687 => 2024-05-17 07:36:10.242818
[0m07:36:10.243523 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8336f80>]}
[0m07:36:10.243879 [info ] [Thread-1 (]: 30 of 90 OK created sql incremental model test.incremental_mt_datestat_default_banners_statistics  [[32mOK[0m in 0.14s]
[0m07:36:10.244239 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m07:36:10.244523 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m07:36:10.244834 [info ] [Thread-1 (]: 32 of 90 START sql table model test.incremental_mt_registry_default_campaigns .. [RUN]
[0m07:36:10.246352 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns'
[0m07:36:10.246877 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns)
[0m07:36:10.247187 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m07:36:10.252856 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_registry_default_campaigns')        
...
[0m07:36:10.257516 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.260825 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_banners__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.262068 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.269268 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = 'normalize_mt_registry_default_campaigns'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.269934 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.273390 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"
[0m07:36:10.273921 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

  
    
    
        
        insert into test.incremental_mt_registry_default_banners__dbt_backup ("__clientName", "__productName", "campaign_id", "id", "textblocks", "urls", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_registry_default_banners


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("campaign_id") as campaign_id ,
                            toString("id") as id ,
                            toString("textblocks") as textblocks ,
                            toString("urls") as urls ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_banners
        )

        )

  ...
[0m07:36:10.276039 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.277999 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"
[0m07:36:10.278639 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns (compile): 2024-05-17 07:36:10.247335 => 2024-05-17 07:36:10.278541
[0m07:36:10.278987 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m07:36:10.284469 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

            

    
        create table test.incremental_mt_registry_default_campaigns__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_registry_default_campaigns


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("id") as id ,
                            toString("name") as name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_campaigns
        )

        )

    )
        ...
[0m07:36:10.285386 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.287800 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */
EXCHANGE TABLES test.incremental_mt_registry_default_banners__dbt_backup AND test.incremental_mt_registry_default_banners 
  
  ...
[0m07:36:10.291560 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.298526 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */
drop table if exists test.incremental_mt_registry_default_banners__dbt_backup 
  ...
[0m07:36:10.301111 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.304089 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_campaigns__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.304750 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.307349 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_banners (execute): 2024-05-17 07:36:10.233419 => 2024-05-17 07:36:10.307270
[0m07:36:10.308192 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea828c070>]}
[0m07:36:10.308867 [info ] [Thread-2 (]: 31 of 90 OK created sql table model test.incremental_mt_registry_default_banners  [[32mOK[0m in 0.11s]
[0m07:36:10.309522 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m07:36:10.310207 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m07:36:10.311814 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.310888 [info ] [Thread-2 (]: 33 of 90 START sql table model test.incremental_utmcraft_registry_default_utmresult  [RUN]
[0m07:36:10.313834 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"
[0m07:36:10.315362 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult'
[0m07:36:10.316195 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult)
[0m07:36:10.316695 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

  
    
    
        
        insert into test.incremental_mt_registry_default_campaigns__dbt_backup ("__clientName", "__productName", "id", "name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_registry_default_campaigns


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("id") as id ,
                            toString("name") as name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_campaigns
        )

        )

  ...
[0m07:36:10.317083 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m07:36:10.323035 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_utmcraft_registry_default_utmresult')        
...
[0m07:36:10.327763 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.329525 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */
EXCHANGE TABLES test.incremental_mt_registry_default_campaigns__dbt_backup AND test.incremental_mt_registry_default_campaigns 
  
  ...
[0m07:36:10.331220 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.336523 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = 'normalize_utmcraft_registry_default_utmresult'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.337453 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.343559 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */
drop table if exists test.incremental_mt_registry_default_campaigns__dbt_backup 
  ...
[0m07:36:10.348158 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.350221 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns (execute): 2024-05-17 07:36:10.279161 => 2024-05-17 07:36:10.350123
[0m07:36:10.351678 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.352938 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81b5960>]}
[0m07:36:10.355119 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"
[0m07:36:10.356028 [info ] [Thread-1 (]: 32 of 90 OK created sql table model test.incremental_mt_registry_default_campaigns  [[32mOK[0m in 0.11s]
[0m07:36:10.357028 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m07:36:10.357709 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m07:36:10.358512 [info ] [Thread-1 (]: 34 of 90 START sql incremental model test.incremental_sheets_periodstat_default_planCosts  [RUN]
[0m07:36:10.360393 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts'
[0m07:36:10.360995 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult (compile): 2024-05-17 07:36:10.318085 => 2024-05-17 07:36:10.360863
[0m07:36:10.361278 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts)
[0m07:36:10.361619 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m07:36:10.361887 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m07:36:10.367656 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

            

    
        create table test.incremental_utmcraft_registry_default_utmresult__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_utmcraft_registry_default_utmresult


SELECT *
FROM (

        (
            select
                            toString("created_at") as created_at ,
                            toString("created_by_id") as created_by_id ,
                            toString("data") as data ,
                            toString("form_id") as form_id ,
                            toString("id") as id ,
                            toString("updated_at") as updated_at ,
                            toString("updated_by_id") as updated_by_id ,
                            toString("utm_hashcode") as utm_hashcode ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_utmcraft_registry_default_utmresult
        )

        )

    )
        ...
[0m07:36:10.373169 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_sheets_periodstat_default_planCosts')        
...
[0m07:36:10.382155 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.386237 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'normalize_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.392493 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.393766 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.397421 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"
[0m07:36:10.401150 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = 'incremental_utmcraft_registry_default_utmresult__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.402920 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts (compile): 2024-05-17 07:36:10.368071 => 2024-05-17 07:36:10.402740
[0m07:36:10.403321 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m07:36:10.408789 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

            

    
        create table test.incremental_sheets_periodstat_default_planCosts__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_sheets_periodstat_default_planCosts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("Campaign") as Campaign ,
                            toString("Cost") as Cost ,
                            toString("Period_end") as Period_end ,
                            toString("Period_start") as Period_start ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_sheets_periodstat_default_planCosts
        )

        )

    )
        ...
[0m07:36:10.410395 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.413539 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"
[0m07:36:10.414699 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

  
    
    
        
        insert into test.incremental_utmcraft_registry_default_utmresult__dbt_backup ("created_at", "created_by_id", "data", "form_id", "id", "updated_at", "updated_by_id", "utm_hashcode", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_utmcraft_registry_default_utmresult


SELECT *
FROM (

        (
            select
                            toString("created_at") as created_at ,
                            toString("created_by_id") as created_by_id ,
                            toString("data") as data ,
                            toString("form_id") as form_id ,
                            toString("id") as id ,
                            toString("updated_at") as updated_at ,
                            toString("updated_by_id") as updated_by_id ,
                            toString("utm_hashcode") as utm_hashcode ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_utmcraft_registry_default_utmresult
        )

        )

  ...
[0m07:36:10.427155 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.429227 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */
EXCHANGE TABLES test.incremental_utmcraft_registry_default_utmresult__dbt_backup AND test.incremental_utmcraft_registry_default_utmresult 
  
  ...
[0m07:36:10.431434 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.436185 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.437597 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.445766 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.447097 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */
drop table if exists test.incremental_utmcraft_registry_default_utmresult__dbt_backup 
  ...
[0m07:36:10.449799 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"
[0m07:36:10.452192 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

        
  
    
    
        
        insert into test.incremental_sheets_periodstat_default_planCosts__dbt_tmp ("__date", "Campaign", "Cost", "Period_end", "Period_start", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_sheets_periodstat_default_planCosts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("Campaign") as Campaign ,
                            toString("Cost") as Cost ,
                            toString("Period_end") as Period_end ,
                            toString("Period_start") as Period_start ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_sheets_periodstat_default_planCosts
        )

        )

  
    ...
[0m07:36:10.454546 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.455924 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult (execute): 2024-05-17 07:36:10.362292 => 2024-05-17 07:36:10.455854
[0m07:36:10.456631 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea828df00>]}
[0m07:36:10.457139 [info ] [Thread-2 (]: 33 of 90 OK created sql table model test.incremental_utmcraft_registry_default_utmresult  [[32mOK[0m in 0.14s]
[0m07:36:10.457599 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m07:36:10.458111 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m07:36:10.459435 [info ] [Thread-2 (]: 35 of 90 START sql incremental model test.incremental_vkads_datestat_default_ad_plans_statistics  [RUN]
[0m07:36:10.460287 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics'
[0m07:36:10.460536 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics)
[0m07:36:10.460708 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m07:36:10.466324 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_vkads_datestat_default_ad_plans_statistics')        
...
[0m07:36:10.467147 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.471330 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    drop table if exists test.incremental_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m07:36:10.475965 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.477400 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    rename table test.incremental_sheets_periodstat_default_planCosts__dbt_tmp to test.incremental_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m07:36:10.478740 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.482619 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'normalize_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.483276 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.485644 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */
EXCHANGE TABLES test.incremental_sheets_periodstat_default_planCosts__dbt_backup AND test.incremental_sheets_periodstat_default_planCosts 
  
  ...
[0m07:36:10.490301 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.494821 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */
drop table if exists test.incremental_sheets_periodstat_default_planCosts__dbt_backup 
  ...
[0m07:36:10.496282 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.501328 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"
[0m07:36:10.502274 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics (compile): 2024-05-17 07:36:10.460802 => 2024-05-17 07:36:10.502141
[0m07:36:10.502618 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m07:36:10.508052 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

            

    
        create table test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_vkads_datestat_default_ad_plans_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("ad_offers") as ad_offers ,
                            toString("ad_plan_id") as ad_plan_id ,
                            toString("base") as base ,
                            toString("carousel") as carousel ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("moat") as moat ,
                            toString("playable") as playable ,
                            toString("romi") as romi ,
                            toString("social_network") as social_network ,
                            toString("tps") as tps ,
                            toString("uniques") as uniques ,
                            toString("uniques_video") as uniques_video ,
                            toString("video") as video ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_datestat_default_ad_plans_statistics
        )

        )

    )
        ...
[0m07:36:10.508960 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.511735 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts (execute): 2024-05-17 07:36:10.403452 => 2024-05-17 07:36:10.511667
[0m07:36:10.513112 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcebd792440>]}
[0m07:36:10.513592 [info ] [Thread-1 (]: 34 of 90 OK created sql incremental model test.incremental_sheets_periodstat_default_planCosts  [[32mOK[0m in 0.15s]
[0m07:36:10.514073 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m07:36:10.514672 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m07:36:10.515507 [info ] [Thread-1 (]: 36 of 90 START sql table model test.incremental_vkads_periodstat_default_ad_plans  [RUN]
[0m07:36:10.516707 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans'
[0m07:36:10.517069 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans)
[0m07:36:10.517317 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m07:36:10.524662 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_vkads_periodstat_default_ad_plans')        
...
[0m07:36:10.527114 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.531216 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.532071 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.538366 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = 'normalize_vkads_periodstat_default_ad_plans'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.539807 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.542170 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"
[0m07:36:10.543599 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

        
  
    
    
        
        insert into test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_tmp ("__date", "ad_offers", "ad_plan_id", "base", "carousel", "date", "events", "moat", "playable", "romi", "social_network", "tps", "uniques", "uniques_video", "video", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_vkads_datestat_default_ad_plans_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("ad_offers") as ad_offers ,
                            toString("ad_plan_id") as ad_plan_id ,
                            toString("base") as base ,
                            toString("carousel") as carousel ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("moat") as moat ,
                            toString("playable") as playable ,
                            toString("romi") as romi ,
                            toString("social_network") as social_network ,
                            toString("tps") as tps ,
                            toString("uniques") as uniques ,
                            toString("uniques_video") as uniques_video ,
                            toString("video") as video ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_datestat_default_ad_plans_statistics
        )

        )

  
    ...
[0m07:36:10.545355 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.548481 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"
[0m07:36:10.548936 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans (compile): 2024-05-17 07:36:10.517445 => 2024-05-17 07:36:10.548864
[0m07:36:10.549162 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m07:36:10.553828 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

            

    
        create table test.incremental_vkads_periodstat_default_ad_plans__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_vkads_periodstat_default_ad_plans


SELECT *
FROM (

        (
            select
                            toString("ad_groups") as ad_groups ,
                            toString("autobidding_mode") as autobidding_mode ,
                            toString("budget_limit") as budget_limit ,
                            toString("budget_limit_day") as budget_limit_day ,
                            toString("created") as created ,
                            toString("date_end") as date_end ,
                            toString("date_start") as date_start ,
                            toString("id") as id ,
                            toString("max_price") as max_price ,
                            toString("name") as name ,
                            toString("objective") as objective ,
                            toString("priced_goal") as priced_goal ,
                            toString("pricelist_id") as pricelist_id ,
                            toString("status") as status ,
                            toString("updated") as updated ,
                            toString("vkads_status") as vkads_status ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_periodstat_default_ad_plans
        )

        )

    )
        ...
[0m07:36:10.554584 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.560927 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    drop table if exists test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m07:36:10.564946 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.566379 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    rename table test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_tmp to test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m07:36:10.571453 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.572722 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */
EXCHANGE TABLES test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_backup AND test.incremental_vkads_datestat_default_ad_plans_statistics 
  
  ...
[0m07:36:10.573925 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.577521 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = 'incremental_vkads_periodstat_default_ad_plans__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.581753 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.587253 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */
drop table if exists test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  ...
[0m07:36:10.588866 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.591331 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"
[0m07:36:10.592836 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

  
    
    
        
        insert into test.incremental_vkads_periodstat_default_ad_plans__dbt_backup ("ad_groups", "autobidding_mode", "budget_limit", "budget_limit_day", "created", "date_end", "date_start", "id", "max_price", "name", "objective", "priced_goal", "pricelist_id", "status", "updated", "vkads_status", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_vkads_periodstat_default_ad_plans


SELECT *
FROM (

        (
            select
                            toString("ad_groups") as ad_groups ,
                            toString("autobidding_mode") as autobidding_mode ,
                            toString("budget_limit") as budget_limit ,
                            toString("budget_limit_day") as budget_limit_day ,
                            toString("created") as created ,
                            toString("date_end") as date_end ,
                            toString("date_start") as date_start ,
                            toString("id") as id ,
                            toString("max_price") as max_price ,
                            toString("name") as name ,
                            toString("objective") as objective ,
                            toString("priced_goal") as priced_goal ,
                            toString("pricelist_id") as pricelist_id ,
                            toString("status") as status ,
                            toString("updated") as updated ,
                            toString("vkads_status") as vkads_status ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_periodstat_default_ad_plans
        )

        )

  ...
[0m07:36:10.594984 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.596738 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics (execute): 2024-05-17 07:36:10.502762 => 2024-05-17 07:36:10.596660
[0m07:36:10.597558 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80bb610>]}
[0m07:36:10.598206 [info ] [Thread-2 (]: 35 of 90 OK created sql incremental model test.incremental_vkads_datestat_default_ad_plans_statistics  [[32mOK[0m in 0.14s]
[0m07:36:10.598872 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m07:36:10.599236 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m07:36:10.599669 [info ] [Thread-2 (]: 37 of 90 START sql incremental model test.incremental_yd_datestat_default_custom_report  [RUN]
[0m07:36:10.600903 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report'
[0m07:36:10.601214 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report)
[0m07:36:10.601382 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m07:36:10.606176 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_yd_datestat_default_custom_report')        
...
[0m07:36:10.607682 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.609115 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */
EXCHANGE TABLES test.incremental_vkads_periodstat_default_ad_plans__dbt_backup AND test.incremental_vkads_periodstat_default_ad_plans 
  
  ...
[0m07:36:10.612788 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.617513 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */
drop table if exists test.incremental_vkads_periodstat_default_ad_plans__dbt_backup 
  ...
[0m07:36:10.618429 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.623689 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'normalize_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.625229 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.628334 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans (execute): 2024-05-17 07:36:10.549261 => 2024-05-17 07:36:10.628239
[0m07:36:10.629810 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b617910>]}
[0m07:36:10.631247 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.630473 [info ] [Thread-1 (]: 36 of 90 OK created sql table model test.incremental_vkads_periodstat_default_ad_plans  [[32mOK[0m in 0.11s]
[0m07:36:10.634308 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"
[0m07:36:10.635010 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m07:36:10.636406 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m07:36:10.637373 [info ] [Thread-1 (]: 38 of 90 START sql incremental model test.incremental_ym_events_default_yandex_metrika_stream  [RUN]
[0m07:36:10.638310 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream'
[0m07:36:10.638651 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream)
[0m07:36:10.638901 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m07:36:10.643454 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_ym_events_default_yandex_metrika_stream')        
...
[0m07:36:10.644062 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report (compile): 2024-05-17 07:36:10.601479 => 2024-05-17 07:36:10.643900
[0m07:36:10.646695 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m07:36:10.653683 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

            

    
        create table test.incremental_yd_datestat_default_custom_report__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_yd_datestat_default_custom_report

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("AdId") as AdId ,
                            toString("CampaignId") as CampaignId ,
                            toString("CampaignName") as CampaignName ,
                            toString("CampaignType") as CampaignType ,
                            toString("Clicks") as Clicks ,
                            toString("Cost") as Cost ,
                            toString("Date") as Date ,
                            toString("Impressions") as Impressions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_yd_datestat_default_custom_report
        )

        )

    )
        ...
[0m07:36:10.655681 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.663731 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'normalize_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.669563 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.673571 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"
[0m07:36:10.674482 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.678813 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.680659 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream (compile): 2024-05-17 07:36:10.639074 => 2024-05-17 07:36:10.680447
[0m07:36:10.681206 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m07:36:10.687938 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

            

    
        create table test.incremental_ym_events_default_yandex_metrika_stream__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_ym_events_default_yandex_metrika_stream

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("ymsclientID") as ymsclientID ,
                            toString("ymsdateTime") as ymsdateTime ,
                            toString("ymsgoalsID") as ymsgoalsID ,
                            toString("ymsgoalsOrder") as ymsgoalsOrder ,
                            toString("ymslastAdvEngine") as ymslastAdvEngine ,
                            toString("ymslastReferalSource") as ymslastReferalSource ,
                            toString("ymslastSearchEngine") as ymslastSearchEngine ,
                            toString("ymslastTrafficSource") as ymslastTrafficSource ,
                            toString("ymspageViews") as ymspageViews ,
                            toString("ymsparsedParamsKey1") as ymsparsedParamsKey1 ,
                            toString("ymsparsedParamsKey2") as ymsparsedParamsKey2 ,
                            toString("ymspurchaseCoupon") as ymspurchaseCoupon ,
                            toString("ymspurchaseID") as ymspurchaseID ,
                            toString("ymspurchaseRevenue") as ymspurchaseRevenue ,
                            toString("ymsregionCity") as ymsregionCity ,
                            toString("ymsUTMCampaign") as ymsUTMCampaign ,
                            toString("ymsUTMContent") as ymsUTMContent ,
                            toString("ymsUTMMedium") as ymsUTMMedium ,
                            toString("ymsUTMSource") as ymsUTMSource ,
                            toString("ymsUTMTerm") as ymsUTMTerm ,
                            toString("ymsvisitID") as ymsvisitID ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_ym_events_default_yandex_metrika_stream
        )

        )

    )
        ...
[0m07:36:10.688901 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.692258 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"
[0m07:36:10.694031 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

        
  
    
    
        
        insert into test.incremental_yd_datestat_default_custom_report__dbt_tmp ("__date", "__clientName", "__productName", "AdId", "CampaignId", "CampaignName", "CampaignType", "Clicks", "Cost", "Date", "Impressions", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_yd_datestat_default_custom_report

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("AdId") as AdId ,
                            toString("CampaignId") as CampaignId ,
                            toString("CampaignName") as CampaignName ,
                            toString("CampaignType") as CampaignType ,
                            toString("Clicks") as Clicks ,
                            toString("Cost") as Cost ,
                            toString("Date") as Date ,
                            toString("Impressions") as Impressions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_yd_datestat_default_custom_report
        )

        )

  
    ...
[0m07:36:10.704341 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.708444 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    drop table if exists test.incremental_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m07:36:10.709534 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.714142 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.714919 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.717594 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    rename table test.incremental_yd_datestat_default_custom_report__dbt_tmp to test.incremental_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m07:36:10.721818 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.723265 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */
EXCHANGE TABLES test.incremental_yd_datestat_default_custom_report__dbt_backup AND test.incremental_yd_datestat_default_custom_report 
  
  ...
[0m07:36:10.723953 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.727197 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"
[0m07:36:10.728163 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.733191 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */
drop table if exists test.incremental_yd_datestat_default_custom_report__dbt_backup 
  ...
[0m07:36:10.734297 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

        
  
    
    
        
        insert into test.incremental_ym_events_default_yandex_metrika_stream__dbt_tmp ("__date", "__clientName", "__productName", "ymsclientID", "ymsdateTime", "ymsgoalsID", "ymsgoalsOrder", "ymslastAdvEngine", "ymslastReferalSource", "ymslastSearchEngine", "ymslastTrafficSource", "ymspageViews", "ymsparsedParamsKey1", "ymsparsedParamsKey2", "ymspurchaseCoupon", "ymspurchaseID", "ymspurchaseRevenue", "ymsregionCity", "ymsUTMCampaign", "ymsUTMContent", "ymsUTMMedium", "ymsUTMSource", "ymsUTMTerm", "ymsvisitID", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_ym_events_default_yandex_metrika_stream

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("ymsclientID") as ymsclientID ,
                            toString("ymsdateTime") as ymsdateTime ,
                            toString("ymsgoalsID") as ymsgoalsID ,
                            toString("ymsgoalsOrder") as ymsgoalsOrder ,
                            toString("ymslastAdvEngine") as ymslastAdvEngine ,
                            toString("ymslastReferalSource") as ymslastReferalSource ,
                            toString("ymslastSearchEngine") as ymslastSearchEngine ,
                            toString("ymslastTrafficSource") as ymslastTrafficSource ,
                            toString("ymspageViews") as ymspageViews ,
                            toString("ymsparsedParamsKey1") as ymsparsedParamsKey1 ,
                            toString("ymsparsedParamsKey2") as ymsparsedParamsKey2 ,
                            toString("ymspurchaseCoupon") as ymspurchaseCoupon ,
                            toString("ymspurchaseID") as ymspurchaseID ,
                            toString("ymspurchaseRevenue") as ymspurchaseRevenue ,
                            toString("ymsregionCity") as ymsregionCity ,
                            toString("ymsUTMCampaign") as ymsUTMCampaign ,
                            toString("ymsUTMContent") as ymsUTMContent ,
                            toString("ymsUTMMedium") as ymsUTMMedium ,
                            toString("ymsUTMSource") as ymsUTMSource ,
                            toString("ymsUTMTerm") as ymsUTMTerm ,
                            toString("ymsvisitID") as ymsvisitID ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_ym_events_default_yandex_metrika_stream
        )

        )

  
    ...
[0m07:36:10.737480 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.738859 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report (execute): 2024-05-17 07:36:10.647456 => 2024-05-17 07:36:10.738792
[0m07:36:10.739698 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80f5ea0>]}
[0m07:36:10.740242 [info ] [Thread-2 (]: 37 of 90 OK created sql incremental model test.incremental_yd_datestat_default_custom_report  [[32mOK[0m in 0.14s]
[0m07:36:10.740751 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m07:36:10.741197 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_appmetrica_events
[0m07:36:10.742296 [info ] [Thread-2 (]: 39 of 90 START sql incremental model test.join_appmetrica_events ............... [RUN]
[0m07:36:10.743726 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_appmetrica_events'
[0m07:36:10.743989 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_appmetrica_events)
[0m07:36:10.744160 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_appmetrica_events
[0m07:36:10.753777 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.757273 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    drop table if exists test.incremental_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m07:36:10.769811 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_appmetrica__%'
    GROUP BY table

...
[0m07:36:10.772337 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.773582 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    rename table test.incremental_ym_events_default_yandex_metrika_stream__dbt_tmp to test.incremental_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m07:36:10.777519 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.779128 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */
EXCHANGE TABLES test.incremental_ym_events_default_yandex_metrika_stream__dbt_backup AND test.incremental_ym_events_default_yandex_metrika_stream 
  
  ...
[0m07:36:10.780720 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.789171 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_appmetrica__%' AND 
        name='__date'

  ...
[0m07:36:10.790887 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.797322 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.797634 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */
drop table if exists test.incremental_ym_events_default_yandex_metrika_stream__dbt_backup 
  ...
[0m07:36:10.799534 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_appmetrica_events_default_deeplinks' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_deeplinks
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_events' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_events
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_installations' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_installations
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_screen_view' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_screen_view
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_sessions_starts' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_sessions_starts
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m07:36:10.804793 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.806246 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream (execute): 2024-05-17 07:36:10.681654 => 2024-05-17 07:36:10.806176
[0m07:36:10.806841 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81b5960>]}
[0m07:36:10.807190 [info ] [Thread-1 (]: 38 of 90 OK created sql incremental model test.incremental_ym_events_default_yandex_metrika_stream  [[32mOK[0m in 0.17s]
[0m07:36:10.807565 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m07:36:10.807945 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m07:36:10.808807 [info ] [Thread-1 (]: 40 of 90 START sql table model test.join_appmetrica_registry_appprofilematching  [RUN]
[0m07:36:10.809719 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching'
[0m07:36:10.810341 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching)
[0m07:36:10.811173 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m07:36:10.815933 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_appmetrica__%'
    GROUP BY table

...
[0m07:36:10.822837 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.827993 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_registry_[^_]+_profiles$')        
...
[0m07:36:10.835720 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.855867 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    select name, type from system.columns where table = 'incremental_appmetrica_registry_default_profiles'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.857435 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m07:36:10.872829 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.874209 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_deeplinks$')        
...
[0m07:36:10.882567 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"
[0m07:36:10.884547 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching (compile): 2024-05-17 07:36:10.811661 => 2024-05-17 07:36:10.884417
[0m07:36:10.884900 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m07:36:10.889785 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

            

    
        create table test.join_appmetrica_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_appmetrica_registry_default_profiles
SELECT
    appmetrica_device_id AS appmetricaDeviceId,
    profile_id AS crmUserId,
    city AS cityName,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    toLowCardinality('AppProfileMatching') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_registry_default_profiles' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_registry_default_profiles

            
        )

        )




    )
        ...
[0m07:36:10.890856 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.896157 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.900579 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:10.904478 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_events$')        
...
[0m07:36:10.907335 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:10.910686 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    select name, type from system.columns where table = 'join_appmetrica_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.912116 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.916295 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.917016 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.919176 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"
[0m07:36:10.920317 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

  
    
    
        
        insert into test.join_appmetrica_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_appmetrica_registry_default_profiles
SELECT
    appmetrica_device_id AS appmetricaDeviceId,
    profile_id AS crmUserId,
    city AS cityName,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    toLowCardinality('AppProfileMatching') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_registry_default_profiles' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_registry_default_profiles

            
        )

        )




  ...
[0m07:36:10.924303 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.927965 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_installations$')        
...
[0m07:36:10.928750 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.932092 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */
EXCHANGE TABLES test.join_appmetrica_registry_appprofilematching__dbt_backup AND test.join_appmetrica_registry_appprofilematching 
  
  ...
[0m07:36:10.934774 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:10.938351 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:10.939673 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.028591 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.09 seconds
[0m07:36:11.030955 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */
drop table if exists test.join_appmetrica_registry_appprofilematching__dbt_backup 
  ...
[0m07:36:11.035267 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_screen_view$')        
...
[0m07:36:11.040222 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.041640 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching (execute): 2024-05-17 07:36:10.885024 => 2024-05-17 07:36:11.041567
[0m07:36:11.042493 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8110940>]}
[0m07:36:11.043029 [info ] [Thread-1 (]: 40 of 90 OK created sql table model test.join_appmetrica_registry_appprofilematching  [[32mOK[0m in 0.23s]
[0m07:36:11.043915 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.044565 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m07:36:11.048121 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.048923 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_mt_datestat
[0m07:36:11.050822 [info ] [Thread-1 (]: 41 of 90 START sql incremental model test.join_mt_datestat ..................... [RUN]
[0m07:36:11.052515 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_mt_datestat'
[0m07:36:11.052864 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_mt_datestat)
[0m07:36:11.053132 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_mt_datestat
[0m07:36:11.057714 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_mt__%'
    GROUP BY table

...
[0m07:36:11.058777 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.063361 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_sessions_starts$')        
...
[0m07:36:11.067985 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.069826 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_mt__%' AND 
        name='__date'

  ...
[0m07:36:11.070908 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.077279 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.078176 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.082281 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_mt_datestat_default_banners_statistics' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_mt_datestat_default_banners_statistics
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m07:36:11.084133 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.091061 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_appmetrica_events"
[0m07:36:11.091890 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_events (compile): 2024-05-17 07:36:10.744257 => 2024-05-17 07:36:11.091727
[0m07:36:11.092463 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_appmetrica_events
[0m07:36:11.098262 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

            

    
        create table test.join_appmetrica_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_appmetrica_events_default_deeplinks
-- depends_on: test.incremental_appmetrica_events_default_events
-- depends_on: test.incremental_appmetrica_events_default_installations
-- depends_on: test.incremental_appmetrica_events_default_screen_view
-- depends_on: test.incremental_appmetrica_events_default_sessions_starts
WITH join_appmetrica_events_deeplinks AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime,
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode, --
    os_name AS osName,
    city AS cityName,
    assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, '')) AS adSourceDirty,
    extract(deeplink_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(deeplink_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(deeplink_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(deeplink_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(deeplink_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions, --
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppDeeplinkStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_deeplinks' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("deeplink_url_parameters" as String) as "deeplink_url_parameters" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_deeplinks

            
        )

        )
), union_events AS (
SELECT
    __emitted_at,
    splitByChar('_', __table_name)[6] AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    city AS cityName,
    event_name AS eventName,
    event_json AS eventJson,
    session_id AS sessionId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    JSONExtractString(event_json, 'transaction_id') AS transactionId,
    appmetrica_device_id AS appmetricaDeviceId,
    os_name AS osName,
    profile_id AS crmUserId,
    JSONExtractString(event_json, 'coupon') AS promoCode,    
    toDate(__date) AS __date, 
    toDateTime(event_receive_datetime) AS event_datetime, 
    0 AS screen_view
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_events' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("app_version_name" as String) as "app_version_name" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("event_json" as String) as "event_json" ,
                    cast("event_name" as String) as "event_name" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_events

            
        )

        )
)
, join_appmetrica_events_prepare AS (
SELECT 
    __date,
    toLowCardinality(__table_name) AS __table_name,
    event_datetime,
    toLowCardinality(accountName) AS accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId,   
    promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    transactionId,
    '' AS UtmHash,
    0 AS sessions,
    eventName = 'add_to_cart' AS addToCartSessions,
    eventName = 'view_cart' AS cartViewSessions,
    eventName = 'begin_checkout' AS checkoutSessions,
    eventName = 'purchase' AS webSalesSessions,
    eventName = 'purchase' AS sales,    
    assumeNotNull(coalesce(if(eventName = 'purchase', toFloat64(nullif(JSONExtractString(JSONExtractString(JSONExtractString(eventJson, 'value'), 'fiat'), 'value'), '')), 0), 0)) AS amountSales,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindVirtualCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS registrationCardSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'IntroRegistrationButtonClick' AND (JSONExtractString(eventJson, 'item_name') = 'AdventCalendar' or JSONExtractString(eventJson, 'item_name') = 'ScratchCards') as registrationButtonClick,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindPlasticCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CashbackButtonRegistration' AND  JSONExtractString(eventJson, 'item_name') = 'Cashback' AS registrationCashbackSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'ButtonActivate' AS instantDiscountActivationSessions,
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponDetailActivate' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR 
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Club') AS couponActivationSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'TakePartButton' AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link,
    JSONExtractString(eventJson, 'item_category') AS __itemCategory, 
    JSONExtractString(eventJson, 'item_name') AS __itemName,
    row_number() over() AS __rn,
    eventName AS __eventName, 
    sessionId AS __sessionId
FROM union_events
WHERE addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 OR registrationButtonClick > 0
  OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
  OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
  OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 
  OR couponActivationSessions > 0 OR participationInLotterySessions > 0 or screenView > 0
ORDER BY __date
)
, min_event AS (
SELECT MIN(__rn) AS __rn 
FROM join_appmetrica_events_prepare
GROUP BY appmetricaDeviceId, __sessionId, __eventName, __itemCategory, __itemName
), join_appmetrica_events_events AS (
SELECT * EXCEPT(__itemCategory, __itemName, __rn, __eventName, __sessionId)
FROM join_appmetrica_events_prepare
WHERE __rn IN (SELECT __rn FROM min_event) AND  
    (addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 
    OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
    OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
    OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 OR registrationButtonClick > 0
    OR couponActivationSessions > 0 OR participationInLotterySessions > 0)
), join_appmetrica_events_install AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(install_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    if(match(click_url_parameters, 'organic'), 'Органическая установка', assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, ''))) AS adSourceDirty,
    extract(click_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(click_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(click_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(click_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(click_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    is_reinstallation = 'false' AS installApp,
    1 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppInstallStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_installations' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("click_datetime" as String) as "click_datetime" ,
                    cast("click_url_parameters" as String) as "click_url_parameters" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("install_receive_datetime" as String) as "install_receive_datetime" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("is_reinstallation" as String) as "is_reinstallation" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_installations

            
        )

        )
), join_appmetrica_events_screen_view AS (
SELECT
    toDateTime(date_add(hour, 23, date_add(minute, 59, toDateTime(__date)))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime, 
    accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId, 
    '' AS promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,    
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    screen_view AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_screen_view' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("event_receive_datetime" as DateTime) as "event_receive_datetime" ,
                    cast("mobileAdsId" as String) as "mobileAdsId" ,
                    cast("accountName" as String) as "accountName" ,
                    cast("appmetricaDeviceId" as String) as "appmetricaDeviceId" ,
                    cast("cityName" as String) as "cityName" ,
                    cast("osName" as String) as "osName" ,
                    cast("crmUserId" as String) as "crmUserId" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("screen_view" as UInt64) as "screen_view" 

            from test.incremental_appmetrica_events_default_screen_view

            
        )

        )
), join_appmetrica_events_sessions_starts AS (
SELECT
    toDateTime(date_add(minute, 1, toDateTime(__date))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(session_start_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS UtmHash,
    1 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    CONCAT(installation_id, appmetrica_device_id) AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppSessionStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_sessions_starts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_start_receive_datetime" as String) as "session_start_receive_datetime" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_sessions_starts

            
        )

        )
)SELECT * 
FROM join_appmetrica_events_deeplinks
UNION ALL
SELECT * 
FROM join_appmetrica_events_events
UNION ALL
SELECT * 
FROM join_appmetrica_events_install
UNION ALL
SELECT * 
FROM join_appmetrica_events_screen_view
UNION ALL
SELECT * 
FROM join_appmetrica_events_sessions_starts





    )
        ...
[0m07:36:11.099921 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.109855 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_datestat_[^_]+_banners_statistics$')        
...
[0m07:36:11.116723 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.121588 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.126306 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.129286 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_registry_[^_]+_banners$')        
...
[0m07:36:11.135979 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.140115 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_banners'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.145101 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.148247 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_registry_[^_]+_campaigns$')        
...
[0m07:36:11.154369 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.158337 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_campaigns'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.162632 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.165368 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_mt_datestat"
[0m07:36:11.165889 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_mt_datestat (compile): 2024-05-17 07:36:11.053250 => 2024-05-17 07:36:11.165790
[0m07:36:11.166142 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_mt_datestat
[0m07:36:11.171889 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

            

    
        create table test.join_mt_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_mt_datestat_default_banners_statistics
-- depends_on: test.incremental_mt_registry_default_banners
-- depends_on: test.incremental_mt_registry_default_campaigns
WITH banners_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_datestat_default_banners_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("banner_id" as String) as "banner_id" ,
                    cast("base" as String) as "base" ,
                    cast("date" as String) as "date" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_datestat_default_banners_statistics

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-22' AND '2024-02-23'),

banners AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_banners' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("campaign_id" as String) as "campaign_id" ,
                    cast("id" as String) as "id" ,
                    cast("textblocks" as String) as "textblocks" ,
                    cast("urls" as String) as "urls" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_banners

            
        )

        )
),

campaigns AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_campaigns' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("id" as String) as "id" ,
                    cast("name" as String) as "name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_campaigns

            
        )

        )
)

SELECT 
    toDate(banners_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,  
    toLowCardinality(splitByChar('_', banners_statistics.__table_name)[6]) AS accountName,
    toLowCardinality(banners_statistics.__table_name) AS __table_name,
    'MyTarget' AS adSourceDirty,
    --'' AS productName,
    campaigns.name AS adCampaignName,
    --'' AS adGroupName,
    banners.id AS adId,
    --'' AS adPhraseId,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_source=([^&]*)') AS utmSource,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_medium=([^&]*)') AS utmMedium,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_term=([^&]*)') AS utmTerm,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_content=([^&]*)') AS utmContent,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(adCampaignName, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.title_25.text') AS adTitle1,
    --'' AS adTitle2,
    assumeNotNull(coalesce(nullif(JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_90.text'), ''),
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_220.text'), '')) AS adText,
    --'' AS adPhraseName,
    toFloat64(JSONExtractString(banners_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(banners_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(banners_statistics.base, 'clicks')) AS clicks,
    banners_statistics.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM banners_statistics
JOIN banners ON banners_statistics.banner_id = banners.id 
JOIN campaigns ON banners.campaign_id = campaigns.id






    )
        ...
[0m07:36:11.187934 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.09 seconds
[0m07:36:11.191452 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.197799 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.199795 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_appmetrica_events"
[0m07:36:11.200483 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

        
  
    
    
        
        insert into test.join_appmetrica_events__dbt_tmp ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link")
  -- depends_on: test.incremental_appmetrica_events_default_deeplinks
-- depends_on: test.incremental_appmetrica_events_default_events
-- depends_on: test.incremental_appmetrica_events_default_installations
-- depends_on: test.incremental_appmetrica_events_default_screen_view
-- depends_on: test.incremental_appmetrica_events_default_sessions_starts
WITH join_appmetrica_events_deeplinks AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime,
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode, --
    os_name AS osName,
    city AS cityName,
    assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, '')) AS adSourceDirty,
    extract(deeplink_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(deeplink_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(deeplink_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(deeplink_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(deeplink_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions, --
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppDeeplinkStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_deeplinks' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("deeplink_url_parameters" as String) as "deeplink_url_parameters" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_deeplinks

            
        )

        )
), union_events AS (
SELECT
    __emitted_at,
    splitByChar('_', __table_name)[6] AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    city AS cityName,
    event_name AS eventName,
    event_json AS eventJson,
    session_id AS sessionId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    JSONExtractString(event_json, 'transaction_id') AS transactionId,
    appmetrica_device_id AS appmetricaDeviceId,
    os_name AS osName,
    profile_id AS crmUserId,
    JSONExtractString(event_json, 'coupon') AS promoCode,    
    toDate(__date) AS __date, 
    toDateTime(event_receive_datetime) AS event_datetime, 
    0 AS screen_view
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_events' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("app_version_name" as String) as "app_version_name" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("event_json" as String) as "event_json" ,
                    cast("event_name" as String) as "event_name" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_events

            
        )

        )
)
, join_appmetrica_events_prepare AS (
SELECT 
    __date,
    toLowCardinality(__table_name) AS __table_name,
    event_datetime,
    toLowCardinality(accountName) AS accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId,   
    promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    transactionId,
    '' AS UtmHash,
    0 AS sessions,
    eventName = 'add_to_cart' AS addToCartSessions,
    eventName = 'view_cart' AS cartViewSessions,
    eventName = 'begin_checkout' AS checkoutSessions,
    eventName = 'purchase' AS webSalesSessions,
    eventName = 'purchase' AS sales,    
    assumeNotNull(coalesce(if(eventName = 'purchase', toFloat64(nullif(JSONExtractString(JSONExtractString(JSONExtractString(eventJson, 'value'), 'fiat'), 'value'), '')), 0), 0)) AS amountSales,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindVirtualCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS registrationCardSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'IntroRegistrationButtonClick' AND (JSONExtractString(eventJson, 'item_name') = 'AdventCalendar' or JSONExtractString(eventJson, 'item_name') = 'ScratchCards') as registrationButtonClick,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindPlasticCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CashbackButtonRegistration' AND  JSONExtractString(eventJson, 'item_name') = 'Cashback' AS registrationCashbackSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'ButtonActivate' AS instantDiscountActivationSessions,
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponDetailActivate' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR 
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Club') AS couponActivationSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'TakePartButton' AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link,
    JSONExtractString(eventJson, 'item_category') AS __itemCategory, 
    JSONExtractString(eventJson, 'item_name') AS __itemName,
    row_number() over() AS __rn,
    eventName AS __eventName, 
    sessionId AS __sessionId
FROM union_events
WHERE addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 OR registrationButtonClick > 0
  OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
  OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
  OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 
  OR couponActivationSessions > 0 OR participationInLotterySessions > 0 or screenView > 0
ORDER BY __date
)
, min_event AS (
SELECT MIN(__rn) AS __rn 
FROM join_appmetrica_events_prepare
GROUP BY appmetricaDeviceId, __sessionId, __eventName, __itemCategory, __itemName
), join_appmetrica_events_events AS (
SELECT * EXCEPT(__itemCategory, __itemName, __rn, __eventName, __sessionId)
FROM join_appmetrica_events_prepare
WHERE __rn IN (SELECT __rn FROM min_event) AND  
    (addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 
    OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
    OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
    OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 OR registrationButtonClick > 0
    OR couponActivationSessions > 0 OR participationInLotterySessions > 0)
), join_appmetrica_events_install AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(install_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    if(match(click_url_parameters, 'organic'), 'Органическая установка', assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, ''))) AS adSourceDirty,
    extract(click_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(click_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(click_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(click_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(click_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    is_reinstallation = 'false' AS installApp,
    1 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppInstallStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_installations' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("click_datetime" as String) as "click_datetime" ,
                    cast("click_url_parameters" as String) as "click_url_parameters" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("install_receive_datetime" as String) as "install_receive_datetime" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("is_reinstallation" as String) as "is_reinstallation" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_installations

            
        )

        )
), join_appmetrica_events_screen_view AS (
SELECT
    toDateTime(date_add(hour, 23, date_add(minute, 59, toDateTime(__date)))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime, 
    accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId, 
    '' AS promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,    
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    screen_view AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_screen_view' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("event_receive_datetime" as DateTime) as "event_receive_datetime" ,
                    cast("mobileAdsId" as String) as "mobileAdsId" ,
                    cast("accountName" as String) as "accountName" ,
                    cast("appmetricaDeviceId" as String) as "appmetricaDeviceId" ,
                    cast("cityName" as String) as "cityName" ,
                    cast("osName" as String) as "osName" ,
                    cast("crmUserId" as String) as "crmUserId" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("screen_view" as UInt64) as "screen_view" 

            from test.incremental_appmetrica_events_default_screen_view

            
        )

        )
), join_appmetrica_events_sessions_starts AS (
SELECT
    toDateTime(date_add(minute, 1, toDateTime(__date))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(session_start_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS UtmHash,
    1 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    CONCAT(installation_id, appmetrica_device_id) AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppSessionStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_sessions_starts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_start_receive_datetime" as String) as "session_start_receive_datetime" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_sessions_starts

            
        )

        )
)SELECT * 
FROM join_appmetrica_events_deeplinks
UNION ALL
SELECT * 
FROM join_appmetrica_events_events
UNION ALL
SELECT * 
FROM join_appmetrica_events_install
UNION ALL
SELECT * 
FROM join_appmetrica_events_screen_view
UNION ALL
SELECT * 
FROM join_appmetrica_events_sessions_starts





  
    ...
[0m07:36:11.203209 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:11.206133 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.213536 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.215539 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_mt_datestat"
[0m07:36:11.216083 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

        
  
    
    
        
        insert into test.join_mt_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_mt_datestat_default_banners_statistics
-- depends_on: test.incremental_mt_registry_default_banners
-- depends_on: test.incremental_mt_registry_default_campaigns
WITH banners_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_datestat_default_banners_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("banner_id" as String) as "banner_id" ,
                    cast("base" as String) as "base" ,
                    cast("date" as String) as "date" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_datestat_default_banners_statistics

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-22' AND '2024-02-23'),

banners AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_banners' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("campaign_id" as String) as "campaign_id" ,
                    cast("id" as String) as "id" ,
                    cast("textblocks" as String) as "textblocks" ,
                    cast("urls" as String) as "urls" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_banners

            
        )

        )
),

campaigns AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_campaigns' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("id" as String) as "id" ,
                    cast("name" as String) as "name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_campaigns

            
        )

        )
)

SELECT 
    toDate(banners_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,  
    toLowCardinality(splitByChar('_', banners_statistics.__table_name)[6]) AS accountName,
    toLowCardinality(banners_statistics.__table_name) AS __table_name,
    'MyTarget' AS adSourceDirty,
    --'' AS productName,
    campaigns.name AS adCampaignName,
    --'' AS adGroupName,
    banners.id AS adId,
    --'' AS adPhraseId,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_source=([^&]*)') AS utmSource,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_medium=([^&]*)') AS utmMedium,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_term=([^&]*)') AS utmTerm,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_content=([^&]*)') AS utmContent,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(adCampaignName, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.title_25.text') AS adTitle1,
    --'' AS adTitle2,
    assumeNotNull(coalesce(nullif(JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_90.text'), ''),
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_220.text'), '')) AS adText,
    --'' AS adPhraseName,
    toFloat64(JSONExtractString(banners_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(banners_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(banners_statistics.base, 'clicks')) AS clicks,
    banners_statistics.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM banners_statistics
JOIN banners ON banners_statistics.banner_id = banners.id 
JOIN campaigns ON banners.campaign_id = campaigns.id






  
    ...
[0m07:36:11.239676 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.243490 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    drop table if exists test.join_mt_datestat__dbt_backup 
  
  ...
[0m07:36:11.247427 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.248895 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    rename table test.join_mt_datestat__dbt_tmp to test.join_mt_datestat__dbt_backup 
  
  ...
[0m07:36:11.253246 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.254569 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */
EXCHANGE TABLES test.join_mt_datestat__dbt_backup AND test.join_mt_datestat 
  
  ...
[0m07:36:11.259298 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.264036 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */
drop table if exists test.join_mt_datestat__dbt_backup 
  ...
[0m07:36:11.267513 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.269046 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_mt_datestat (execute): 2024-05-17 07:36:11.166243 => 2024-05-17 07:36:11.268974
[0m07:36:11.269920 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8111480>]}
[0m07:36:11.270601 [info ] [Thread-1 (]: 41 of 90 OK created sql incremental model test.join_mt_datestat ................ [[32mOK[0m in 0.22s]
[0m07:36:11.271195 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_mt_datestat
[0m07:36:11.271577 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m07:36:11.271966 [info ] [Thread-1 (]: 42 of 90 START sql table model test.join_utmcraft_registry_utmhashregistry ..... [RUN]
[0m07:36:11.273107 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry'
[0m07:36:11.273368 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry)
[0m07:36:11.273547 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m07:36:11.277575 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_utmcraft__%'
    GROUP BY table

...
[0m07:36:11.283678 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.289004 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_utmcraft_registry_[^_]+_utmresult$')        
...
[0m07:36:11.295742 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.299609 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'incremental_utmcraft_registry_default_utmresult'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.304168 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.306894 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"
[0m07:36:11.307403 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry (compile): 2024-05-17 07:36:11.273642 => 2024-05-17 07:36:11.307310
[0m07:36:11.307692 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m07:36:11.313085 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

            

    
        create table test.join_utmcraft_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_utmcraft_registry_default_utmresult
SELECT
    utm_hashcode AS utmHash,
    JSONExtractString(data, '4') AS utm_base_url,
    JSONExtractString(data, '5') AS utm_utmSource,
    if(JSONExtractString(data, '6') = 'указать вручную', JSONExtractString(data, '95'), JSONExtractString(data, '6')) AS utm_utmMedium,
    JSONExtractString(data, '9') AS utm_utmCampaign,
    JSONExtractString(data, '97') AS utm_project,
    if(JSONExtractString(data, '7') = 'custom-value-input-field',JSONExtractString(data, 'custom-7'),JSONExtractString(data, '7')) AS utm_utmContent,
    JSONExtractString(data, '66') AS utm_strategy,
    concat(if(JSONExtractString(data, '69') = 'custom-value-input-field',JSONExtractString(data, 'custom-69'),JSONExtractString(data, '69')),
            if(JSONExtractString(data, '69') != '' or JSONExtractString(data, 'custom-69') != '', ';', ''),
           if(JSONExtractString(data, '88') = 'custom-value-input-field',JSONExtractString(data, 'custom-88'),JSONExtractString(data, '88')),
           if(JSONExtractString(data, '88') != '' or JSONExtractString(data, 'custom-88') != '', ';', ''),
           if(JSONExtractString(data, '87') = 'custom-value-input-field',JSONExtractString(data, 'custom-87'),JSONExtractString(data, '87')),
           if(JSONExtractString(data, '87') != '' or JSONExtractString(data, 'custom-87') != '', ';', ''),
           if(JSONExtractString(data, '89') = 'custom-value-input-field',JSONExtractString(data, 'custom-89'),JSONExtractString(data, '89')),
           if(JSONExtractString(data, '89') != '' or JSONExtractString(data, 'custom-89') != '', ';', ''),
           if(JSONExtractString(data, '90') = 'custom-value-input-field',JSONExtractString(data, 'custom-90'),JSONExtractString(data, '90')),
           if(JSONExtractString(data, '90') != '' or JSONExtractString(data, 'custom-90') != '', ';', ''),
           if(JSONExtractString(data, '91') = 'custom-value-input-field',JSONExtractString(data, 'custom-91'),JSONExtractString(data, '91')),
           if(JSONExtractString(data, '91') != '' or JSONExtractString(data, 'custom-91') != '', ';', ''),
           if(JSONExtractString(data, '93') = 'custom-value-input-field',JSONExtractString(data, 'custom-93'),JSONExtractString(data, '93')),
           if(JSONExtractString(data, '93') != '' or JSONExtractString(data, 'custom-93') != '', ';', ''),
           if(JSONExtractString(data, '85') = 'custom-value-input-field',JSONExtractString(data, 'custom-85'),JSONExtractString(data, '85')),
           if(JSONExtractString(data, '85') != '' or JSONExtractString(data, 'custom-85') != '', ';', ''),
           if(JSONExtractString(data, '92') = 'custom-value-input-field',JSONExtractString(data, 'custom-92'),JSONExtractString(data, '92')),
           if(JSONExtractString(data, '92') != '' or JSONExtractString(data, 'custom-92') != '', ';', ''),
           if(JSONExtractString(data, '86') = 'custom-value-input-field',JSONExtractString(data, 'custom-86'),JSONExtractString(data, '86'))) AS utm_audience,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    'UtmHashRegistry' AS __link         
FROM (
    

        (
            select
                cast('test.incremental_utmcraft_registry_default_utmresult' as String) as _dbt_source_relation,

                
                    cast("created_at" as String) as "created_at" ,
                    cast("created_by_id" as String) as "created_by_id" ,
                    cast("data" as String) as "data" ,
                    cast("form_id" as String) as "form_id" ,
                    cast("id" as String) as "id" ,
                    cast("updated_at" as String) as "updated_at" ,
                    cast("updated_by_id" as String) as "updated_by_id" ,
                    cast("utm_hashcode" as String) as "utm_hashcode" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_utmcraft_registry_default_utmresult

            
        )

        )





    )
        ...
[0m07:36:11.333587 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.338131 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'join_utmcraft_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.343372 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.345076 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"
[0m07:36:11.345657 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

  
    
    
        
        insert into test.join_utmcraft_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_utmcraft_registry_default_utmresult
SELECT
    utm_hashcode AS utmHash,
    JSONExtractString(data, '4') AS utm_base_url,
    JSONExtractString(data, '5') AS utm_utmSource,
    if(JSONExtractString(data, '6') = 'указать вручную', JSONExtractString(data, '95'), JSONExtractString(data, '6')) AS utm_utmMedium,
    JSONExtractString(data, '9') AS utm_utmCampaign,
    JSONExtractString(data, '97') AS utm_project,
    if(JSONExtractString(data, '7') = 'custom-value-input-field',JSONExtractString(data, 'custom-7'),JSONExtractString(data, '7')) AS utm_utmContent,
    JSONExtractString(data, '66') AS utm_strategy,
    concat(if(JSONExtractString(data, '69') = 'custom-value-input-field',JSONExtractString(data, 'custom-69'),JSONExtractString(data, '69')),
            if(JSONExtractString(data, '69') != '' or JSONExtractString(data, 'custom-69') != '', ';', ''),
           if(JSONExtractString(data, '88') = 'custom-value-input-field',JSONExtractString(data, 'custom-88'),JSONExtractString(data, '88')),
           if(JSONExtractString(data, '88') != '' or JSONExtractString(data, 'custom-88') != '', ';', ''),
           if(JSONExtractString(data, '87') = 'custom-value-input-field',JSONExtractString(data, 'custom-87'),JSONExtractString(data, '87')),
           if(JSONExtractString(data, '87') != '' or JSONExtractString(data, 'custom-87') != '', ';', ''),
           if(JSONExtractString(data, '89') = 'custom-value-input-field',JSONExtractString(data, 'custom-89'),JSONExtractString(data, '89')),
           if(JSONExtractString(data, '89') != '' or JSONExtractString(data, 'custom-89') != '', ';', ''),
           if(JSONExtractString(data, '90') = 'custom-value-input-field',JSONExtractString(data, 'custom-90'),JSONExtractString(data, '90')),
           if(JSONExtractString(data, '90') != '' or JSONExtractString(data, 'custom-90') != '', ';', ''),
           if(JSONExtractString(data, '91') = 'custom-value-input-field',JSONExtractString(data, 'custom-91'),JSONExtractString(data, '91')),
           if(JSONExtractString(data, '91') != '' or JSONExtractString(data, 'custom-91') != '', ';', ''),
           if(JSONExtractString(data, '93') = 'custom-value-input-field',JSONExtractString(data, 'custom-93'),JSONExtractString(data, '93')),
           if(JSONExtractString(data, '93') != '' or JSONExtractString(data, 'custom-93') != '', ';', ''),
           if(JSONExtractString(data, '85') = 'custom-value-input-field',JSONExtractString(data, 'custom-85'),JSONExtractString(data, '85')),
           if(JSONExtractString(data, '85') != '' or JSONExtractString(data, 'custom-85') != '', ';', ''),
           if(JSONExtractString(data, '92') = 'custom-value-input-field',JSONExtractString(data, 'custom-92'),JSONExtractString(data, '92')),
           if(JSONExtractString(data, '92') != '' or JSONExtractString(data, 'custom-92') != '', ';', ''),
           if(JSONExtractString(data, '86') = 'custom-value-input-field',JSONExtractString(data, 'custom-86'),JSONExtractString(data, '86'))) AS utm_audience,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    'UtmHashRegistry' AS __link         
FROM (
    

        (
            select
                cast('test.incremental_utmcraft_registry_default_utmresult' as String) as _dbt_source_relation,

                
                    cast("created_at" as String) as "created_at" ,
                    cast("created_by_id" as String) as "created_by_id" ,
                    cast("data" as String) as "data" ,
                    cast("form_id" as String) as "form_id" ,
                    cast("id" as String) as "id" ,
                    cast("updated_at" as String) as "updated_at" ,
                    cast("updated_by_id" as String) as "updated_by_id" ,
                    cast("utm_hashcode" as String) as "utm_hashcode" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_utmcraft_registry_default_utmresult

            
        )

        )





  ...
[0m07:36:11.358778 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.361318 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */
EXCHANGE TABLES test.join_utmcraft_registry_utmhashregistry__dbt_backup AND test.join_utmcraft_registry_utmhashregistry 
  
  ...
[0m07:36:11.365587 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.370570 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */
drop table if exists test.join_utmcraft_registry_utmhashregistry__dbt_backup 
  ...
[0m07:36:11.371309 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.17 seconds
[0m07:36:11.375910 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    drop table if exists test.join_appmetrica_events__dbt_backup 
  
  ...
[0m07:36:11.376827 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.379045 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry (execute): 2024-05-17 07:36:11.307805 => 2024-05-17 07:36:11.378974
[0m07:36:11.379770 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9bc6920>]}
[0m07:36:11.380320 [info ] [Thread-1 (]: 42 of 90 OK created sql table model test.join_utmcraft_registry_utmhashregistry  [[32mOK[0m in 0.11s]
[0m07:36:11.381048 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m07:36:11.382318 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_sheets_periodstat
[0m07:36:11.383588 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.382951 [info ] [Thread-1 (]: 43 of 90 START sql incremental model test.join_sheets_periodstat ............... [RUN]
[0m07:36:11.385438 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    rename table test.join_appmetrica_events__dbt_tmp to test.join_appmetrica_events__dbt_backup 
  
  ...
[0m07:36:11.386229 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_sheets_periodstat'
[0m07:36:11.388055 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_sheets_periodstat)
[0m07:36:11.388413 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_sheets_periodstat
[0m07:36:11.392077 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_sheets__%'
    GROUP BY table

...
[0m07:36:11.394742 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.396258 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */
EXCHANGE TABLES test.join_appmetrica_events__dbt_backup AND test.join_appmetrica_events 
  
  ...
[0m07:36:11.397529 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.400892 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_sheets__%' AND 
        name='__date'

  ...
[0m07:36:11.403525 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.409070 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */
drop table if exists test.join_appmetrica_events__dbt_backup 
  ...
[0m07:36:11.411180 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.414195 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_sheets_periodstat_default_planCosts' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_sheets_periodstat_default_planCosts
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m07:36:11.415117 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.417804 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_events (execute): 2024-05-17 07:36:11.092647 => 2024-05-17 07:36:11.417730
[0m07:36:11.418799 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9b89780>]}
[0m07:36:11.419527 [info ] [Thread-2 (]: 39 of 90 OK created sql incremental model test.join_appmetrica_events .......... [[32mOK[0m in 0.68s]
[0m07:36:11.420442 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_appmetrica_events
[0m07:36:11.421196 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_vkads_datestat
[0m07:36:11.422203 [info ] [Thread-2 (]: 44 of 90 START sql incremental model test.join_vkads_datestat .................. [RUN]
[0m07:36:11.423017 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_vkads_datestat'
[0m07:36:11.423240 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_vkads_datestat)
[0m07:36:11.423475 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_vkads_datestat
[0m07:36:11.428652 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_vkads__%'
    GROUP BY table

...
[0m07:36:11.430289 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.440002 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_sheets_periodstat_[^_]+_planCosts$')        
...
[0m07:36:11.442296 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.444669 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_vkads__%' AND 
        name='__date'

  ...
[0m07:36:11.450473 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.452515 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_vkads_datestat_default_ad_plans_statistics' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_vkads_datestat_default_ad_plans_statistics
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m07:36:11.454079 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.458435 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.464916 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.467891 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_sheets_periodstat"
[0m07:36:11.468459 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_sheets_periodstat (compile): 2024-05-17 07:36:11.388567 => 2024-05-17 07:36:11.468338
[0m07:36:11.468786 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_sheets_periodstat
[0m07:36:11.474807 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

            

    
        create table test.join_sheets_periodstat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_sheets_periodstat_default_planCosts
SELECT
    __date,
    Campaign AS campaign,
    toFloat64(Cost) AS cost,
    toDate(Period_start) AS periodStart,
    toDate(Period_end) AS periodEnd,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name, 
    toLowCardinality('ManualAdCostStat') AS __link

FROM (
    

        (
            select
                cast('test.incremental_sheets_periodstat_default_planCosts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("Campaign" as String) as "Campaign" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Period_end" as String) as "Period_end" ,
                    cast("Period_start" as String) as "Period_start" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_sheets_periodstat_default_planCosts

            
        )

        )




    )
        ...
[0m07:36:11.476998 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.486385 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_vkads_datestat_[^_]+_ad_plans_statistics$')        
...
[0m07:36:11.494780 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.498425 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.499364 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.503689 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.508131 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.509277 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.511520 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_sheets_periodstat"
[0m07:36:11.515735 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_vkads_periodstat_[^_]+_ad_plans$')        
...
[0m07:36:11.516688 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

        
  
    
    
        
        insert into test.join_sheets_periodstat__dbt_tmp ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_sheets_periodstat_default_planCosts
SELECT
    __date,
    Campaign AS campaign,
    toFloat64(Cost) AS cost,
    toDate(Period_start) AS periodStart,
    toDate(Period_end) AS periodEnd,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name, 
    toLowCardinality('ManualAdCostStat') AS __link

FROM (
    

        (
            select
                cast('test.incremental_sheets_periodstat_default_planCosts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("Campaign" as String) as "Campaign" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Period_end" as String) as "Period_end" ,
                    cast("Period_start" as String) as "Period_start" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_sheets_periodstat_default_planCosts

            
        )

        )




  
    ...
[0m07:36:11.524527 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.529271 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'incremental_vkads_periodstat_default_ad_plans'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.530983 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.537581 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    drop table if exists test.join_sheets_periodstat__dbt_backup 
  
  ...
[0m07:36:11.539214 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.542974 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_vkads_datestat"
[0m07:36:11.544085 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.545968 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    rename table test.join_sheets_periodstat__dbt_tmp to test.join_sheets_periodstat__dbt_backup 
  
  ...
[0m07:36:11.547204 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_vkads_datestat (compile): 2024-05-17 07:36:11.423603 => 2024-05-17 07:36:11.547022
[0m07:36:11.548268 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_vkads_datestat
[0m07:36:11.555691 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

            

    
        create table test.join_vkads_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_vkads_datestat_default_ad_plans_statistics
-- depends_on: test.incremental_vkads_periodstat_default_ad_plans
WITH ad_plans_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_datestat_default_ad_plans_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("ad_offers" as String) as "ad_offers" ,
                    cast("ad_plan_id" as String) as "ad_plan_id" ,
                    cast("base" as String) as "base" ,
                    cast("carousel" as String) as "carousel" ,
                    cast("date" as String) as "date" ,
                    cast("events" as String) as "events" ,
                    cast("moat" as String) as "moat" ,
                    cast("playable" as String) as "playable" ,
                    cast("romi" as String) as "romi" ,
                    cast("social_network" as String) as "social_network" ,
                    cast("tps" as String) as "tps" ,
                    cast("uniques" as String) as "uniques" ,
                    cast("uniques_video" as String) as "uniques_video" ,
                    cast("video" as String) as "video" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_datestat_default_ad_plans_statistics

            
        )

        ) 
WHERE toDate(__date) between '2024-02-26' and '2024-03-02'),

ad_plans AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_periodstat_default_ad_plans' as String) as _dbt_source_relation,

                
                    cast("ad_groups" as String) as "ad_groups" ,
                    cast("autobidding_mode" as String) as "autobidding_mode" ,
                    cast("budget_limit" as String) as "budget_limit" ,
                    cast("budget_limit_day" as String) as "budget_limit_day" ,
                    cast("created" as String) as "created" ,
                    cast("date_end" as String) as "date_end" ,
                    cast("date_start" as String) as "date_start" ,
                    cast("id" as String) as "id" ,
                    cast("max_price" as String) as "max_price" ,
                    cast("name" as String) as "name" ,
                    cast("objective" as String) as "objective" ,
                    cast("priced_goal" as String) as "priced_goal" ,
                    cast("pricelist_id" as String) as "pricelist_id" ,
                    cast("status" as String) as "status" ,
                    cast("updated" as String) as "updated" ,
                    cast("vkads_status" as String) as "vkads_status" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_periodstat_default_ad_plans

            
        )

        )
)

SELECT
    toDate(ad_plans_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,
    toLowCardinality(splitByChar('_', ad_plans.__table_name)[6]) AS accountName,
    toLowCardinality(ad_plans.__table_name) AS __table_name,
    'VK Ads' AS adSourceDirty,
    ad_plans.name AS adCampaignName,
    ad_plans.id AS adId,
    toFloat64(JSONExtractString(ad_plans_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'clicks')) AS clicks,
    ad_plans.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM ad_plans
JOIN ad_plans_statistics ON ad_plans.id = ad_plans_statistics.ad_plan_id






    )
        ...
[0m07:36:11.556785 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.560146 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */
EXCHANGE TABLES test.join_sheets_periodstat__dbt_backup AND test.join_sheets_periodstat 
  
  ...
[0m07:36:11.564716 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.569771 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */
drop table if exists test.join_sheets_periodstat__dbt_backup 
  ...
[0m07:36:11.573933 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.575778 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_sheets_periodstat (execute): 2024-05-17 07:36:11.468910 => 2024-05-17 07:36:11.575683
[0m07:36:11.576751 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9bdc4c0>]}
[0m07:36:11.577551 [info ] [Thread-1 (]: 43 of 90 OK created sql incremental model test.join_sheets_periodstat .......... [[32mOK[0m in 0.19s]
[0m07:36:11.578289 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_sheets_periodstat
[0m07:36:11.578794 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_yd_datestat
[0m07:36:11.579821 [info ] [Thread-1 (]: 45 of 90 START sql incremental model test.join_yd_datestat ..................... [RUN]
[0m07:36:11.580804 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_yd_datestat'
[0m07:36:11.581287 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_yd_datestat)
[0m07:36:11.581527 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_yd_datestat
[0m07:36:11.586216 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_yd__%'
    GROUP BY table

...
[0m07:36:11.587377 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:11.594482 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.595746 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.599469 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_yd__%' AND 
        name='__date'

  ...
[0m07:36:11.601797 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.603639 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_vkads_datestat"
[0m07:36:11.604724 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.605445 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

        
  
    
    
        
        insert into test.join_vkads_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_vkads_datestat_default_ad_plans_statistics
-- depends_on: test.incremental_vkads_periodstat_default_ad_plans
WITH ad_plans_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_datestat_default_ad_plans_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("ad_offers" as String) as "ad_offers" ,
                    cast("ad_plan_id" as String) as "ad_plan_id" ,
                    cast("base" as String) as "base" ,
                    cast("carousel" as String) as "carousel" ,
                    cast("date" as String) as "date" ,
                    cast("events" as String) as "events" ,
                    cast("moat" as String) as "moat" ,
                    cast("playable" as String) as "playable" ,
                    cast("romi" as String) as "romi" ,
                    cast("social_network" as String) as "social_network" ,
                    cast("tps" as String) as "tps" ,
                    cast("uniques" as String) as "uniques" ,
                    cast("uniques_video" as String) as "uniques_video" ,
                    cast("video" as String) as "video" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_datestat_default_ad_plans_statistics

            
        )

        ) 
WHERE toDate(__date) between '2024-02-26' and '2024-03-02'),

ad_plans AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_periodstat_default_ad_plans' as String) as _dbt_source_relation,

                
                    cast("ad_groups" as String) as "ad_groups" ,
                    cast("autobidding_mode" as String) as "autobidding_mode" ,
                    cast("budget_limit" as String) as "budget_limit" ,
                    cast("budget_limit_day" as String) as "budget_limit_day" ,
                    cast("created" as String) as "created" ,
                    cast("date_end" as String) as "date_end" ,
                    cast("date_start" as String) as "date_start" ,
                    cast("id" as String) as "id" ,
                    cast("max_price" as String) as "max_price" ,
                    cast("name" as String) as "name" ,
                    cast("objective" as String) as "objective" ,
                    cast("priced_goal" as String) as "priced_goal" ,
                    cast("pricelist_id" as String) as "pricelist_id" ,
                    cast("status" as String) as "status" ,
                    cast("updated" as String) as "updated" ,
                    cast("vkads_status" as String) as "vkads_status" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_periodstat_default_ad_plans

            
        )

        )
)

SELECT
    toDate(ad_plans_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,
    toLowCardinality(splitByChar('_', ad_plans.__table_name)[6]) AS accountName,
    toLowCardinality(ad_plans.__table_name) AS __table_name,
    'VK Ads' AS adSourceDirty,
    ad_plans.name AS adCampaignName,
    ad_plans.id AS adId,
    toFloat64(JSONExtractString(ad_plans_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'clicks')) AS clicks,
    ad_plans.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM ad_plans
JOIN ad_plans_statistics ON ad_plans.id = ad_plans_statistics.ad_plan_id






  
    ...
[0m07:36:11.607469 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_yd_datestat_default_custom_report' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_yd_datestat_default_custom_report
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m07:36:11.622490 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.629378 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_yd_datestat_[^_]+')        
...
[0m07:36:11.631725 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.638312 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.639665 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    drop table if exists test.join_vkads_datestat__dbt_backup 
  
  ...
[0m07:36:11.644982 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.649429 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.650728 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    rename table test.join_vkads_datestat__dbt_tmp to test.join_vkads_datestat__dbt_backup 
  
  ...
[0m07:36:11.652714 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.655552 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_yd_datestat"
[0m07:36:11.656259 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.658013 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */
EXCHANGE TABLES test.join_vkads_datestat__dbt_backup AND test.join_vkads_datestat 
  
  ...
[0m07:36:11.659845 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_yd_datestat (compile): 2024-05-17 07:36:11.581633 => 2024-05-17 07:36:11.659608
[0m07:36:11.660769 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_yd_datestat
[0m07:36:11.667536 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.669250 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

            

    
        create table test.join_yd_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_yd_datestat_default_custom_report
WITH cmps AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_yd_datestat_default_custom_report' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("AdId" as String) as "AdId" ,
                    cast("CampaignId" as String) as "CampaignId" ,
                    cast("CampaignName" as String) as "CampaignName" ,
                    cast("CampaignType" as String) as "CampaignType" ,
                    cast("Clicks" as String) as "Clicks" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Date" as String) as "Date" ,
                    cast("Impressions" as String) as "Impressions" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_yd_datestat_default_custom_report

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-15' AND '2024-02-28')

SELECT  
    toDate(__date) AS __date,
    toLowCardinality('*') AS reportType, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    'Yandex Direct Ads' AS adSourceDirty,
    --'' AS productName,
    CampaignName AS adCampaignName,
    CampaignType AS adGroupName,
    CampaignId AS adId,
    '' AS adPhraseId,
    --'' AS utmSource,
    --'' AS utmMedium,
    --'' AS utmCampaign,
    --'' AS utmTerm,
    --'' AS utmContent,
    arrayElement(splitByChar('~', CampaignName), 2) AS utmHash,
    --'' AS adTitle1,
    --'' AS adTitle2,
    --'' AS adText,
    --'' AS adPhraseName,  
    (toFloat64(Cost)/1000000)*1.2 AS adCost,
    toInt32(Impressions) AS impressions,
    toInt32(Clicks) AS clicks,
    __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM cmps





    )
        ...
[0m07:36:11.674231 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */
drop table if exists test.join_vkads_datestat__dbt_backup 
  ...
[0m07:36:11.680002 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.682110 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_vkads_datestat (execute): 2024-05-17 07:36:11.548672 => 2024-05-17 07:36:11.681964
[0m07:36:11.682772 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcebd755240>]}
[0m07:36:11.683185 [info ] [Thread-2 (]: 44 of 90 OK created sql incremental model test.join_vkads_datestat ............. [[32mOK[0m in 0.26s]
[0m07:36:11.683563 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_vkads_datestat
[0m07:36:11.683862 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_ym_events
[0m07:36:11.684211 [info ] [Thread-2 (]: 46 of 90 START sql incremental model test.join_ym_events ....................... [RUN]
[0m07:36:11.685697 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_ym_events'
[0m07:36:11.686040 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_ym_events)
[0m07:36:11.686231 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_ym_events
[0m07:36:11.690557 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_ym__%'
    GROUP BY table

...
[0m07:36:11.697030 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.699783 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.700637 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.703552 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_ym__%' AND 
        name='__date'

  ...
[0m07:36:11.708583 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.710696 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_ym_events_default_yandex_metrika_stream' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_ym_events_default_yandex_metrika_stream
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m07:36:11.711799 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.715679 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_yd_datestat"
[0m07:36:11.716755 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

        
  
    
    
        
        insert into test.join_yd_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adGroupName", "adId", "adPhraseId", "utmHash", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_yd_datestat_default_custom_report
WITH cmps AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_yd_datestat_default_custom_report' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("AdId" as String) as "AdId" ,
                    cast("CampaignId" as String) as "CampaignId" ,
                    cast("CampaignName" as String) as "CampaignName" ,
                    cast("CampaignType" as String) as "CampaignType" ,
                    cast("Clicks" as String) as "Clicks" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Date" as String) as "Date" ,
                    cast("Impressions" as String) as "Impressions" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_yd_datestat_default_custom_report

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-15' AND '2024-02-28')

SELECT  
    toDate(__date) AS __date,
    toLowCardinality('*') AS reportType, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    'Yandex Direct Ads' AS adSourceDirty,
    --'' AS productName,
    CampaignName AS adCampaignName,
    CampaignType AS adGroupName,
    CampaignId AS adId,
    '' AS adPhraseId,
    --'' AS utmSource,
    --'' AS utmMedium,
    --'' AS utmCampaign,
    --'' AS utmTerm,
    --'' AS utmContent,
    arrayElement(splitByChar('~', CampaignName), 2) AS utmHash,
    --'' AS adTitle1,
    --'' AS adTitle2,
    --'' AS adText,
    --'' AS adPhraseName,  
    (toFloat64(Cost)/1000000)*1.2 AS adCost,
    toInt32(Impressions) AS impressions,
    toInt32(Clicks) AS clicks,
    __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM cmps





  
    ...
[0m07:36:11.724288 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.734215 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_ym_events_[^_]+_yandex_metrika_stream$')        
...
[0m07:36:11.735393 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.745437 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    drop table if exists test.join_yd_datestat__dbt_backup 
  
  ...
[0m07:36:11.746666 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.752981 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.754541 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.756059 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    rename table test.join_yd_datestat__dbt_tmp to test.join_yd_datestat__dbt_backup 
  
  ...
[0m07:36:11.761098 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.763130 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */
EXCHANGE TABLES test.join_yd_datestat__dbt_backup AND test.join_yd_datestat 
  
  ...
[0m07:36:11.764204 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.769705 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_ym_events"
[0m07:36:11.770594 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.776321 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */
drop table if exists test.join_yd_datestat__dbt_backup 
  ...
[0m07:36:11.777814 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_ym_events (compile): 2024-05-17 07:36:11.686344 => 2024-05-17 07:36:11.777559
[0m07:36:11.778680 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_ym_events
[0m07:36:11.783982 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

            

    
        create table test.join_ym_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_ym_events_default_yandex_metrika_stream
WITH events AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_ym_events_default_yandex_metrika_stream' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("ymsclientID" as String) as "ymsclientID" ,
                    cast("ymsdateTime" as String) as "ymsdateTime" ,
                    cast("ymsgoalsID" as String) as "ymsgoalsID" ,
                    cast("ymsgoalsOrder" as String) as "ymsgoalsOrder" ,
                    cast("ymslastAdvEngine" as String) as "ymslastAdvEngine" ,
                    cast("ymslastReferalSource" as String) as "ymslastReferalSource" ,
                    cast("ymslastSearchEngine" as String) as "ymslastSearchEngine" ,
                    cast("ymslastTrafficSource" as String) as "ymslastTrafficSource" ,
                    cast("ymspageViews" as String) as "ymspageViews" ,
                    cast("ymsparsedParamsKey1" as String) as "ymsparsedParamsKey1" ,
                    cast("ymsparsedParamsKey2" as String) as "ymsparsedParamsKey2" ,
                    cast("ymspurchaseCoupon" as String) as "ymspurchaseCoupon" ,
                    cast("ymspurchaseID" as String) as "ymspurchaseID" ,
                    cast("ymspurchaseRevenue" as String) as "ymspurchaseRevenue" ,
                    cast("ymsregionCity" as String) as "ymsregionCity" ,
                    cast("ymsUTMCampaign" as String) as "ymsUTMCampaign" ,
                    cast("ymsUTMContent" as String) as "ymsUTMContent" ,
                    cast("ymsUTMMedium" as String) as "ymsUTMMedium" ,
                    cast("ymsUTMSource" as String) as "ymsUTMSource" ,
                    cast("ymsUTMTerm" as String) as "ymsUTMTerm" ,
                    cast("ymsvisitID" as String) as "ymsvisitID" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_ym_events_default_yandex_metrika_stream

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-16' AND '2024-02-29')

SELECT  
    __date, 
    __table_name,  
    ymsvisitID As visitId,
    ymsclientID AS clientId,
    extract(ymspurchaseCoupon, '\'([^\'\[\],]+)') AS promoCode,   
    'web' AS osName,
    ymsregionCity AS cityName,
    lower(ymsregionCity) AS cityCode,
    assumeNotNull(coalesce(lower(if(length(ymsUTMSource) > 0, concat(ymsUTMSource, ' / ', ymsUTMMedium), null)), 
    multiIf(ymslastTrafficSource = 'ad', lower(if(length(ymslastAdvEngine) > 0, concat(ymslastAdvEngine, ' / ', ymslastTrafficSource), null)),  
    ymslastTrafficSource = 'organic', lower(if(length(ymslastSearchEngine) > 0, concat(ymslastSearchEngine, ' / ', ymslastTrafficSource), null)),  
    lower(if(length(ymslastReferalSource) > 0, concat(ymslastReferalSource, ' / ', ymslastTrafficSource), null))), '')) AS adSourceDirty, 
    ymsUTMSource AS utmSource,
    ymsUTMMedium AS utmMedium,
    ymsUTMCampaign AS utmCampaign,
    ymsUTMTerm AS utmTerm,
    ymsUTMContent AS utmContent,
    ymspurchaseID AS transactionId,
    greatest(coalesce(extract(ymsUTMCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(ymsUTMContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    1 AS sessions,
    if(countSubstrings(ymsgoalsID, '131126368')>0,1,0) AS addToCartSessions, 
    if(countSubstrings(ymsgoalsID, '229829884')>0,1,0) AS cartViewSessions, 
    if(countSubstrings(ymsgoalsID, '131126557')>0,1,0) AS checkoutSessions, 
    if(countSubstrings(ymsgoalsID, '131127241')>0,1,0) AS webSalesSessions, 
    countSubstrings(ymsgoalsID, '131127241') AS sales, 
    --0.0 AS amountSales,
    if(countSubstrings(ymsgoalsID, '199402504')>0,1,0) AS registrationCardSessions,
    if(countSubstrings(ymsgoalsID, '199402597')>0,1,0) AS linkingCardToPhoneNumberSessions, 
    if(countSubstrings(ymsgoalsID, '226410025')>0,1,0) AS registrationLendingPromotionsSessions, 
    if(countSubstrings(ymsgoalsID, '232977064')>0,1,0) AS registrationCashbackSessions, 
    if(countSubstrings(ymsgoalsID, '232977580')>0,1,0) AS couponActivationSessions, 
    if(countSubstrings(ymsgoalsID, '232977647')>0,1,0) AS participationInLotterySessions,
    toUInt32(ymspageViews) AS pageViews,
    __emitted_at,
    toLowCardinality('VisitStat') AS __link 

FROM events





    )
        ...
[0m07:36:11.784846 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.787707 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_yd_datestat (execute): 2024-05-17 07:36:11.661231 => 2024-05-17 07:36:11.787615
[0m07:36:11.788751 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8113b50>]}
[0m07:36:11.789821 [info ] [Thread-1 (]: 45 of 90 OK created sql incremental model test.join_yd_datestat ................ [[32mOK[0m in 0.21s]
[0m07:36:11.790445 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_yd_datestat
[0m07:36:11.790903 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m07:36:11.792256 [info ] [Thread-1 (]: 47 of 90 START sql table model test.combine_registry_appprofilematching ........ [RUN]
[0m07:36:11.793848 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_registry_appprofilematching'
[0m07:36:11.794182 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_registry_appprofilematching)
[0m07:36:11.794376 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m07:36:11.807335 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_registry_appprofilematching')        
...
[0m07:36:11.810260 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.817531 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'join_ym_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.818719 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.824644 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

    select name, type from system.columns where table = 'join_appmetrica_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.825757 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.829190 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_ym_events"
[0m07:36:11.830541 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

        
  
    
    
        
        insert into test.join_ym_events__dbt_tmp ("__date", "__table_name", "visitId", "clientId", "promoCode", "osName", "cityName", "cityCode", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "registrationCardSessions", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "couponActivationSessions", "participationInLotterySessions", "pageViews", "__emitted_at", "__link")
  -- depends_on: test.incremental_ym_events_default_yandex_metrika_stream
WITH events AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_ym_events_default_yandex_metrika_stream' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("ymsclientID" as String) as "ymsclientID" ,
                    cast("ymsdateTime" as String) as "ymsdateTime" ,
                    cast("ymsgoalsID" as String) as "ymsgoalsID" ,
                    cast("ymsgoalsOrder" as String) as "ymsgoalsOrder" ,
                    cast("ymslastAdvEngine" as String) as "ymslastAdvEngine" ,
                    cast("ymslastReferalSource" as String) as "ymslastReferalSource" ,
                    cast("ymslastSearchEngine" as String) as "ymslastSearchEngine" ,
                    cast("ymslastTrafficSource" as String) as "ymslastTrafficSource" ,
                    cast("ymspageViews" as String) as "ymspageViews" ,
                    cast("ymsparsedParamsKey1" as String) as "ymsparsedParamsKey1" ,
                    cast("ymsparsedParamsKey2" as String) as "ymsparsedParamsKey2" ,
                    cast("ymspurchaseCoupon" as String) as "ymspurchaseCoupon" ,
                    cast("ymspurchaseID" as String) as "ymspurchaseID" ,
                    cast("ymspurchaseRevenue" as String) as "ymspurchaseRevenue" ,
                    cast("ymsregionCity" as String) as "ymsregionCity" ,
                    cast("ymsUTMCampaign" as String) as "ymsUTMCampaign" ,
                    cast("ymsUTMContent" as String) as "ymsUTMContent" ,
                    cast("ymsUTMMedium" as String) as "ymsUTMMedium" ,
                    cast("ymsUTMSource" as String) as "ymsUTMSource" ,
                    cast("ymsUTMTerm" as String) as "ymsUTMTerm" ,
                    cast("ymsvisitID" as String) as "ymsvisitID" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_ym_events_default_yandex_metrika_stream

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-16' AND '2024-02-29')

SELECT  
    __date, 
    __table_name,  
    ymsvisitID As visitId,
    ymsclientID AS clientId,
    extract(ymspurchaseCoupon, '\'([^\'\[\],]+)') AS promoCode,   
    'web' AS osName,
    ymsregionCity AS cityName,
    lower(ymsregionCity) AS cityCode,
    assumeNotNull(coalesce(lower(if(length(ymsUTMSource) > 0, concat(ymsUTMSource, ' / ', ymsUTMMedium), null)), 
    multiIf(ymslastTrafficSource = 'ad', lower(if(length(ymslastAdvEngine) > 0, concat(ymslastAdvEngine, ' / ', ymslastTrafficSource), null)),  
    ymslastTrafficSource = 'organic', lower(if(length(ymslastSearchEngine) > 0, concat(ymslastSearchEngine, ' / ', ymslastTrafficSource), null)),  
    lower(if(length(ymslastReferalSource) > 0, concat(ymslastReferalSource, ' / ', ymslastTrafficSource), null))), '')) AS adSourceDirty, 
    ymsUTMSource AS utmSource,
    ymsUTMMedium AS utmMedium,
    ymsUTMCampaign AS utmCampaign,
    ymsUTMTerm AS utmTerm,
    ymsUTMContent AS utmContent,
    ymspurchaseID AS transactionId,
    greatest(coalesce(extract(ymsUTMCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(ymsUTMContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    1 AS sessions,
    if(countSubstrings(ymsgoalsID, '131126368')>0,1,0) AS addToCartSessions, 
    if(countSubstrings(ymsgoalsID, '229829884')>0,1,0) AS cartViewSessions, 
    if(countSubstrings(ymsgoalsID, '131126557')>0,1,0) AS checkoutSessions, 
    if(countSubstrings(ymsgoalsID, '131127241')>0,1,0) AS webSalesSessions, 
    countSubstrings(ymsgoalsID, '131127241') AS sales, 
    --0.0 AS amountSales,
    if(countSubstrings(ymsgoalsID, '199402504')>0,1,0) AS registrationCardSessions,
    if(countSubstrings(ymsgoalsID, '199402597')>0,1,0) AS linkingCardToPhoneNumberSessions, 
    if(countSubstrings(ymsgoalsID, '226410025')>0,1,0) AS registrationLendingPromotionsSessions, 
    if(countSubstrings(ymsgoalsID, '232977064')>0,1,0) AS registrationCashbackSessions, 
    if(countSubstrings(ymsgoalsID, '232977580')>0,1,0) AS couponActivationSessions, 
    if(countSubstrings(ymsgoalsID, '232977647')>0,1,0) AS participationInLotterySessions,
    toUInt32(ymspageViews) AS pageViews,
    __emitted_at,
    toLowCardinality('VisitStat') AS __link 

FROM events





  
    ...
[0m07:36:11.832689 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.835770 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_registry_appprofilematching"
[0m07:36:11.836705 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_registry_appprofilematching (compile): 2024-05-17 07:36:11.794477 => 2024-05-17 07:36:11.836558
[0m07:36:11.837063 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m07:36:11.843037 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

            

    
        create table test.combine_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_appmetrica_registry_appprofilematching
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_appmetrica_registry_appprofilematching
        )

        ) 


    )
        ...
[0m07:36:11.855388 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.859351 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    drop table if exists test.join_ym_events__dbt_backup 
  
  ...
[0m07:36:11.860587 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:11.866378 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

    select name, type from system.columns where table = 'combine_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.867339 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.869953 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    rename table test.join_ym_events__dbt_tmp to test.join_ym_events__dbt_backup 
  
  ...
[0m07:36:11.873470 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.874435 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.876589 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_registry_appprofilematching"
[0m07:36:11.879209 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */
EXCHANGE TABLES test.join_ym_events__dbt_backup AND test.join_ym_events 
  
  ...
[0m07:36:11.881506 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

  
    
    
        
        insert into test.combine_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_appmetrica_registry_appprofilematching
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_appmetrica_registry_appprofilematching
        )

        ) 


  ...
[0m07:36:11.883876 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.888924 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */
drop table if exists test.join_ym_events__dbt_backup 
  ...
[0m07:36:11.889950 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.892481 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */
EXCHANGE TABLES test.combine_registry_appprofilematching__dbt_backup AND test.combine_registry_appprofilematching 
  
  ...
[0m07:36:11.894548 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.896245 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_ym_events (execute): 2024-05-17 07:36:11.778935 => 2024-05-17 07:36:11.896161
[0m07:36:11.897167 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcebd8f40d0>]}
[0m07:36:11.897756 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.898798 [info ] [Thread-2 (]: 46 of 90 OK created sql incremental model test.join_ym_events .................. [[32mOK[0m in 0.21s]
[0m07:36:11.904895 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_ym_events
[0m07:36:11.906348 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */
drop table if exists test.combine_registry_appprofilematching__dbt_backup 
  ...
[0m07:36:11.906824 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m07:36:11.909158 [info ] [Thread-2 (]: 48 of 90 START sql table model test.combine_registry_utmhashregistry ........... [RUN]
[0m07:36:11.910111 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_registry_utmhashregistry'
[0m07:36:11.910823 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_registry_utmhashregistry)
[0m07:36:11.911311 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m07:36:11.915963 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_registry_utmhashregistry')        
...
[0m07:36:11.916997 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.919580 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_registry_appprofilematching (execute): 2024-05-17 07:36:11.837178 => 2024-05-17 07:36:11.919504
[0m07:36:11.920559 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9bc6920>]}
[0m07:36:11.921600 [info ] [Thread-1 (]: 47 of 90 OK created sql table model test.combine_registry_appprofilematching ... [[32mOK[0m in 0.13s]
[0m07:36:11.922280 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m07:36:11.922903 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.combine_periodstat
[0m07:36:11.923765 [info ] [Thread-1 (]: 49 of 90 START sql incremental model test.combine_periodstat ................... [RUN]
[0m07:36:11.925095 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_periodstat'
[0m07:36:11.926324 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.926981 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_periodstat)
[0m07:36:11.932296 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'join_utmcraft_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.932890 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.combine_periodstat
[0m07:36:11.939393 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_periodstat')        
...
[0m07:36:11.940421 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.944930 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_registry_utmhashregistry"
[0m07:36:11.946249 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_registry_utmhashregistry (compile): 2024-05-17 07:36:11.911624 => 2024-05-17 07:36:11.946017
[0m07:36:11.947044 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m07:36:11.952326 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

            

    
        create table test.combine_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_utmcraft_registry_utmhashregistry
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_utmcraft_registry_utmhashregistry
        )

        ) 


    )
        ...
[0m07:36:11.953438 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.962934 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.968760 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:11.971195 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_periodstat"
[0m07:36:11.971786 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_periodstat (compile): 2024-05-17 07:36:11.934484 => 2024-05-17 07:36:11.971701
[0m07:36:11.972011 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.combine_periodstat
[0m07:36:11.979980 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

            

    
        create table test.combine_periodstat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_sheets_periodstat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_sheets_periodstat
        )

        ) 


    )
        ...
[0m07:36:11.981046 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:11.985834 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'combine_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:11.990991 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:11.993126 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_registry_utmhashregistry"
[0m07:36:11.993745 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

  
    
    
        
        insert into test.combine_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_utmcraft_registry_utmhashregistry
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_utmcraft_registry_utmhashregistry
        )

        ) 


  ...
[0m07:36:11.997035 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:12.001091 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.002841 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.005439 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */
EXCHANGE TABLES test.combine_registry_utmhashregistry__dbt_backup AND test.combine_registry_utmhashregistry 
  
  ...
[0m07:36:12.007088 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.009091 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_periodstat"
[0m07:36:12.009835 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.015013 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */
drop table if exists test.combine_registry_utmhashregistry__dbt_backup 
  ...
[0m07:36:12.016359 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

        
  
    
    
        
        insert into test.combine_periodstat__dbt_tmp ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_sheets_periodstat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_sheets_periodstat
        )

        ) 


  
    ...
[0m07:36:12.019887 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.021912 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_registry_utmhashregistry (execute): 2024-05-17 07:36:11.947316 => 2024-05-17 07:36:12.021816
[0m07:36:12.022878 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea82f6500>]}
[0m07:36:12.023489 [info ] [Thread-2 (]: 48 of 90 OK created sql table model test.combine_registry_utmhashregistry ...... [[32mOK[0m in 0.11s]
[0m07:36:12.024129 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m07:36:12.024523 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.combine_datestat
[0m07:36:12.025849 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.026617 [info ] [Thread-2 (]: 50 of 90 START sql incremental model test.combine_datestat ..................... [RUN]
[0m07:36:12.030673 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    drop table if exists test.combine_periodstat__dbt_backup 
  
  ...
[0m07:36:12.031640 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_datestat'
[0m07:36:12.033083 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_datestat)
[0m07:36:12.033531 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.combine_datestat
[0m07:36:12.040051 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_datestat')        
...
[0m07:36:12.040754 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.044547 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    rename table test.combine_periodstat__dbt_tmp to test.combine_periodstat__dbt_backup 
  
  ...
[0m07:36:12.048781 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.050585 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */
EXCHANGE TABLES test.combine_periodstat__dbt_backup AND test.combine_periodstat 
  
  ...
[0m07:36:12.051431 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.171181 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.12 seconds
[0m07:36:12.173320 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.178290 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */
drop table if exists test.combine_periodstat__dbt_backup 
  ...
[0m07:36:12.184551 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.186211 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_periodstat (execute): 2024-05-17 07:36:11.972203 => 2024-05-17 07:36:12.186140
[0m07:36:12.187142 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.188415 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea820c3a0>]}
[0m07:36:12.193204 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.193952 [info ] [Thread-1 (]: 49 of 90 OK created sql incremental model test.combine_periodstat .............. [[32mOK[0m in 0.26s]
[0m07:36:12.195977 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.combine_periodstat
[0m07:36:12.196566 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.combine_events
[0m07:36:12.196971 [info ] [Thread-1 (]: 51 of 90 START sql incremental model test.combine_events ....................... [RUN]
[0m07:36:12.198700 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_events'
[0m07:36:12.199056 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_events)
[0m07:36:12.199377 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.combine_events
[0m07:36:12.203666 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_events')        
...
[0m07:36:12.204631 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.211322 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.213599 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.220679 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.221534 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.227716 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_datestat"
[0m07:36:12.229292 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_datestat (compile): 2024-05-17 07:36:12.033692 => 2024-05-17 07:36:12.228994
[0m07:36:12.229703 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.combine_datestat
[0m07:36:12.235503 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

            

    
        create table test.combine_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_mt_datestat
-- depends_on: test.join_vkads_datestat
-- depends_on: test.join_yd_datestat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_mt_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString('') as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_vkads_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.join_yd_datestat
        )

        ) 


    )
        ...
[0m07:36:12.236644 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.244475 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'join_ym_events'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.251123 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.257936 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_events"
[0m07:36:12.259618 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:12.263778 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'combine_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.265429 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_events (compile): 2024-05-17 07:36:12.199528 => 2024-05-17 07:36:12.265213
[0m07:36:12.266305 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.combine_events
[0m07:36:12.272501 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

            

    
        create table test.combine_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_appmetrica_events
-- depends_on: test.join_ym_events
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt32(0) as pageViews 

            from test.join_appmetrica_events
        )

        union all
        

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime(0) as event_datetime ,
                            toString('') as accountName ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8(0) as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8(0) as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt8(0) as installApp ,
                            toUInt8(0) as installs ,
                            toString('') as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.join_ym_events
        )

        ) 


    )
        ...
[0m07:36:12.274421 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.278764 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_datestat"
[0m07:36:12.279543 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

        
  
    
    
        
        insert into test.combine_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId")
  -- depends_on: test.join_mt_datestat
-- depends_on: test.join_vkads_datestat
-- depends_on: test.join_yd_datestat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_mt_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString('') as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_vkads_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.join_yd_datestat
        )

        ) 


  
    ...
[0m07:36:12.300691 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:12.301464 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:12.304512 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'combine_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.311273 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    drop table if exists test.combine_datestat__dbt_backup 
  
  ...
[0m07:36:12.315859 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.317122 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    rename table test.combine_datestat__dbt_tmp to test.combine_datestat__dbt_backup 
  
  ...
[0m07:36:12.317958 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.322094 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_events"
[0m07:36:12.322819 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.324384 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */
EXCHANGE TABLES test.combine_datestat__dbt_backup AND test.combine_datestat 
  
  ...
[0m07:36:12.325609 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

        
  
    
    
        
        insert into test.combine_events__dbt_tmp ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews")
  -- depends_on: test.join_appmetrica_events
-- depends_on: test.join_ym_events
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt32(0) as pageViews 

            from test.join_appmetrica_events
        )

        union all
        

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime(0) as event_datetime ,
                            toString('') as accountName ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8(0) as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8(0) as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt8(0) as installApp ,
                            toUInt8(0) as installs ,
                            toString('') as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.join_ym_events
        )

        ) 


  
    ...
[0m07:36:12.327971 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.332593 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */
drop table if exists test.combine_datestat__dbt_backup 
  ...
[0m07:36:12.335835 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.337253 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_datestat (execute): 2024-05-17 07:36:12.229808 => 2024-05-17 07:36:12.337184
[0m07:36:12.338059 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9bf3100>]}
[0m07:36:12.338588 [info ] [Thread-2 (]: 50 of 90 OK created sql incremental model test.combine_datestat ................ [[32mOK[0m in 0.31s]
[0m07:36:12.339010 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.combine_datestat
[0m07:36:12.339343 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m07:36:12.340284 [info ] [Thread-2 (]: 52 of 90 START sql table model test.hash_registry_appprofilematching ........... [RUN]
[0m07:36:12.341184 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_registry_appprofilematching'
[0m07:36:12.341514 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_registry_appprofilematching)
[0m07:36:12.341683 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m07:36:12.358644 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:12.369061 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_registry_appprofilematching')        
...
[0m07:36:12.373230 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    drop table if exists test.combine_events__dbt_backup 
  
  ...
[0m07:36:12.378329 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.380567 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    rename table test.combine_events__dbt_tmp to test.combine_events__dbt_backup 
  
  ...
[0m07:36:12.381484 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.387225 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

    select name, type from system.columns where table = 'combine_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.388096 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.390836 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */
EXCHANGE TABLES test.combine_events__dbt_backup AND test.combine_events 
  
  ...
[0m07:36:12.394594 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.401766 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.420007 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */
drop table if exists test.combine_events__dbt_backup 
  ...
[0m07:36:12.425128 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_registry_appprofilematching"
[0m07:36:12.426398 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_registry_appprofilematching (compile): 2024-05-17 07:36:12.341776 => 2024-05-17 07:36:12.426250
[0m07:36:12.426938 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m07:36:12.431660 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

            

    
        create table test.hash_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_registry_appprofilematching
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'AppProfileMatching' 
    THEN AppProfileMatchingHash 

    END) as __id
  , assumeNotNull(CASE 

WHEN __link = 'UtmHashRegistry' 
        THEN toDateTime(toDateTime(0))
    







WHEN __link = 'AppProfileMatching' 
        THEN toDateTime(toDateTime(0))
    

    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(toDateTime(0)))), ''), '') = '', null, hex(MD5('AppProfileMatching' || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(toDateTime(0)))), ''), '')))))) as AppProfileMatchingHash
    ,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash


    
FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_appprofilematching
        )

        ) 
    WHERE 
    
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m07:36:12.433756 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.435347 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_events (execute): 2024-05-17 07:36:12.266718 => 2024-05-17 07:36:12.435273
[0m07:36:12.436068 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9e96290>]}
[0m07:36:12.436585 [info ] [Thread-1 (]: 51 of 90 OK created sql incremental model test.combine_events .................. [[32mOK[0m in 0.24s]
[0m07:36:12.437049 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.combine_events
[0m07:36:12.437493 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m07:36:12.438066 [info ] [Thread-1 (]: 53 of 90 START sql table model test.hash_registry_utmhashregistry .............. [RUN]
[0m07:36:12.439161 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_registry_utmhashregistry'
[0m07:36:12.439814 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_registry_utmhashregistry)
[0m07:36:12.440178 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m07:36:12.445034 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_registry_utmhashregistry')        
...
[0m07:36:12.454506 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.458071 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'combine_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.459396 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:12.465624 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

    select name, type from system.columns where table = 'hash_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.469523 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.474958 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_registry_utmhashregistry"
[0m07:36:12.476380 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.478595 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_registry_appprofilematching"
[0m07:36:12.479568 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_registry_utmhashregistry (compile): 2024-05-17 07:36:12.440332 => 2024-05-17 07:36:12.479417
[0m07:36:12.480547 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m07:36:12.485929 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

            

    
        create table test.hash_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_registry_utmhashregistry
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'UtmHashRegistry' 
    THEN UtmHashRegistryHash 

    END) as __id
  , assumeNotNull(CASE 

WHEN __link = 'UtmHashRegistry' 
        THEN toDateTime(toDateTime(0))
    







WHEN __link = 'AppProfileMatching' 
        THEN toDateTime(toDateTime(0))
    

    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(toDateTime(0)))), ''), '') = '', null, hex(MD5('UtmHashRegistry' || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(toDateTime(0)))), ''), '')))))) as UtmHashRegistryHash
    ,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


    
FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_utmhashregistry
        )

        ) 
    WHERE 
    
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m07:36:12.487492 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

  
    
    
        
        insert into test.hash_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link", "AppProfileMatchingHash", "AppMetricaDeviceHash", "CrmUserHash", "__id", "__datetime")
  -- depends_on: test.combine_registry_appprofilematching
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'AppProfileMatching' 
    THEN AppProfileMatchingHash 

    END) as __id
  , assumeNotNull(CASE 

WHEN __link = 'UtmHashRegistry' 
        THEN toDateTime(toDateTime(0))
    







WHEN __link = 'AppProfileMatching' 
        THEN toDateTime(toDateTime(0))
    

    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(toDateTime(0)))), ''), '') = '', null, hex(MD5('AppProfileMatching' || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(toDateTime(0)))), ''), '')))))) as AppProfileMatchingHash
    ,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash


    
FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_appprofilematching
        )

        ) 
    WHERE 
    
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


  ...
[0m07:36:12.507109 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:12.508562 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */
EXCHANGE TABLES test.hash_registry_appprofilematching__dbt_backup AND test.hash_registry_appprofilematching 
  
  ...
[0m07:36:12.509598 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:12.514757 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'hash_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.515416 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.521336 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */
drop table if exists test.hash_registry_appprofilematching__dbt_backup 
  ...
[0m07:36:12.522843 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.524981 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_registry_utmhashregistry"
[0m07:36:12.526147 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.528401 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_registry_appprofilematching (execute): 2024-05-17 07:36:12.427118 => 2024-05-17 07:36:12.528335
[0m07:36:12.528839 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

  
    
    
        
        insert into test.hash_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link", "UtmHashRegistryHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.combine_registry_utmhashregistry
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'UtmHashRegistry' 
    THEN UtmHashRegistryHash 

    END) as __id
  , assumeNotNull(CASE 

WHEN __link = 'UtmHashRegistry' 
        THEN toDateTime(toDateTime(0))
    







WHEN __link = 'AppProfileMatching' 
        THEN toDateTime(toDateTime(0))
    

    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(toDateTime(0)))), ''), '') = '', null, hex(MD5('UtmHashRegistry' || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(toDateTime(0)))), ''), '')))))) as UtmHashRegistryHash
    ,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


    
FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_utmhashregistry
        )

        ) 
    WHERE 
    
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


  ...
[0m07:36:12.529776 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9bdc880>]}
[0m07:36:12.531460 [info ] [Thread-2 (]: 52 of 90 OK created sql table model test.hash_registry_appprofilematching ...... [[32mOK[0m in 0.19s]
[0m07:36:12.531879 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m07:36:12.532219 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.hash_periodstat
[0m07:36:12.533212 [info ] [Thread-2 (]: 54 of 90 START sql incremental model test.hash_periodstat ...................... [RUN]
[0m07:36:12.534658 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_periodstat'
[0m07:36:12.534877 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_periodstat)
[0m07:36:12.535048 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.hash_periodstat
[0m07:36:12.539726 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_periodstat')        
...
[0m07:36:12.545786 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:12.547158 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */
EXCHANGE TABLES test.hash_registry_utmhashregistry__dbt_backup AND test.hash_registry_utmhashregistry 
  
  ...
[0m07:36:12.547964 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.552640 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.553496 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.560363 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.559533 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */
drop table if exists test.hash_registry_utmhashregistry__dbt_backup 
  ...
[0m07:36:12.565852 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_periodstat"
[0m07:36:12.568897 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_periodstat (compile): 2024-05-17 07:36:12.535144 => 2024-05-17 07:36:12.568662
[0m07:36:12.569555 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.hash_periodstat
[0m07:36:12.576280 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.578047 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

            

    
        create table test.hash_periodstat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_periodstat
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'ManualAdCostStat' 
    THEN ManualAdCostStatHash 

    END) as __id
  , assumeNotNull(CASE 
WHEN __link = 'ManualAdCostStat' 
        THEN toDateTime(__date)
    










    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') = '', null, hex(MD5('ManualAdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '')))))) as ManualAdCostStatHash
    
    
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_periodstat
        )

        ) 
    WHERE 
    
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m07:36:12.579833 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_registry_utmhashregistry (execute): 2024-05-17 07:36:12.481154 => 2024-05-17 07:36:12.579744
[0m07:36:12.582333 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8317dc0>]}
[0m07:36:12.582993 [info ] [Thread-1 (]: 53 of 90 OK created sql table model test.hash_registry_utmhashregistry ......... [[32mOK[0m in 0.14s]
[0m07:36:12.583631 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m07:36:12.584133 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.hash_datestat
[0m07:36:12.585255 [info ] [Thread-1 (]: 55 of 90 START sql incremental model test.hash_datestat ........................ [RUN]
[0m07:36:12.586307 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_datestat'
[0m07:36:12.586883 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_datestat)
[0m07:36:12.587398 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.hash_datestat
[0m07:36:12.595390 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_datestat')        
...
[0m07:36:12.606040 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.610208 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'combine_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.611270 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:12.616954 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.617964 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.626498 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_datestat"
[0m07:36:12.627639 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.630967 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_periodstat"
[0m07:36:12.631433 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_datestat (compile): 2024-05-17 07:36:12.587527 => 2024-05-17 07:36:12.631301
[0m07:36:12.632680 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

        
  
    
    
        
        insert into test.hash_periodstat__dbt_tmp ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime")
  -- depends_on: test.combine_periodstat
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'ManualAdCostStat' 
    THEN ManualAdCostStatHash 

    END) as __id
  , assumeNotNull(CASE 
WHEN __link = 'ManualAdCostStat' 
        THEN toDateTime(__date)
    










    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') = '', null, hex(MD5('ManualAdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '')))))) as ManualAdCostStatHash
    
    
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_periodstat
        )

        ) 
    WHERE 
    
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


  
    ...
[0m07:36:12.633261 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.hash_datestat
[0m07:36:12.639762 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

            

    
        create table test.hash_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_datestat
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'AdCostStat' 
    THEN AdCostStatHash 

    END) as __id
  , assumeNotNull(CASE 


WHEN __link = 'AdCostStat' 
        THEN toDateTime(__date)
    








    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(reportType))), ''), '') = '', null, hex(MD5('AdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(reportType))), ''), '')))))) as AdCostStatHash
    ,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


    
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.combine_datestat
        )

        ) 
    WHERE 
    
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m07:36:12.656431 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:12.661764 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    drop table if exists test.hash_periodstat__dbt_backup 
  
  ...
[0m07:36:12.665831 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.667106 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    rename table test.hash_periodstat__dbt_tmp to test.hash_periodstat__dbt_backup 
  
  ...
[0m07:36:12.668489 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:12.671941 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'hash_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.673133 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.674811 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */
EXCHANGE TABLES test.hash_periodstat__dbt_backup AND test.hash_periodstat 
  
  ...
[0m07:36:12.678461 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.682710 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */
drop table if exists test.hash_periodstat__dbt_backup 
  ...
[0m07:36:12.683828 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.686567 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_datestat"
[0m07:36:12.687740 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

        
  
    
    
        
        insert into test.hash_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.combine_datestat
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'AdCostStat' 
    THEN AdCostStatHash 

    END) as __id
  , assumeNotNull(CASE 


WHEN __link = 'AdCostStat' 
        THEN toDateTime(__date)
    








    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(reportType))), ''), '') = '', null, hex(MD5('AdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(reportType))), ''), '')))))) as AdCostStatHash
    ,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


    
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.combine_datestat
        )

        ) 
    WHERE 
    
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


  
    ...
[0m07:36:12.688939 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.690429 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_periodstat (execute): 2024-05-17 07:36:12.569725 => 2024-05-17 07:36:12.690362
[0m07:36:12.691224 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8187070>]}
[0m07:36:12.691888 [info ] [Thread-2 (]: 54 of 90 OK created sql incremental model test.hash_periodstat ................. [[32mOK[0m in 0.16s]
[0m07:36:12.692336 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.hash_periodstat
[0m07:36:12.692702 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.hash_events
[0m07:36:12.693163 [info ] [Thread-2 (]: 56 of 90 START sql incremental model test.hash_events .......................... [RUN]
[0m07:36:12.693990 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_events'
[0m07:36:12.694758 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_events)
[0m07:36:12.695066 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.hash_events
[0m07:36:12.698858 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_events')        
...
[0m07:36:12.705141 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.708974 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'combine_events'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.715509 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.721999 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:12.731193 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    drop table if exists test.hash_datestat__dbt_backup 
  
  ...
[0m07:36:12.732707 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_events"
[0m07:36:12.734015 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_events (compile): 2024-05-17 07:36:12.695176 => 2024-05-17 07:36:12.733898
[0m07:36:12.734317 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.hash_events
[0m07:36:12.739715 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

            

    
        create table test.hash_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_events
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'AppInstallStat' 
    THEN AppInstallStatHash 
WHEN __link = 'AppEventStat' 
    THEN AppEventStatHash 
WHEN __link = 'AppSessionStat' 
    THEN AppSessionStatHash 
WHEN __link = 'AppDeeplinkStat' 
    THEN AppDeeplinkStatHash 
WHEN __link = 'VisitStat' 
    THEN VisitStatHash 

    END) as __id
  , assumeNotNull(CASE 




WHEN __link = 'AppInstallStat' 
        THEN toDateTime(event_datetime)
    
WHEN __link = 'AppEventStat' 
        THEN toDateTime(event_datetime)
    
WHEN __link = 'AppSessionStat' 
        THEN toDateTime(event_datetime)
    
WHEN __link = 'AppDeeplinkStat' 
        THEN toDateTime(event_datetime)
    
WHEN __link = 'VisitStat' 
        THEN toDateTime(__date)
    


    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppInstallStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppInstallStatHash,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppEventStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppEventStatHash,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppSessionStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppSessionStatHash,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppDeeplinkStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppDeeplinkStatHash,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('VisitStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as VisitStatHash
    ,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash

,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash

,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(clientId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(clientId))), ''), '')))))) as YmClientHash


    
FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.combine_events
        )

        ) 
    WHERE 
    
        True AND 
        True AND 
        True AND 
        True AND 
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m07:36:12.740738 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.743351 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    rename table test.hash_datestat__dbt_tmp to test.hash_datestat__dbt_backup 
  
  ...
[0m07:36:12.748174 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.749834 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */
EXCHANGE TABLES test.hash_datestat__dbt_backup AND test.hash_datestat 
  
  ...
[0m07:36:12.754483 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.759400 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */
drop table if exists test.hash_datestat__dbt_backup 
  ...
[0m07:36:12.764173 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.765759 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_datestat (execute): 2024-05-17 07:36:12.634978 => 2024-05-17 07:36:12.765688
[0m07:36:12.766399 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b729780>]}
[0m07:36:12.791363 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m07:36:12.794963 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'hash_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:12.801192 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:12.803258 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_events"
[0m07:36:12.803743 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

        
  
    
    
        
        insert into test.hash_events__dbt_tmp ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime")
  -- depends_on: test.combine_events
SELECT *,
  assumeNotNull(CASE 
WHEN __link = 'AppInstallStat' 
    THEN AppInstallStatHash 
WHEN __link = 'AppEventStat' 
    THEN AppEventStatHash 
WHEN __link = 'AppSessionStat' 
    THEN AppSessionStatHash 
WHEN __link = 'AppDeeplinkStat' 
    THEN AppDeeplinkStatHash 
WHEN __link = 'VisitStat' 
    THEN VisitStatHash 

    END) as __id
  , assumeNotNull(CASE 




WHEN __link = 'AppInstallStat' 
        THEN toDateTime(event_datetime)
    
WHEN __link = 'AppEventStat' 
        THEN toDateTime(event_datetime)
    
WHEN __link = 'AppSessionStat' 
        THEN toDateTime(event_datetime)
    
WHEN __link = 'AppDeeplinkStat' 
        THEN toDateTime(event_datetime)
    
WHEN __link = 'VisitStat' 
        THEN toDateTime(__date)
    


    END) as __datetime

FROM (

SELECT 
    *, 
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppInstallStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppInstallStatHash,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppEventStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppEventStatHash,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppSessionStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppSessionStatHash,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppDeeplinkStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppDeeplinkStatHash,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('VisitStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as VisitStatHash
    ,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash

,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash

,
    
        
        assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(clientId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(clientId))), ''), '')))))) as YmClientHash


    
FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.combine_events
        )

        ) 
    WHERE 
    
        True AND 
        True AND 
        True AND 
        True AND 
        True
    )

-- SETTINGS short_circuit_function_evaluation=force_enable


  
    ...
[0m07:36:12.861653 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m07:36:12.864675 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    drop table if exists test.hash_events__dbt_backup 
  
  ...
[0m07:36:12.867581 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.868673 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    rename table test.hash_events__dbt_tmp to test.hash_events__dbt_backup 
  
  ...
[0m07:36:12.873127 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.874434 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */
EXCHANGE TABLES test.hash_events__dbt_backup AND test.hash_events 
  
  ...
[0m07:36:12.879390 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.883356 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */
drop table if exists test.hash_events__dbt_backup 
  ...
[0m07:36:12.887035 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:12.888290 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_events (execute): 2024-05-17 07:36:12.734429 => 2024-05-17 07:36:12.888232
[0m07:36:12.888837 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea82b1510>]}
[0m07:36:13.467870 [info ] [Thread-1 (]: 55 of 90 OK created sql incremental model test.hash_datestat ................... [[32mOK[0m in 0.18s]
[0m07:36:13.469364 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.hash_datestat
[0m07:36:13.470033 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m07:36:13.468780 [info ] [Thread-2 (]: 56 of 90 OK created sql incremental model test.hash_events ..................... [[32mOK[0m in 0.20s]
[0m07:36:13.472569 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.hash_events
[0m07:36:13.473442 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m07:36:13.471258 [info ] [Thread-1 (]: 57 of 90 START sql table model test.link_registry_appprofilematching ........... [RUN]
[0m07:36:13.475767 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_registry_appprofilematching'
[0m07:36:13.474406 [info ] [Thread-2 (]: 58 of 90 START sql table model test.link_registry_utmhashregistry .............. [RUN]
[0m07:36:13.477035 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_registry_appprofilematching)
[0m07:36:13.477965 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_registry_utmhashregistry'
[0m07:36:13.478424 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m07:36:13.478971 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_registry_utmhashregistry)
[0m07:36:13.495763 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

    select name, type from system.columns where table = 'hash_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.496344 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m07:36:13.504390 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'hash_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.505460 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.509119 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_registry_appprofilematching"
[0m07:36:13.510430 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_registry_appprofilematching (compile): 2024-05-17 07:36:13.479416 => 2024-05-17 07:36:13.510270
[0m07:36:13.510829 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m07:36:13.518105 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

            

    
        create table test.link_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_registry_appprofilematching
SELECT appmetricaDeviceId,crmUserId,cityName,__emitted_at,__table_name,__link,AppProfileMatchingHash,AppMetricaDeviceHash,CrmUserHash,__id,__datetime 
FROM test.hash_registry_appprofilematching
GROUP BY appmetricaDeviceId, crmUserId, cityName, __emitted_at, __table_name, __link, AppProfileMatchingHash, AppMetricaDeviceHash, CrmUserHash, __id, __datetime


    )
        ...
[0m07:36:13.519069 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.522230 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_registry_utmhashregistry"
[0m07:36:13.523009 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_registry_utmhashregistry (compile): 2024-05-17 07:36:13.498322 => 2024-05-17 07:36:13.522888
[0m07:36:13.523289 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m07:36:13.528184 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

            

    
        create table test.link_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_registry_utmhashregistry
SELECT utmHash,utm_base_url,utm_utmSource,utm_utmMedium,utm_utmCampaign,utm_project,utm_utmContent,utm_strategy,utm_audience,__emitted_at,__table_name,__link,UtmHashRegistryHash,UtmHashHash,__id,__datetime 
FROM test.hash_registry_utmhashregistry
GROUP BY utmHash, utm_base_url, utm_utmSource, utm_utmMedium, utm_utmCampaign, utm_project, utm_utmContent, utm_strategy, utm_audience, __emitted_at, __table_name, __link, UtmHashRegistryHash, UtmHashHash, __id, __datetime


    )
        ...
[0m07:36:13.544847 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:13.548856 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

    select name, type from system.columns where table = 'link_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.549583 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:13.553664 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'link_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.558844 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.560898 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_registry_appprofilematching"
[0m07:36:13.561734 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.563355 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_registry_utmhashregistry"
[0m07:36:13.564035 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

  
    
    
        
        insert into test.link_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link", "AppProfileMatchingHash", "AppMetricaDeviceHash", "CrmUserHash", "__id", "__datetime")
  -- depends_on: test.hash_registry_appprofilematching
SELECT appmetricaDeviceId,crmUserId,cityName,__emitted_at,__table_name,__link,AppProfileMatchingHash,AppMetricaDeviceHash,CrmUserHash,__id,__datetime 
FROM test.hash_registry_appprofilematching
GROUP BY appmetricaDeviceId, crmUserId, cityName, __emitted_at, __table_name, __link, AppProfileMatchingHash, AppMetricaDeviceHash, CrmUserHash, __id, __datetime


  ...
[0m07:36:13.564421 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

  
    
    
        
        insert into test.link_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link", "UtmHashRegistryHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.hash_registry_utmhashregistry
SELECT utmHash,utm_base_url,utm_utmSource,utm_utmMedium,utm_utmCampaign,utm_project,utm_utmContent,utm_strategy,utm_audience,__emitted_at,__table_name,__link,UtmHashRegistryHash,UtmHashHash,__id,__datetime 
FROM test.hash_registry_utmhashregistry
GROUP BY utmHash, utm_base_url, utm_utmSource, utm_utmMedium, utm_utmCampaign, utm_project, utm_utmContent, utm_strategy, utm_audience, __emitted_at, __table_name, __link, UtmHashRegistryHash, UtmHashHash, __id, __datetime


  ...
[0m07:36:13.571631 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.573065 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */
EXCHANGE TABLES test.link_registry_appprofilematching__dbt_backup AND test.link_registry_appprofilematching 
  
  ...
[0m07:36:13.574289 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.575878 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */
EXCHANGE TABLES test.link_registry_utmhashregistry__dbt_backup AND test.link_registry_utmhashregistry 
  
  ...
[0m07:36:13.577325 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.581404 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */
drop table if exists test.link_registry_appprofilematching__dbt_backup 
  ...
[0m07:36:13.582346 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.587421 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */
drop table if exists test.link_registry_utmhashregistry__dbt_backup 
  ...
[0m07:36:13.588483 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.591183 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_registry_appprofilematching (execute): 2024-05-17 07:36:13.510929 => 2024-05-17 07:36:13.591058
[0m07:36:13.592477 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9e96500>]}
[0m07:36:13.593830 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.593237 [info ] [Thread-1 (]: 57 of 90 OK created sql table model test.link_registry_appprofilematching ...... [[32mOK[0m in 0.12s]
[0m07:36:13.595607 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_registry_utmhashregistry (execute): 2024-05-17 07:36:13.523387 => 2024-05-17 07:36:13.595548
[0m07:36:13.596159 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m07:36:13.597344 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea812dc30>]}
[0m07:36:13.598118 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_periodstat
[0m07:36:13.598961 [info ] [Thread-2 (]: 58 of 90 OK created sql table model test.link_registry_utmhashregistry ......... [[32mOK[0m in 0.12s]
[0m07:36:13.599587 [info ] [Thread-1 (]: 59 of 90 START sql table model test.link_periodstat ............................ [RUN]
[0m07:36:13.600192 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m07:36:13.601393 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_periodstat'
[0m07:36:13.602382 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.link_datestat
[0m07:36:13.603046 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_periodstat)
[0m07:36:13.603762 [info ] [Thread-2 (]: 60 of 90 START sql table model test.link_datestat .............................. [RUN]
[0m07:36:13.604302 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_periodstat
[0m07:36:13.605021 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_datestat'
[0m07:36:13.694710 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.695181 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_datestat)
[0m07:36:13.696878 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.link_datestat
[0m07:36:13.703160 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

    select name, type from system.columns where table = 'hash_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.704093 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.707620 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_periodstat"
[0m07:36:13.708109 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_periodstat (compile): 2024-05-17 07:36:13.605512 => 2024-05-17 07:36:13.708040
[0m07:36:13.708284 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_periodstat
[0m07:36:13.712467 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

            

    
        create table test.link_periodstat__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_periodstat
SELECT __date,campaign,SUM(cost) AS cost,periodStart,periodEnd,__emitted_at,__table_name,__link,ManualAdCostStatHash,__id,__datetime 
FROM test.hash_periodstat
GROUP BY __date, campaign, periodStart, periodEnd, __emitted_at, __table_name, __link, ManualAdCostStatHash, __id, __datetime


    )
        ...
[0m07:36:13.713663 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.717496 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_datestat"
[0m07:36:13.718056 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_datestat (compile): 2024-05-17 07:36:13.697117 => 2024-05-17 07:36:13.717959
[0m07:36:13.718292 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.link_datestat
[0m07:36:13.722815 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

            

    
        create table test.link_datestat__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_datestat
SELECT __date,reportType,accountName,__table_name,adSourceDirty,adCampaignName,adId,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,utmHash,adTitle1,adText,SUM(adCost) AS adCost,SUM(impressions) AS impressions,SUM(clicks) AS clicks,__emitted_at,__link,adGroupName,adPhraseId,AdCostStatHash,UtmHashHash,__id,__datetime 
FROM test.hash_datestat
GROUP BY __date, reportType, accountName, __table_name, adSourceDirty, adCampaignName, adId, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, utmHash, adTitle1, adText, __emitted_at, __link, adGroupName, adPhraseId, AdCostStatHash, UtmHashHash, __id, __datetime


    )
        ...
[0m07:36:13.729068 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:13.733457 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

    select name, type from system.columns where table = 'link_periodstat__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.738256 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:13.739542 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.742685 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

    select name, type from system.columns where table = 'link_datestat__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.744304 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_periodstat"
[0m07:36:13.746045 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

  
    
    
        
        insert into test.link_periodstat__dbt_backup ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime")
  -- depends_on: test.hash_periodstat
SELECT __date,campaign,SUM(cost) AS cost,periodStart,periodEnd,__emitted_at,__table_name,__link,ManualAdCostStatHash,__id,__datetime 
FROM test.hash_periodstat
GROUP BY __date, campaign, periodStart, periodEnd, __emitted_at, __table_name, __link, ManualAdCostStatHash, __id, __datetime


  ...
[0m07:36:13.750405 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.752489 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_datestat"
[0m07:36:13.753030 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

  
    
    
        
        insert into test.link_datestat__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.hash_datestat
SELECT __date,reportType,accountName,__table_name,adSourceDirty,adCampaignName,adId,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,utmHash,adTitle1,adText,SUM(adCost) AS adCost,SUM(impressions) AS impressions,SUM(clicks) AS clicks,__emitted_at,__link,adGroupName,adPhraseId,AdCostStatHash,UtmHashHash,__id,__datetime 
FROM test.hash_datestat
GROUP BY __date, reportType, accountName, __table_name, adSourceDirty, adCampaignName, adId, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, utmHash, adTitle1, adText, __emitted_at, __link, adGroupName, adPhraseId, AdCostStatHash, UtmHashHash, __id, __datetime


  ...
[0m07:36:13.755258 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.757174 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */
EXCHANGE TABLES test.link_periodstat__dbt_backup AND test.link_periodstat 
  
  ...
[0m07:36:13.760784 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.765878 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */
drop table if exists test.link_periodstat__dbt_backup 
  ...
[0m07:36:13.766568 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.768990 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */
EXCHANGE TABLES test.link_datestat__dbt_backup AND test.link_datestat 
  
  ...
[0m07:36:13.770359 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.771798 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_periodstat (execute): 2024-05-17 07:36:13.708376 => 2024-05-17 07:36:13.771733
[0m07:36:13.772558 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80bcca0>]}
[0m07:36:13.773451 [info ] [Thread-1 (]: 59 of 90 OK created sql table model test.link_periodstat ....................... [[32mOK[0m in 0.17s]
[0m07:36:13.774442 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_periodstat
[0m07:36:13.775193 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.775745 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_events
[0m07:36:13.780794 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */
drop table if exists test.link_datestat__dbt_backup 
  ...
[0m07:36:13.782304 [info ] [Thread-1 (]: 61 of 90 START sql table model test.link_events ................................ [RUN]
[0m07:36:13.784524 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_events'
[0m07:36:13.784828 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_events)
[0m07:36:13.785020 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_events
[0m07:36:13.790003 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

    select name, type from system.columns where table = 'hash_events'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.790818 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.794470 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_datestat (execute): 2024-05-17 07:36:13.718391 => 2024-05-17 07:36:13.794393
[0m07:36:13.795256 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80791b0>]}
[0m07:36:13.796587 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.795888 [info ] [Thread-2 (]: 60 of 90 OK created sql table model test.link_datestat ......................... [[32mOK[0m in 0.19s]
[0m07:36:13.799929 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_events"
[0m07:36:13.800569 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.link_datestat
[0m07:36:13.801590 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.full_periodstat
[0m07:36:13.802558 [info ] [Thread-2 (]: 62 of 90 START sql incremental model test.full_periodstat ...................... [RUN]
[0m07:36:13.803723 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_periodstat'
[0m07:36:13.804080 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_periodstat)
[0m07:36:13.804371 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.full_periodstat
[0m07:36:13.804728 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_events (compile): 2024-05-17 07:36:13.785132 => 2024-05-17 07:36:13.804602
[0m07:36:13.821207 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_events
[0m07:36:13.837394 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

            

    
        create table test.link_events__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_events
SELECT __date,__table_name,event_datetime,accountName,appmetricaDeviceId,mobileAdsId,crmUserId,promoCode,osName,cityName,adSourceDirty,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,transactionId,utmHash,SUM(sessions) AS sessions,SUM(addToCartSessions) AS addToCartSessions,SUM(cartViewSessions) AS cartViewSessions,SUM(checkoutSessions) AS checkoutSessions,SUM(webSalesSessions) AS webSalesSessions,SUM(sales) AS sales,SUM(amountSales) AS amountSales,SUM(registrationCardSessions) AS registrationCardSessions,SUM(registrationButtonClick) AS registrationButtonClick,SUM(linkingCardToPhoneNumberSessions) AS linkingCardToPhoneNumberSessions,SUM(registrationLendingPromotionsSessions) AS registrationLendingPromotionsSessions,SUM(registrationCashbackSessions) AS registrationCashbackSessions,SUM(instantDiscountActivationSessions) AS instantDiscountActivationSessions,SUM(couponActivationSessions) AS couponActivationSessions,SUM(participationInLotterySessions) AS participationInLotterySessions,SUM(pagesViews) AS pagesViews,SUM(screenView) AS screenView,SUM(installApp) AS installApp,SUM(installs) AS installs,installationDeviceId,__emitted_at,__link,visitId,clientId,cityCode,SUM(pageViews) AS pageViews,AppInstallStatHash,AppEventStatHash,AppSessionStatHash,AppDeeplinkStatHash,VisitStatHash,AppMetricaDeviceHash,CrmUserHash,UtmHashHash,YmClientHash,__id,__datetime 
FROM test.hash_events
GROUP BY __date, __table_name, event_datetime, accountName, appmetricaDeviceId, mobileAdsId, crmUserId, promoCode, osName, cityName, adSourceDirty, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, transactionId, utmHash, installationDeviceId, __emitted_at, __link, visitId, clientId, cityCode, AppInstallStatHash, AppEventStatHash, AppSessionStatHash, AppDeeplinkStatHash, VisitStatHash, AppMetricaDeviceHash, CrmUserHash, UtmHashHash, YmClientHash, __id, __datetime


    )
        ...
[0m07:36:13.848848 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m07:36:13.853389 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.854829 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m07:36:13.861253 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.863632 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m07:36:13.867871 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.868449 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:13.870009 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m07:36:13.873351 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

    select name, type from system.columns where table = 'link_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.878218 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.879559 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m07:36:13.880396 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.883361 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_events"
[0m07:36:13.883903 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

  
    
    
        
        insert into test.link_events__dbt_backup ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime")
  -- depends_on: test.hash_events
SELECT __date,__table_name,event_datetime,accountName,appmetricaDeviceId,mobileAdsId,crmUserId,promoCode,osName,cityName,adSourceDirty,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,transactionId,utmHash,SUM(sessions) AS sessions,SUM(addToCartSessions) AS addToCartSessions,SUM(cartViewSessions) AS cartViewSessions,SUM(checkoutSessions) AS checkoutSessions,SUM(webSalesSessions) AS webSalesSessions,SUM(sales) AS sales,SUM(amountSales) AS amountSales,SUM(registrationCardSessions) AS registrationCardSessions,SUM(registrationButtonClick) AS registrationButtonClick,SUM(linkingCardToPhoneNumberSessions) AS linkingCardToPhoneNumberSessions,SUM(registrationLendingPromotionsSessions) AS registrationLendingPromotionsSessions,SUM(registrationCashbackSessions) AS registrationCashbackSessions,SUM(instantDiscountActivationSessions) AS instantDiscountActivationSessions,SUM(couponActivationSessions) AS couponActivationSessions,SUM(participationInLotterySessions) AS participationInLotterySessions,SUM(pagesViews) AS pagesViews,SUM(screenView) AS screenView,SUM(installApp) AS installApp,SUM(installs) AS installs,installationDeviceId,__emitted_at,__link,visitId,clientId,cityCode,SUM(pageViews) AS pageViews,AppInstallStatHash,AppEventStatHash,AppSessionStatHash,AppDeeplinkStatHash,VisitStatHash,AppMetricaDeviceHash,CrmUserHash,UtmHashHash,YmClientHash,__id,__datetime 
FROM test.hash_events
GROUP BY __date, __table_name, event_datetime, accountName, appmetricaDeviceId, mobileAdsId, crmUserId, promoCode, osName, cityName, adSourceDirty, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, transactionId, utmHash, installationDeviceId, __emitted_at, __link, visitId, clientId, cityCode, AppInstallStatHash, AppEventStatHash, AppSessionStatHash, AppDeeplinkStatHash, VisitStatHash, AppMetricaDeviceHash, CrmUserHash, UtmHashHash, YmClientHash, __id, __datetime


  ...
[0m07:36:13.885076 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.888263 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m07:36:13.892873 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.894408 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m07:36:13.899083 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.900535 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m07:36:13.901266 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:13.904200 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */
EXCHANGE TABLES test.link_events__dbt_backup AND test.link_events 
  
  ...
[0m07:36:13.908205 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.909812 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m07:36:13.910547 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.915177 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */
drop table if exists test.link_events__dbt_backup 
  ...
[0m07:36:13.916134 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.918881 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m07:36:13.920337 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.921730 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_events (execute): 2024-05-17 07:36:13.832585 => 2024-05-17 07:36:13.921662
[0m07:36:13.922463 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b679330>]}
[0m07:36:13.922998 [info ] [Thread-1 (]: 61 of 90 OK created sql table model test.link_events ........................... [[32mOK[0m in 0.14s]
[0m07:36:13.923493 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_events
[0m07:36:13.923819 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.full_datestat
[0m07:36:13.924645 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.925540 [info ] [Thread-1 (]: 63 of 90 START sql incremental model test.full_datestat ........................ [RUN]
[0m07:36:13.929710 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'link_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.931449 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_datestat'
[0m07:36:13.932687 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_datestat)
[0m07:36:13.933154 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.full_datestat
[0m07:36:13.940100 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m07:36:13.940981 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.945311 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_periodstat"
[0m07:36:13.946365 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.947927 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m07:36:13.949017 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_periodstat (compile): 2024-05-17 07:36:13.805082 => 2024-05-17 07:36:13.948871
[0m07:36:13.949921 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.full_periodstat
[0m07:36:13.955213 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

            

    
        create table test.full_periodstat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
-- depends_on: test.link_periodstat


WITH unnest_dates AS ( 
SELECT *, 
    dateAdd(periodStart, arrayJoin(range( 0, 1 + toUInt16(date_diff('day', periodStart, periodEnd))))) AS period_date
	, COUNT(*) OVER(PARTITION BY 
__date
,
campaign
,
periodStart
,
periodEnd
,
__emitted_at
,
__table_name
,
__link
,
ManualAdCostStatHash
,
__id
,
__datetime

 
    ) AS divide_by_days 
FROM test.link_periodstat
)
, t0 AS (
SELECT period_date, 
__date, 
campaign, 
periodStart, 
periodEnd, 
__emitted_at, 
__table_name, 
__link, 
ManualAdCostStatHash, 
__id, 
__datetime, 
   
cost/divide_by_days AS cost_per_day 
   
 
FROM unnest_dates
)
, t1 AS ( 
SELECT * 
FROM t0
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m07:36:13.961412 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.963731 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m07:36:13.969743 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.971739 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m07:36:13.976341 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:13.979845 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'full_periodstat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:13.980736 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.983865 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m07:36:13.985907 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:13.987399 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_periodstat"
[0m07:36:13.988024 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

        
  
    
    
        
        insert into test.full_periodstat__dbt_tmp ("period_date", "__date", "campaign", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime", "cost_per_day")
  -- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
-- depends_on: test.link_periodstat


WITH unnest_dates AS ( 
SELECT *, 
    dateAdd(periodStart, arrayJoin(range( 0, 1 + toUInt16(date_diff('day', periodStart, periodEnd))))) AS period_date
	, COUNT(*) OVER(PARTITION BY 
__date
,
campaign
,
periodStart
,
periodEnd
,
__emitted_at
,
__table_name
,
__link
,
ManualAdCostStatHash
,
__id
,
__datetime

 
    ) AS divide_by_days 
FROM test.link_periodstat
)
, t0 AS (
SELECT period_date, 
__date, 
campaign, 
periodStart, 
periodEnd, 
__emitted_at, 
__table_name, 
__link, 
ManualAdCostStatHash, 
__id, 
__datetime, 
   
cost/divide_by_days AS cost_per_day 
   
 
FROM unnest_dates
)
, t1 AS ( 
SELECT * 
FROM t0
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  
    ...
[0m07:36:13.989256 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.990994 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m07:36:13.996867 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:13.998469 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m07:36:14.003083 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.004555 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m07:36:14.006151 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.010016 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    drop table if exists test.full_periodstat__dbt_backup 
  
  ...
[0m07:36:14.011597 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.014418 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m07:36:14.016310 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.018551 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    rename table test.full_periodstat__dbt_tmp to test.full_periodstat__dbt_backup 
  
  ...
[0m07:36:14.019988 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.022256 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m07:36:14.023301 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.025967 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */
EXCHANGE TABLES test.full_periodstat__dbt_backup AND test.full_periodstat 
  
  ...
[0m07:36:14.028048 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.029771 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_datestat"
[0m07:36:14.031184 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.031505 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.full_datestat (compile): 2024-05-17 07:36:13.933527 => 2024-05-17 07:36:14.031417
[0m07:36:14.035741 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */
drop table if exists test.full_periodstat__dbt_backup 
  ...
[0m07:36:14.036414 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.full_datestat
[0m07:36:14.043369 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

            

    
        create table test.full_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.link_datestat
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
 
WITH t0 AS (
SELECT * FROM test.link_datestat
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m07:36:14.046718 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.048058 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_periodstat (execute): 2024-05-17 07:36:13.950366 => 2024-05-17 07:36:14.047982
[0m07:36:14.048809 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b67b9a0>]}
[0m07:36:14.049261 [info ] [Thread-2 (]: 62 of 90 OK created sql incremental model test.full_periodstat ................. [[32mOK[0m in 0.25s]
[0m07:36:14.049595 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.full_periodstat
[0m07:36:14.049883 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.graph_tuples
[0m07:36:14.050187 [info ] [Thread-2 (]: 64 of 90 START sql table model test.graph_tuples ............................... [RUN]
[0m07:36:14.051499 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_tuples'
[0m07:36:14.051724 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_tuples)
[0m07:36:14.051890 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.graph_tuples
[0m07:36:14.066391 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_tuples"
[0m07:36:14.067198 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.070948 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    select name, type from system.columns where table = 'full_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:14.072532 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_tuples (compile): 2024-05-17 07:36:14.052041 => 2024-05-17 07:36:14.072393
[0m07:36:14.072918 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.graph_tuples
[0m07:36:14.078406 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

            

    
        create table test.graph_tuples__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.link_events

    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_events
            where nullIf(CrmUserHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('YmClientHash'), toDateTime(0),  YmClientHash) as node_left
            from test.hash_events
            where nullIf(YmClientHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_events
            where nullIf(AppMetricaDeviceHash, '') is not null
    
        union all
    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(AppMetricaDeviceHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(CrmUserHash, '') is not null



    )
        ...
[0m07:36:14.079529 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.082937 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_datestat"
[0m07:36:14.083461 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

        
  
    
    
        
        insert into test.full_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash")
  -- depends_on: test.link_datestat
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
 
WITH t0 AS (
SELECT * FROM test.link_datestat
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  
    ...
[0m07:36:14.096992 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.100808 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

    select name, type from system.columns where table = 'graph_tuples__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:14.106685 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.108276 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_tuples"
[0m07:36:14.109398 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:14.113174 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    drop table if exists test.full_datestat__dbt_backup 
  
  ...
[0m07:36:14.114464 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

  
    
    
        
        insert into test.graph_tuples__dbt_backup ("hash", "node_left")
  -- depends_on: test.link_events

    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_events
            where nullIf(CrmUserHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('YmClientHash'), toDateTime(0),  YmClientHash) as node_left
            from test.hash_events
            where nullIf(YmClientHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_events
            where nullIf(AppMetricaDeviceHash, '') is not null
    
        union all
    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(AppMetricaDeviceHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(CrmUserHash, '') is not null



  ...
[0m07:36:14.116688 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.118076 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    rename table test.full_datestat__dbt_tmp to test.full_datestat__dbt_backup 
  
  ...
[0m07:36:14.122116 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.123627 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */
EXCHANGE TABLES test.full_datestat__dbt_backup AND test.full_datestat 
  
  ...
[0m07:36:14.127738 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.128495 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.134215 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */
drop table if exists test.full_datestat__dbt_backup 
  ...
[0m07:36:14.135986 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */
EXCHANGE TABLES test.graph_tuples__dbt_backup AND test.graph_tuples 
  
  ...
[0m07:36:14.139793 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.140414 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.144723 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */
drop table if exists test.graph_tuples__dbt_backup 
  ...
[0m07:36:14.146253 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.full_datestat (execute): 2024-05-17 07:36:14.038317 => 2024-05-17 07:36:14.146190
[0m07:36:14.148784 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea828f880>]}
[0m07:36:14.150237 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.149652 [info ] [Thread-1 (]: 63 of 90 OK created sql incremental model test.full_datestat ................... [[32mOK[0m in 0.22s]
[0m07:36:14.152145 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_tuples (execute): 2024-05-17 07:36:14.073070 => 2024-05-17 07:36:14.152011
[0m07:36:14.152589 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.full_datestat
[0m07:36:14.153628 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea82425f0>]}
[0m07:36:14.154836 [info ] [Thread-2 (]: 64 of 90 OK created sql table model test.graph_tuples .......................... [[32mOK[0m in 0.10s]
[0m07:36:14.155319 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.graph_tuples
[0m07:36:14.156852 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_lookup
[0m07:36:14.157751 [info ] [Thread-1 (]: 65 of 90 START sql table model test.graph_lookup ............................... [RUN]
[0m07:36:14.158704 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_lookup'
[0m07:36:14.159127 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_lookup)
[0m07:36:14.159337 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_lookup
[0m07:36:14.164755 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_lookup"
[0m07:36:14.165526 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_lookup (compile): 2024-05-17 07:36:14.159436 => 2024-05-17 07:36:14.165423
[0m07:36:14.165770 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_lookup
[0m07:36:14.170147 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

            

    
        create table test.graph_lookup__dbt_backup
        
  
        
  engine = MergeTree()
        order by (key_number)
        
        
        
        empty
    as (
        -- depends_on: test.graph_tuples




with all_keys as
(
    
    select distinct hash as key_hash from test.graph_tuples
    union distinct select distinct node_left as key_hash from test.graph_tuples
)


select *, row_number() over() as key_number from all_keys





    )
        ...
[0m07:36:14.185596 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.188384 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

    select name, type from system.columns where table = 'graph_lookup__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:14.194182 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.195953 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_lookup"
[0m07:36:14.197106 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

  
    
    
        
        insert into test.graph_lookup__dbt_backup ("key_hash", "key_number")
  -- depends_on: test.graph_tuples




with all_keys as
(
    
    select distinct hash as key_hash from test.graph_tuples
    union distinct select distinct node_left as key_hash from test.graph_tuples
)


select *, row_number() over() as key_number from all_keys





  ...
[0m07:36:14.206164 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.207818 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */
EXCHANGE TABLES test.graph_lookup__dbt_backup AND test.graph_lookup 
  
  ...
[0m07:36:14.212797 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.216905 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */
drop table if exists test.graph_lookup__dbt_backup 
  ...
[0m07:36:14.220849 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.222752 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_lookup (execute): 2024-05-17 07:36:14.165860 => 2024-05-17 07:36:14.222632
[0m07:36:14.223312 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8297100>]}
[0m07:36:14.223641 [info ] [Thread-1 (]: 65 of 90 OK created sql table model test.graph_lookup .......................... [[32mOK[0m in 0.07s]
[0m07:36:14.223978 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_lookup
[0m07:36:14.225865 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.graph_unique
[0m07:36:14.226919 [info ] [Thread-2 (]: 66 of 90 START sql table model test.graph_unique ............................... [RUN]
[0m07:36:14.228050 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_unique'
[0m07:36:14.228264 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_unique)
[0m07:36:14.228428 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.graph_unique
[0m07:36:14.234572 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_unique"
[0m07:36:14.235265 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_unique (compile): 2024-05-17 07:36:14.228521 => 2024-05-17 07:36:14.235185
[0m07:36:14.235536 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.graph_unique
[0m07:36:14.239382 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

            

    
        create table test.graph_unique__dbt_backup
        
  
        
  engine = MergeTree()
        order by (key_hash)
        
        
        
        empty
    as (
        -- depends_on: test.graph_lookup




select * from test.graph_lookup





    )
        ...
[0m07:36:14.255606 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.259682 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

    select name, type from system.columns where table = 'graph_unique__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:14.265536 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.267052 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_unique"
[0m07:36:14.267808 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

  
    
    
        
        insert into test.graph_unique__dbt_backup ("key_hash", "key_number")
  -- depends_on: test.graph_lookup




select * from test.graph_lookup





  ...
[0m07:36:14.274536 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.276143 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */
EXCHANGE TABLES test.graph_unique__dbt_backup AND test.graph_unique 
  
  ...
[0m07:36:14.280868 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.285050 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */
drop table if exists test.graph_unique__dbt_backup 
  ...
[0m07:36:14.288220 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.289502 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_unique (execute): 2024-05-17 07:36:14.235649 => 2024-05-17 07:36:14.289418
[0m07:36:14.290079 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b60b370>]}
[0m07:36:14.290416 [info ] [Thread-2 (]: 66 of 90 OK created sql table model test.graph_unique .......................... [[32mOK[0m in 0.06s]
[0m07:36:14.290779 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.graph_unique
[0m07:36:14.292936 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_edge
[0m07:36:14.293771 [info ] [Thread-1 (]: 67 of 90 START sql table model test.graph_edge ................................. [RUN]
[0m07:36:14.294941 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_edge'
[0m07:36:14.295234 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_edge)
[0m07:36:14.295399 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_edge
[0m07:36:14.301063 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_edge"
[0m07:36:14.301757 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_edge (compile): 2024-05-17 07:36:14.295496 => 2024-05-17 07:36:14.301670
[0m07:36:14.301999 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_edge
[0m07:36:14.306026 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

            

    
        create table test.graph_edge__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.graph_unique
-- depends_on: test.graph_tuples




with join_left as (
    select key_number as node_id_left, node_left
    from test.graph_tuples x
    join test.graph_unique  y on x.hash = y.key_hash
)


select node_id_left, key_number as node_id_right, node_id_left as group_id, 1 as has_changed 
from join_left x
join test.graph_unique  y on x.node_left = y.key_hash





    )
        ...
[0m07:36:14.323348 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.328434 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

    select name, type from system.columns where table = 'graph_edge__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:14.333215 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.334610 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_edge"
[0m07:36:14.335254 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

  
    
    
        
        insert into test.graph_edge__dbt_backup ("node_id_left", "node_id_right", "group_id", "has_changed")
  -- depends_on: test.graph_unique
-- depends_on: test.graph_tuples




with join_left as (
    select key_number as node_id_left, node_left
    from test.graph_tuples x
    join test.graph_unique  y on x.hash = y.key_hash
)


select node_id_left, key_number as node_id_right, node_id_left as group_id, 1 as has_changed 
from join_left x
join test.graph_unique  y on x.node_left = y.key_hash





  ...
[0m07:36:14.347333 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.348744 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */
EXCHANGE TABLES test.graph_edge__dbt_backup AND test.graph_edge 
  
  ...
[0m07:36:14.352118 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.354935 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

        insert into test.graph_edge(node_id_left, node_id_right, group_id, has_changed)
                    select
                        node_id_right,
                        node_id_left,
                        group_id,
                        has_changed
                    from test.graph_edge;
      ...
[0m07:36:14.361157 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.364632 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */
drop table if exists test.graph_edge__dbt_backup 
  ...
[0m07:36:14.367756 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.369411 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_edge (execute): 2024-05-17 07:36:14.302121 => 2024-05-17 07:36:14.369340
[0m07:36:14.370018 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81ef070>]}
[0m07:36:14.370388 [info ] [Thread-1 (]: 67 of 90 OK created sql table model test.graph_edge ............................ [[32mOK[0m in 0.08s]
[0m07:36:14.370734 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_edge
[0m07:36:14.371936 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.graph_glue
[0m07:36:14.373594 [info ] [Thread-2 (]: 68 of 90 START sql table model test.graph_glue ................................. [RUN]
[0m07:36:14.374350 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_glue'
[0m07:36:14.374636 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_glue)
[0m07:36:14.374842 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.graph_glue
[0m07:36:14.380116 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_glue"
[0m07:36:14.380753 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_glue (compile): 2024-05-17 07:36:14.374951 => 2024-05-17 07:36:14.380683
[0m07:36:14.380943 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.graph_glue
[0m07:36:14.390836 [debug] [Thread-2 (]: Running iteration 0
[0m07:36:14.391583 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m07:36:14.429796 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m07:36:14.431050 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m07:36:14.455907 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.456973 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m07:36:14.701192 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.24 seconds
[0m07:36:14.702893 [debug] [Thread-2 (]: VALUE: 1
[0m07:36:14.703225 [debug] [Thread-2 (]: Running iteration 1
[0m07:36:14.703854 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m07:36:14.728150 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.729586 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m07:36:14.755229 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:14.756419 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m07:36:14.762715 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.764190 [debug] [Thread-2 (]: VALUE: 0
[0m07:36:14.764557 [debug] [Thread-2 (]: Running iteration 2
[0m07:36:14.764738 [debug] [Thread-2 (]: Running iteration 3
[0m07:36:14.764848 [debug] [Thread-2 (]: Running iteration 4
[0m07:36:14.764989 [debug] [Thread-2 (]: Running iteration 5
[0m07:36:14.765090 [debug] [Thread-2 (]: Running iteration 6
[0m07:36:14.765189 [debug] [Thread-2 (]: Running iteration 7
[0m07:36:14.765284 [debug] [Thread-2 (]: Running iteration 8
[0m07:36:14.765442 [debug] [Thread-2 (]: Running iteration 9
[0m07:36:14.765558 [debug] [Thread-2 (]: Running iteration 10
[0m07:36:14.765654 [debug] [Thread-2 (]: Running iteration 11
[0m07:36:14.765751 [debug] [Thread-2 (]: Running iteration 12
[0m07:36:14.765845 [debug] [Thread-2 (]: Running iteration 13
[0m07:36:14.767716 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

            

    
        create table test.graph_glue__dbt_backup
        
  
        
  engine = MergeTree()
        order by (node_id_left)
        
        
        
        empty
    as (
        -- depends_on: test.graph_edge




select 
    node_id_left,
    min(group_id) as qid
from test.graph_edge
group by node_id_left





    )
        ...
[0m07:36:14.783374 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.786857 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    select name, type from system.columns where table = 'graph_glue__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:14.791786 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.793610 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_glue"
[0m07:36:14.794771 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

  
    
    
        
        insert into test.graph_glue__dbt_backup ("node_id_left", "qid")
  -- depends_on: test.graph_edge




select 
    node_id_left,
    min(group_id) as qid
from test.graph_edge
group by node_id_left





  ...
[0m07:36:14.806500 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.809054 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */
EXCHANGE TABLES test.graph_glue__dbt_backup AND test.graph_glue 
  
  ...
[0m07:36:14.814078 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.824548 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */
drop table if exists test.graph_glue__dbt_backup 
  ...
[0m07:36:14.828624 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.830512 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_glue (execute): 2024-05-17 07:36:14.381035 => 2024-05-17 07:36:14.830415
[0m07:36:14.831393 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81fe080>]}
[0m07:36:14.832081 [info ] [Thread-2 (]: 68 of 90 OK created sql table model test.graph_glue ............................ [[32mOK[0m in 0.46s]
[0m07:36:14.832541 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.graph_glue
[0m07:36:14.833860 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_qid
[0m07:36:14.834456 [info ] [Thread-1 (]: 69 of 90 START sql table model test.graph_qid .................................. [RUN]
[0m07:36:14.835357 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_qid'
[0m07:36:14.835702 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_qid)
[0m07:36:14.835911 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_qid
[0m07:36:14.841984 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_qid"
[0m07:36:14.842932 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_qid (compile): 2024-05-17 07:36:14.836013 => 2024-05-17 07:36:14.842803
[0m07:36:14.843279 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_qid
[0m07:36:14.848494 [debug] [Thread-1 (]: Running iteration 0
[0m07:36:14.849147 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m07:36:14.874789 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:14.876678 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m07:36:14.897752 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.898941 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m07:36:14.903704 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.904776 [debug] [Thread-1 (]: VALUE: 0
[0m07:36:14.904986 [debug] [Thread-1 (]: Running iteration 1
[0m07:36:14.905102 [debug] [Thread-1 (]: Running iteration 2
[0m07:36:14.905202 [debug] [Thread-1 (]: Running iteration 3
[0m07:36:14.905301 [debug] [Thread-1 (]: Running iteration 4
[0m07:36:14.905399 [debug] [Thread-1 (]: Running iteration 5
[0m07:36:14.905495 [debug] [Thread-1 (]: Running iteration 6
[0m07:36:14.905592 [debug] [Thread-1 (]: Running iteration 7
[0m07:36:14.905689 [debug] [Thread-1 (]: Running iteration 8
[0m07:36:14.905785 [debug] [Thread-1 (]: Running iteration 9
[0m07:36:14.905881 [debug] [Thread-1 (]: Running iteration 10
[0m07:36:14.905976 [debug] [Thread-1 (]: Running iteration 11
[0m07:36:14.906076 [debug] [Thread-1 (]: Running iteration 12
[0m07:36:14.906172 [debug] [Thread-1 (]: Running iteration 13
[0m07:36:14.907674 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

            

    
        create table test.graph_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.graph_lookup
-- depends_on: test.graph_glue




select  
    toLowCardinality(
        tupleElement(key_hash, 1)
    ) as __link,
    tupleElement(key_hash, 2) as __datetime,
    tupleElement(key_hash, 3) as __id,
    qid
from test.graph_glue  -- Объединение с таблицей graph_glue
join test.graph_lookup on key_number = node_id_left  -- Соединение с таблицей graph_lookup





    )
        ...
[0m07:36:14.924011 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:14.928320 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    select name, type from system.columns where table = 'graph_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:14.933709 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.935274 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_qid"
[0m07:36:14.935884 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

  
    
    
        
        insert into test.graph_qid__dbt_backup ("__link", "__datetime", "__id", "qid")
  -- depends_on: test.graph_lookup
-- depends_on: test.graph_glue




select  
    toLowCardinality(
        tupleElement(key_hash, 1)
    ) as __link,
    tupleElement(key_hash, 2) as __datetime,
    tupleElement(key_hash, 3) as __id,
    qid
from test.graph_glue  -- Объединение с таблицей graph_glue
join test.graph_lookup on key_number = node_id_left  -- Соединение с таблицей graph_lookup





  ...
[0m07:36:14.944247 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:14.945795 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */
EXCHANGE TABLES test.graph_qid__dbt_backup AND test.graph_qid 
  
  ...
[0m07:36:14.949832 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.953596 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */
drop table if exists test.graph_qid__dbt_backup 
  ...
[0m07:36:14.957700 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.959578 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_qid (execute): 2024-05-17 07:36:14.843403 => 2024-05-17 07:36:14.959517
[0m07:36:14.960243 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9bf0f70>]}
[0m07:36:14.960618 [info ] [Thread-1 (]: 69 of 90 OK created sql table model test.graph_qid ............................. [[32mOK[0m in 0.13s]
[0m07:36:14.960951 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_qid
[0m07:36:14.962371 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.full_events
[0m07:36:14.963758 [info ] [Thread-2 (]: 70 of 90 START sql table model test.full_events ................................ [RUN]
[0m07:36:14.964509 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_events'
[0m07:36:14.964721 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_events)
[0m07:36:14.964895 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.full_events
[0m07:36:14.971540 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m07:36:14.975923 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.977282 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m07:36:14.981483 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.983132 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m07:36:14.988234 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.989963 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m07:36:14.994728 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:14.996423 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m07:36:15.001342 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.003035 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m07:36:15.008043 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.009598 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m07:36:15.015315 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.017278 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m07:36:15.022241 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.023541 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m07:36:15.029613 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.031244 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m07:36:15.035562 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.037430 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_events"
[0m07:36:15.037842 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_events (compile): 2024-05-17 07:36:14.964997 => 2024-05-17 07:36:15.037778
[0m07:36:15.038020 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.full_events
[0m07:36:15.042138 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

            

    
        create table test.full_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.graph_qid
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry

WITH t0 AS (
SELECT * FROM test.link_events
LEFT JOIN test.graph_qid USING (__id, __link, __datetime)
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT t1.*, link_registry_appprofilematching.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t1 
LEFT JOIN link_registry_appprofilematching USING (AppMetricaDeviceHash,CrmUserHash) 
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m07:36:15.084719 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m07:36:15.087501 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    select name, type from system.columns where table = 'full_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.092605 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.094746 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_events"
[0m07:36:15.095176 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

  
    
    
        
        insert into test.full_events__dbt_backup ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "qid", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.graph_qid
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry

WITH t0 AS (
SELECT * FROM test.link_events
LEFT JOIN test.graph_qid USING (__id, __link, __datetime)
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT t1.*, link_registry_appprofilematching.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t1 
LEFT JOIN link_registry_appprofilematching USING (AppMetricaDeviceHash,CrmUserHash) 
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  ...
[0m07:36:15.149175 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m07:36:15.151035 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */
EXCHANGE TABLES test.full_events__dbt_backup AND test.full_events 
  
  ...
[0m07:36:15.154954 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.158710 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */
drop table if exists test.full_events__dbt_backup 
  ...
[0m07:36:15.162885 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.164363 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_events (execute): 2024-05-17 07:36:15.038108 => 2024-05-17 07:36:15.164302
[0m07:36:15.164899 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea813d510>]}
[0m07:36:15.165224 [info ] [Thread-2 (]: 70 of 90 OK created sql table model test.full_events ........................... [[32mOK[0m in 0.20s]
[0m07:36:15.165562 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.full_events
[0m07:36:15.167187 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m07:36:15.167645 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m07:36:15.168415 [info ] [Thread-1 (]: 71 of 90 START sql table model test.attr_myfirstfunnel_prepare_with_qid ........ [RUN]
[0m07:36:15.169924 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid'
[0m07:36:15.170146 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid)
[0m07:36:15.170415 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m07:36:15.178396 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"
[0m07:36:15.168930 [info ] [Thread-2 (]: 72 of 90 START sql table model test.attr_mysecondfunnel_prepare_with_qid ....... [RUN]
[0m07:36:15.179807 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid'
[0m07:36:15.180209 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid)
[0m07:36:15.180440 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m07:36:15.185542 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"
[0m07:36:15.186289 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid (compile): 2024-05-17 07:36:15.170569 => 2024-05-17 07:36:15.186178
[0m07:36:15.186568 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m07:36:15.191485 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

            

    
        create table test.attr_myfirstfunnel_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



    )
        ...
[0m07:36:15.193181 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid (compile): 2024-05-17 07:36:15.180628 => 2024-05-17 07:36:15.192981
[0m07:36:15.193821 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m07:36:15.199052 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

            

    
        create table test.attr_mysecondfunnel_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



    )
        ...
[0m07:36:15.216054 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.219967 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.223069 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.226741 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.228057 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.233612 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"
[0m07:36:15.234790 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.237526 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"
[0m07:36:15.239096 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_prepare_with_qid__dbt_backup ("qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



  ...
[0m07:36:15.240391 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_prepare_with_qid__dbt_backup ("qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



  ...
[0m07:36:15.260045 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.261382 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */
EXCHANGE TABLES test.attr_myfirstfunnel_prepare_with_qid__dbt_backup AND test.attr_myfirstfunnel_prepare_with_qid 
  
  ...
[0m07:36:15.262801 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.264230 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */
EXCHANGE TABLES test.attr_mysecondfunnel_prepare_with_qid__dbt_backup AND test.attr_mysecondfunnel_prepare_with_qid 
  
  ...
[0m07:36:15.267599 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.272695 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */
drop table if exists test.attr_myfirstfunnel_prepare_with_qid__dbt_backup 
  ...
[0m07:36:15.273574 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.278720 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */
drop table if exists test.attr_mysecondfunnel_prepare_with_qid__dbt_backup 
  ...
[0m07:36:15.281952 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.282592 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.284815 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid (execute): 2024-05-17 07:36:15.194531 => 2024-05-17 07:36:15.284709
[0m07:36:15.286278 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid (execute): 2024-05-17 07:36:15.186905 => 2024-05-17 07:36:15.286218
[0m07:36:15.287179 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81b7130>]}
[0m07:36:15.288085 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea82496c0>]}
[0m07:36:15.288818 [info ] [Thread-2 (]: 72 of 90 OK created sql table model test.attr_mysecondfunnel_prepare_with_qid .. [[32mOK[0m in 0.11s]
[0m07:36:15.289411 [info ] [Thread-1 (]: 71 of 90 OK created sql table model test.attr_myfirstfunnel_prepare_with_qid ... [[32mOK[0m in 0.12s]
[0m07:36:15.290184 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m07:36:15.290725 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m07:36:15.292543 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m07:36:15.293003 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m07:36:15.293594 [info ] [Thread-2 (]: 73 of 90 START sql table model test.attr_myfirstfunnel_create_events ........... [RUN]
[0m07:36:15.294353 [info ] [Thread-1 (]: 74 of 90 START sql table model test.attr_mysecondfunnel_create_events .......... [RUN]
[0m07:36:15.295454 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_create_events'
[0m07:36:15.296935 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_create_events'
[0m07:36:15.297390 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_create_events)
[0m07:36:15.297827 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_create_events)
[0m07:36:15.298187 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m07:36:15.298462 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m07:36:15.313226 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"
[0m07:36:15.322277 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"
[0m07:36:15.323464 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_events (compile): 2024-05-17 07:36:15.298759 => 2024-05-17 07:36:15.323322
[0m07:36:15.323901 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m07:36:15.328309 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

            

    
        create table test.attr_myfirstfunnel_create_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'VisitStat'  and osName = 'web'  THEN  1
        
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  2
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  3
        WHEN __link = 'AppDeeplinkStat'  THEN  3
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  4
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'VisitStat' THEN 'visits_step'
        
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_myfirstfunnel_prepare_with_qid





    )
        ...
[0m07:36:15.329939 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_events (compile): 2024-05-17 07:36:15.313694 => 2024-05-17 07:36:15.329754
[0m07:36:15.330618 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m07:36:15.336608 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

            

    
        create table test.attr_mysecondfunnel_create_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  1
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  2
        WHEN __link = 'AppDeeplinkStat'  THEN  2
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  3
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_mysecondfunnel_prepare_with_qid





    )
        ...
[0m07:36:15.346676 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.349917 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_create_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.352883 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.355661 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_create_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.356527 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.360472 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"
[0m07:36:15.361322 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_create_events__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step")
  -- depends_on: test.attr_myfirstfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'VisitStat'  and osName = 'web'  THEN  1
        
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  2
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  3
        WHEN __link = 'AppDeeplinkStat'  THEN  3
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  4
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'VisitStat' THEN 'visits_step'
        
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_myfirstfunnel_prepare_with_qid





  ...
[0m07:36:15.363075 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.365259 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"
[0m07:36:15.365717 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_create_events__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step")
  -- depends_on: test.attr_mysecondfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  1
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  2
        WHEN __link = 'AppDeeplinkStat'  THEN  2
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  3
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_mysecondfunnel_prepare_with_qid





  ...
[0m07:36:15.369665 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.371107 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */
EXCHANGE TABLES test.attr_myfirstfunnel_create_events__dbt_backup AND test.attr_myfirstfunnel_create_events 
  
  ...
[0m07:36:15.373169 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.374534 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */
EXCHANGE TABLES test.attr_mysecondfunnel_create_events__dbt_backup AND test.attr_mysecondfunnel_create_events 
  
  ...
[0m07:36:15.376018 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.380730 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */
drop table if exists test.attr_myfirstfunnel_create_events__dbt_backup 
  ...
[0m07:36:15.381596 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.457739 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */
drop table if exists test.attr_mysecondfunnel_create_events__dbt_backup 
  ...
[0m07:36:15.458626 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m07:36:15.460831 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_events (execute): 2024-05-17 07:36:15.324042 => 2024-05-17 07:36:15.460757
[0m07:36:15.461690 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea827b070>]}
[0m07:36:15.462542 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.463076 [info ] [Thread-2 (]: 73 of 90 OK created sql table model test.attr_myfirstfunnel_create_events ...... [[32mOK[0m in 0.17s]
[0m07:36:15.464837 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_events (execute): 2024-05-17 07:36:15.331215 => 2024-05-17 07:36:15.464774
[0m07:36:15.465429 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m07:36:15.466353 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b7c4760>]}
[0m07:36:15.468061 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m07:36:15.467338 [info ] [Thread-1 (]: 74 of 90 OK created sql table model test.attr_mysecondfunnel_create_events ..... [[32mOK[0m in 0.17s]
[0m07:36:15.469388 [info ] [Thread-2 (]: 75 of 90 START sql table model test.attr_myfirstfunnel_add_row_number .......... [RUN]
[0m07:36:15.470332 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m07:36:15.471333 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number'
[0m07:36:15.472218 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number)
[0m07:36:15.473249 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m07:36:15.479766 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"
[0m07:36:15.480331 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m07:36:15.481062 [info ] [Thread-1 (]: 76 of 90 START sql table model test.attr_mysecondfunnel_add_row_number ......... [RUN]
[0m07:36:15.482346 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number'
[0m07:36:15.482981 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number (compile): 2024-05-17 07:36:15.473543 => 2024-05-17 07:36:15.482794
[0m07:36:15.483230 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number)
[0m07:36:15.483788 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m07:36:15.484392 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m07:36:15.489191 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

            

    
        create table test.attr_myfirstfunnel_add_row_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_myfirstfunnel_create_events





    )
        ...
[0m07:36:15.493727 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"
[0m07:36:15.495422 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number (compile): 2024-05-17 07:36:15.489663 => 2024-05-17 07:36:15.495257
[0m07:36:15.495863 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m07:36:15.501122 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

            

    
        create table test.attr_mysecondfunnel_add_row_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_mysecondfunnel_create_events





    )
        ...
[0m07:36:15.511044 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.514785 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_add_row_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.517876 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.521948 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_add_row_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.523974 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.525957 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"
[0m07:36:15.526921 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_add_row_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step", "__rn")
  -- depends_on: test.attr_myfirstfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_myfirstfunnel_create_events





  ...
[0m07:36:15.527951 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.530884 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"
[0m07:36:15.531436 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_add_row_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step", "__rn")
  -- depends_on: test.attr_mysecondfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_mysecondfunnel_create_events





  ...
[0m07:36:15.538097 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.539077 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.540986 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */
EXCHANGE TABLES test.attr_mysecondfunnel_add_row_number__dbt_backup AND test.attr_mysecondfunnel_add_row_number 
  
  ...
[0m07:36:15.543094 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */
EXCHANGE TABLES test.attr_myfirstfunnel_add_row_number__dbt_backup AND test.attr_myfirstfunnel_add_row_number 
  
  ...
[0m07:36:15.548534 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.552748 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */
drop table if exists test.attr_mysecondfunnel_add_row_number__dbt_backup 
  ...
[0m07:36:15.554305 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.559260 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */
drop table if exists test.attr_myfirstfunnel_add_row_number__dbt_backup 
  ...
[0m07:36:15.560078 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.562861 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number (execute): 2024-05-17 07:36:15.496024 => 2024-05-17 07:36:15.562730
[0m07:36:15.563908 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea82c93c0>]}
[0m07:36:15.564638 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.565135 [info ] [Thread-1 (]: 76 of 90 OK created sql table model test.attr_mysecondfunnel_add_row_number .... [[32mOK[0m in 0.08s]
[0m07:36:15.567745 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number (execute): 2024-05-17 07:36:15.484768 => 2024-05-17 07:36:15.567678
[0m07:36:15.568416 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m07:36:15.569592 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea827b070>]}
[0m07:36:15.570709 [info ] [Thread-2 (]: 75 of 90 OK created sql table model test.attr_myfirstfunnel_add_row_number ..... [[32mOK[0m in 0.10s]
[0m07:36:15.571561 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m07:36:15.572284 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m07:36:15.572882 [info ] [Thread-1 (]: 77 of 90 START sql table model test.attr_mysecondfunnel_find_new_period ........ [RUN]
[0m07:36:15.574133 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period'
[0m07:36:15.575463 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m07:36:15.575911 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period)
[0m07:36:15.576543 [info ] [Thread-2 (]: 78 of 90 START sql table model test.attr_myfirstfunnel_find_new_period ......... [RUN]
[0m07:36:15.577139 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m07:36:15.578299 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period'
[0m07:36:15.589914 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period)
[0m07:36:15.589731 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"
[0m07:36:15.590971 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m07:36:15.598786 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"
[0m07:36:15.599393 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period (compile): 2024-05-17 07:36:15.578876 => 2024-05-17 07:36:15.599298
[0m07:36:15.599614 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m07:36:15.604201 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

            

    
        create table test.attr_mysecondfunnel_find_new_period__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_mysecondfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





    )
        ...
[0m07:36:15.605484 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period (compile): 2024-05-17 07:36:15.591789 => 2024-05-17 07:36:15.605319
[0m07:36:15.606247 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m07:36:15.612635 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

            

    
        create table test.attr_myfirstfunnel_find_new_period__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3, 4] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_myfirstfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'VisitStat' and toDate(__datetime) - toDate(prep_new_period) < 
             90  THEN false
        
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





    )
        ...
[0m07:36:15.627168 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.631297 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_find_new_period__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.634512 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.638189 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_find_new_period__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.639130 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.642493 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"
[0m07:36:15.645652 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_find_new_period__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period")
  -- depends_on: test.attr_mysecondfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_mysecondfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





  ...
[0m07:36:15.647631 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.649243 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"
[0m07:36:15.649670 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_find_new_period__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period")
  -- depends_on: test.attr_myfirstfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3, 4] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_myfirstfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'VisitStat' and toDate(__datetime) - toDate(prep_new_period) < 
             90  THEN false
        
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





  ...
[0m07:36:15.656895 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.658760 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */
EXCHANGE TABLES test.attr_mysecondfunnel_find_new_period__dbt_backup AND test.attr_mysecondfunnel_find_new_period 
  
  ...
[0m07:36:15.660309 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.662328 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */
EXCHANGE TABLES test.attr_myfirstfunnel_find_new_period__dbt_backup AND test.attr_myfirstfunnel_find_new_period 
  
  ...
[0m07:36:15.663978 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.667805 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */
drop table if exists test.attr_mysecondfunnel_find_new_period__dbt_backup 
  ...
[0m07:36:15.668659 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.673980 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */
drop table if exists test.attr_myfirstfunnel_find_new_period__dbt_backup 
  ...
[0m07:36:15.677077 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.678075 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.680101 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period (execute): 2024-05-17 07:36:15.599705 => 2024-05-17 07:36:15.680026
[0m07:36:15.682547 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period (execute): 2024-05-17 07:36:15.606528 => 2024-05-17 07:36:15.682487
[0m07:36:15.683607 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea9e5a320>]}
[0m07:36:15.684271 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81eed10>]}
[0m07:36:15.684814 [info ] [Thread-1 (]: 77 of 90 OK created sql table model test.attr_mysecondfunnel_find_new_period ... [[32mOK[0m in 0.11s]
[0m07:36:15.685445 [info ] [Thread-2 (]: 78 of 90 OK created sql table model test.attr_myfirstfunnel_find_new_period .... [[32mOK[0m in 0.11s]
[0m07:36:15.686267 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m07:36:15.687011 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m07:36:15.688846 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m07:36:15.689413 [info ] [Thread-1 (]: 79 of 90 START sql table model test.attr_mysecondfunnel_calculate_period_number  [RUN]
[0m07:36:15.690233 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m07:36:15.691570 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number'
[0m07:36:15.692334 [info ] [Thread-2 (]: 80 of 90 START sql table model test.attr_myfirstfunnel_calculate_period_number . [RUN]
[0m07:36:15.692793 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number)
[0m07:36:15.693596 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number'
[0m07:36:15.694104 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m07:36:15.694474 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number)
[0m07:36:15.699634 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"
[0m07:36:15.700246 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m07:36:15.703995 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"
[0m07:36:15.704638 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number (compile): 2024-05-17 07:36:15.700719 => 2024-05-17 07:36:15.704542
[0m07:36:15.704910 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m07:36:15.709243 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

            

    
        create table test.attr_myfirstfunnel_calculate_period_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_myfirstfunnel_find_new_period





    )
        ...
[0m07:36:15.710015 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number (compile): 2024-05-17 07:36:15.694786 => 2024-05-17 07:36:15.709806
[0m07:36:15.712385 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m07:36:15.719554 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

            

    
        create table test.attr_mysecondfunnel_calculate_period_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_mysecondfunnel_find_new_period





    )
        ...
[0m07:36:15.727462 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.730814 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_calculate_period_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.734938 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.738026 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_calculate_period_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.739435 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.741715 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"
[0m07:36:15.743167 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_calculate_period_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period", "__period_number")
  -- depends_on: test.attr_myfirstfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_myfirstfunnel_find_new_period





  ...
[0m07:36:15.744678 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.746639 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"
[0m07:36:15.747737 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_calculate_period_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period", "__period_number")
  -- depends_on: test.attr_mysecondfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_mysecondfunnel_find_new_period





  ...
[0m07:36:15.753662 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.755072 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */
EXCHANGE TABLES test.attr_myfirstfunnel_calculate_period_number__dbt_backup AND test.attr_myfirstfunnel_calculate_period_number 
  
  ...
[0m07:36:15.756209 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.759067 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */
EXCHANGE TABLES test.attr_mysecondfunnel_calculate_period_number__dbt_backup AND test.attr_mysecondfunnel_calculate_period_number 
  
  ...
[0m07:36:15.761343 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.766702 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */
drop table if exists test.attr_myfirstfunnel_calculate_period_number__dbt_backup 
  ...
[0m07:36:15.767535 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.773262 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */
drop table if exists test.attr_mysecondfunnel_calculate_period_number__dbt_backup 
  ...
[0m07:36:15.776337 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.778181 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number (execute): 2024-05-17 07:36:15.705019 => 2024-05-17 07:36:15.778114
[0m07:36:15.779042 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.779909 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b7c8670>]}
[0m07:36:15.781838 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number (execute): 2024-05-17 07:36:15.712879 => 2024-05-17 07:36:15.781770
[0m07:36:15.782604 [info ] [Thread-2 (]: 80 of 90 OK created sql table model test.attr_myfirstfunnel_calculate_period_number  [[32mOK[0m in 0.09s]
[0m07:36:15.783535 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b7cafb0>]}
[0m07:36:15.784055 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m07:36:15.784593 [info ] [Thread-1 (]: 79 of 90 OK created sql table model test.attr_mysecondfunnel_calculate_period_number  [[32mOK[0m in 0.09s]
[0m07:36:15.785214 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m07:36:15.786832 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m07:36:15.787751 [info ] [Thread-2 (]: 81 of 90 START sql table model test.attr_myfirstfunnel_create_missed_steps ..... [RUN]
[0m07:36:15.788324 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m07:36:15.789683 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps'
[0m07:36:15.790423 [info ] [Thread-1 (]: 82 of 90 START sql table model test.attr_mysecondfunnel_create_missed_steps .... [RUN]
[0m07:36:15.791009 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps)
[0m07:36:15.792322 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps'
[0m07:36:15.792856 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m07:36:15.793076 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps)
[0m07:36:15.801897 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"
[0m07:36:15.802527 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m07:36:15.807112 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"
[0m07:36:15.807930 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps (compile): 2024-05-17 07:36:15.793271 => 2024-05-17 07:36:15.807757
[0m07:36:15.808691 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps (compile): 2024-05-17 07:36:15.803127 => 2024-05-17 07:36:15.808612
[0m07:36:15.809162 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m07:36:15.809905 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m07:36:15.815501 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

            

    
        create table test.attr_myfirstfunnel_create_missed_steps__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_myfirstfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





    )
        ...
[0m07:36:15.820951 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

            

    
        create table test.attr_mysecondfunnel_create_missed_steps__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_mysecondfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





    )
        ...
[0m07:36:15.846894 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.847689 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:15.850931 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_create_missed_steps__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.854347 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_create_missed_steps__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.859142 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.860218 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.862426 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"
[0m07:36:15.864577 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"
[0m07:36:15.865915 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_create_missed_steps__dbt_backup ("qid", "__link", "__id", "__priority", "__datetime", "__period_number", "__if_missed", "__step", "__rn")
  -- depends_on: test.attr_mysecondfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_mysecondfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





  ...
[0m07:36:15.867196 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_create_missed_steps__dbt_backup ("qid", "__link", "__id", "__priority", "__datetime", "__period_number", "__if_missed", "__step", "__rn")
  -- depends_on: test.attr_myfirstfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_myfirstfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





  ...
[0m07:36:15.884799 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.886181 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */
EXCHANGE TABLES test.attr_myfirstfunnel_create_missed_steps__dbt_backup AND test.attr_myfirstfunnel_create_missed_steps 
  
  ...
[0m07:36:15.891493 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.897303 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */
drop table if exists test.attr_myfirstfunnel_create_missed_steps__dbt_backup 
  ...
[0m07:36:15.898938 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:15.900222 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */
EXCHANGE TABLES test.attr_mysecondfunnel_create_missed_steps__dbt_backup AND test.attr_mysecondfunnel_create_missed_steps 
  
  ...
[0m07:36:15.901156 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.903833 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps (execute): 2024-05-17 07:36:15.810330 => 2024-05-17 07:36:15.903748
[0m07:36:15.904760 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8213d30>]}
[0m07:36:15.905468 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.906026 [info ] [Thread-2 (]: 81 of 90 OK created sql table model test.attr_myfirstfunnel_create_missed_steps  [[32mOK[0m in 0.12s]
[0m07:36:15.910128 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */
drop table if exists test.attr_mysecondfunnel_create_missed_steps__dbt_backup 
  ...
[0m07:36:15.910788 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m07:36:15.912874 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m07:36:15.913313 [info ] [Thread-2 (]: 83 of 90 START sql table model test.attr_myfirstfunnel_join_to_attr_prepare_with_qid  [RUN]
[0m07:36:15.913996 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid'
[0m07:36:15.914442 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid)
[0m07:36:15.914736 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m07:36:15.920978 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.929725 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"
[0m07:36:15.931149 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps (execute): 2024-05-17 07:36:15.816312 => 2024-05-17 07:36:15.931086
[0m07:36:15.932561 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80ba1d0>]}
[0m07:36:15.933671 [info ] [Thread-1 (]: 82 of 90 OK created sql table model test.attr_mysecondfunnel_create_missed_steps  [[32mOK[0m in 0.14s]
[0m07:36:15.934384 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m07:36:15.936611 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid (compile): 2024-05-17 07:36:15.914974 => 2024-05-17 07:36:15.936434
[0m07:36:15.937428 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m07:36:15.938072 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m07:36:15.938511 [info ] [Thread-1 (]: 84 of 90 START sql table model test.attr_mysecondfunnel_join_to_attr_prepare_with_qid  [RUN]
[0m07:36:15.944376 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

            

    
        create table test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__period_number,__datetime,__priority,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_prepare_with_qid
-- depends_on: test.attr_myfirstfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,

    CASE
    WHEN __priority = 3 and not __if_missed = 1 THEN 1
    WHEN __priority = 2 and not __if_missed = 1 THEN 2
    WHEN __priority = 1 and not __if_missed = 1 THEN 3
    
    ELSE 0
    END as __first_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без веб сессии]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 4 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_myfirstfunnel_prepare_with_qid AS x
join test.attr_myfirstfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





    )
        ...
[0m07:36:15.945257 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid'
[0m07:36:15.946950 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid)
[0m07:36:15.947739 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m07:36:15.955023 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"
[0m07:36:15.955501 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid (compile): 2024-05-17 07:36:15.948004 => 2024-05-17 07:36:15.955431
[0m07:36:15.955704 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m07:36:15.961218 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

            

    
        create table test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__period_number,__datetime,__priority,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_prepare_with_qid
-- depends_on: test.attr_mysecondfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 3 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_mysecondfunnel_prepare_with_qid AS x
join test.attr_mysecondfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





    )
        ...
[0m07:36:15.968639 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.971922 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.977154 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:15.980006 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"
[0m07:36:15.980861 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_prepare_with_qid
-- depends_on: test.attr_myfirstfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,

    CASE
    WHEN __priority = 3 and not __if_missed = 1 THEN 1
    WHEN __priority = 2 and not __if_missed = 1 THEN 2
    WHEN __priority = 1 and not __if_missed = 1 THEN 3
    
    ELSE 0
    END as __first_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без веб сессии]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 4 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_myfirstfunnel_prepare_with_qid AS x
join test.attr_myfirstfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





  ...
[0m07:36:15.983933 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:15.987208 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:15.993710 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:15.996791 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"
[0m07:36:15.997505 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "adSourceDirty")
  -- depends_on: test.attr_mysecondfunnel_prepare_with_qid
-- depends_on: test.attr_mysecondfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 3 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_mysecondfunnel_prepare_with_qid AS x
join test.attr_mysecondfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





  ...
[0m07:36:16.000267 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:16.001612 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */
EXCHANGE TABLES test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup AND test.attr_myfirstfunnel_join_to_attr_prepare_with_qid 
  
  ...
[0m07:36:16.005011 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:16.011380 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */
drop table if exists test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup 
  ...
[0m07:36:16.015301 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:16.016047 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:16.017679 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */
EXCHANGE TABLES test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup AND test.attr_mysecondfunnel_join_to_attr_prepare_with_qid 
  
  ...
[0m07:36:16.019117 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid (execute): 2024-05-17 07:36:15.938866 => 2024-05-17 07:36:16.019050
[0m07:36:16.021049 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea8336680>]}
[0m07:36:16.021740 [info ] [Thread-2 (]: 83 of 90 OK created sql table model test.attr_myfirstfunnel_join_to_attr_prepare_with_qid  [[32mOK[0m in 0.11s]
[0m07:36:16.022529 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m07:36:16.023839 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m07:36:16.024342 [info ] [Thread-2 (]: 85 of 90 START sql table model test.attr_myfirstfunnel_model ................... [RUN]
[0m07:36:16.025294 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_model'
[0m07:36:16.026229 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:16.026629 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_model)
[0m07:36:16.030817 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */
drop table if exists test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup 
  ...
[0m07:36:16.031428 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m07:36:16.043822 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:16.047423 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_model"
[0m07:36:16.049620 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid (execute): 2024-05-17 07:36:15.955802 => 2024-05-17 07:36:16.049556
[0m07:36:16.051449 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81b7bb0>]}
[0m07:36:16.052121 [info ] [Thread-1 (]: 84 of 90 OK created sql table model test.attr_mysecondfunnel_join_to_attr_prepare_with_qid  [[32mOK[0m in 0.11s]
[0m07:36:16.053052 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m07:36:16.053566 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_model (compile): 2024-05-17 07:36:16.032603 => 2024-05-17 07:36:16.053472
[0m07:36:16.054715 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m07:36:16.055037 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m07:36:16.055616 [info ] [Thread-1 (]: 86 of 90 START sql table model test.attr_mysecondfunnel_model .................. [RUN]
[0m07:36:16.061114 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

            

    
        create table test.attr_myfirstfunnel_model__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

        ,max(__first_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_first_click_rank

     from test.attr_myfirstfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

         ,__first_click_rank = __max_first_click_rank as  __first_click__rank_condition
         ,sum(case when __first_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __first_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_adSourceDirty
        
     

    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_adSourceDirty
        
     


 FROM target_count



    )
        ...
[0m07:36:16.062008 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_model'
[0m07:36:16.064182 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_model)
[0m07:36:16.064937 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m07:36:16.072262 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_model"
[0m07:36:16.072782 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_model (compile): 2024-05-17 07:36:16.065198 => 2024-05-17 07:36:16.072698
[0m07:36:16.072999 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m07:36:16.077772 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

            

    
        create table test.attr_mysecondfunnel_model__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

     from test.attr_mysecondfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_adSourceDirty
        
     


 FROM target_count



    )
        ...
[0m07:36:16.089972 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:16.093867 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_model__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:16.100218 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:16.102009 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_model"
[0m07:36:16.103370 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:16.107638 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_model__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:16.108400 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_model__dbt_backup ("qid", "__datetime", "__id", "__priority", "__if_missed", "__link", "__period_number", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

        ,max(__first_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_first_click_rank

     from test.attr_myfirstfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

         ,__first_click_rank = __max_first_click_rank as  __first_click__rank_condition
         ,sum(case when __first_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __first_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_adSourceDirty
        
     

    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_adSourceDirty
        
     


 FROM target_count



  ...
[0m07:36:16.114735 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:16.116626 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_model"
[0m07:36:16.117123 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_model__dbt_backup ("qid", "__datetime", "__id", "__priority", "__if_missed", "__link", "__period_number", "__mysecondfunnel_last_click_utmSource", "__mysecondfunnel_last_click_utmMedium", "__mysecondfunnel_last_click_utmCampaign", "__mysecondfunnel_last_click_utmTerm", "__mysecondfunnel_last_click_utmContent", "__mysecondfunnel_last_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

     from test.attr_mysecondfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_adSourceDirty
        
     


 FROM target_count



  ...
[0m07:36:16.133483 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:16.134625 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */
EXCHANGE TABLES test.attr_myfirstfunnel_model__dbt_backup AND test.attr_myfirstfunnel_model 
  
  ...
[0m07:36:16.135347 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m07:36:16.138045 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */
EXCHANGE TABLES test.attr_mysecondfunnel_model__dbt_backup AND test.attr_mysecondfunnel_model 
  
  ...
[0m07:36:16.141158 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:16.146785 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */
drop table if exists test.attr_myfirstfunnel_model__dbt_backup 
  ...
[0m07:36:16.147429 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:16.152400 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */
drop table if exists test.attr_mysecondfunnel_model__dbt_backup 
  ...
[0m07:36:16.153429 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:16.155845 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_model (execute): 2024-05-17 07:36:16.056186 => 2024-05-17 07:36:16.155768
[0m07:36:16.156624 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea824b190>]}
[0m07:36:16.157253 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:16.161089 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_model (execute): 2024-05-17 07:36:16.073096 => 2024-05-17 07:36:16.161003
[0m07:36:16.161852 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea80b8970>]}
[0m07:36:16.975987 [info ] [Thread-2 (]: 85 of 90 OK created sql table model test.attr_myfirstfunnel_model .............. [[32mOK[0m in 0.13s]
[0m07:36:16.978244 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m07:36:16.977371 [info ] [Thread-1 (]: 86 of 90 OK created sql table model test.attr_mysecondfunnel_model ............. [[32mOK[0m in 0.10s]
[0m07:36:16.979691 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m07:36:16.981669 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m07:36:16.982266 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m07:36:16.982956 [info ] [Thread-2 (]: 87 of 90 START sql table model test.attr_myfirstfunnel_final_table ............. [RUN]
[0m07:36:16.983826 [info ] [Thread-1 (]: 88 of 90 START sql table model test.attr_mysecondfunnel_final_table ............ [RUN]
[0m07:36:16.985149 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_final_table'
[0m07:36:16.986218 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_final_table'
[0m07:36:16.986901 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_final_table)
[0m07:36:16.987625 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_final_table)
[0m07:36:16.988410 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m07:36:16.989102 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m07:36:16.996805 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"
[0m07:36:17.000720 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"
[0m07:36:17.002179 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_final_table (compile): 2024-05-17 07:36:16.997175 => 2024-05-17 07:36:17.001992
[0m07:36:17.002689 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_final_table (compile): 2024-05-17 07:36:16.989562 => 2024-05-17 07:36:17.002587
[0m07:36:17.003114 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m07:36:17.003544 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m07:36:17.007451 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

            

    
        create table test.attr_mysecondfunnel_final_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_mysecondfunnel_join_to_attr_prepare_with_qid
        join  test.attr_mysecondfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



    )
        ...
[0m07:36:17.015161 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

            

    
        create table test.attr_myfirstfunnel_final_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_myfirstfunnel_join_to_attr_prepare_with_qid
        join  test.attr_myfirstfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



    )
        ...
[0m07:36:17.048434 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:17.051456 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_final_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:17.052339 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m07:36:17.056306 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_final_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:17.062199 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.064607 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"
[0m07:36:17.065532 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.069005 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"
[0m07:36:17.069689 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_final_table__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "adSourceDirty", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_myfirstfunnel_join_to_attr_prepare_with_qid
        join  test.attr_myfirstfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



  ...
[0m07:36:17.070228 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_final_table__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "adSourceDirty", "__mysecondfunnel_last_click_utmSource", "__mysecondfunnel_last_click_utmMedium", "__mysecondfunnel_last_click_utmCampaign", "__mysecondfunnel_last_click_utmTerm", "__mysecondfunnel_last_click_utmContent", "__mysecondfunnel_last_click_adSourceDirty")
  -- depends_on: test.attr_mysecondfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_mysecondfunnel_join_to_attr_prepare_with_qid
        join  test.attr_mysecondfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



  ...
[0m07:36:17.096326 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:17.097831 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */
EXCHANGE TABLES test.attr_mysecondfunnel_final_table__dbt_backup AND test.attr_mysecondfunnel_final_table 
  
  ...
[0m07:36:17.098561 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m07:36:17.101287 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */
EXCHANGE TABLES test.attr_myfirstfunnel_final_table__dbt_backup AND test.attr_myfirstfunnel_final_table 
  
  ...
[0m07:36:17.104933 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.109767 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */
drop table if exists test.attr_mysecondfunnel_final_table__dbt_backup 
  ...
[0m07:36:17.110581 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.115815 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */
drop table if exists test.attr_myfirstfunnel_final_table__dbt_backup 
  ...
[0m07:36:17.119131 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.120119 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:17.121937 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_final_table (execute): 2024-05-17 07:36:17.003752 => 2024-05-17 07:36:17.121874
[0m07:36:17.124061 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_final_table (execute): 2024-05-17 07:36:17.008008 => 2024-05-17 07:36:17.123965
[0m07:36:17.125292 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea820fd30>]}
[0m07:36:17.125971 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81e55d0>]}
[0m07:36:17.126500 [info ] [Thread-1 (]: 88 of 90 OK created sql table model test.attr_mysecondfunnel_final_table ....... [[32mOK[0m in 0.14s]
[0m07:36:17.127401 [info ] [Thread-2 (]: 87 of 90 OK created sql table model test.attr_myfirstfunnel_final_table ........ [[32mOK[0m in 0.14s]
[0m07:36:17.128258 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m07:36:17.128972 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m07:36:17.130902 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.dataset_event_table
[0m07:36:17.131435 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.dataset_event_table2
[0m07:36:17.131763 [info ] [Thread-1 (]: 89 of 90 START sql table model test.dataset_event_table ........................ [RUN]
[0m07:36:17.132328 [info ] [Thread-2 (]: 90 of 90 START sql table model test.dataset_event_table2 ....................... [RUN]
[0m07:36:17.134325 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.dataset_event_table'
[0m07:36:17.135308 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.dataset_event_table2'
[0m07:36:17.135721 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.dataset_event_table)
[0m07:36:17.136221 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.dataset_event_table2)
[0m07:36:17.136733 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.dataset_event_table
[0m07:36:17.137170 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.dataset_event_table2
[0m07:36:17.153837 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:17.247758 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:17.252426 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.253318 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.257497 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_final_table'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:17.262672 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'full_events'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:17.268480 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.269210 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.278890 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.dataset_event_table"
[0m07:36:17.288087 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.dataset_event_table2"
[0m07:36:17.289505 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table (compile): 2024-05-17 07:36:17.137646 => 2024-05-17 07:36:17.289317
[0m07:36:17.290294 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.dataset_event_table
[0m07:36:17.295038 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

            

    
        create table test.dataset_event_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table



   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
    )
        ...
[0m07:36:17.295540 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table2 (compile): 2024-05-17 07:36:17.154213 => 2024-05-17 07:36:17.295401
[0m07:36:17.297124 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.dataset_event_table2
[0m07:36:17.303670 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

            

    
        create table test.dataset_event_table2__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table


   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
    )
        ...
[0m07:36:17.358811 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m07:36:17.361777 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'dataset_event_table2__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:17.366016 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m07:36:17.369045 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'dataset_event_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m07:36:17.370364 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.374263 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.dataset_event_table2"
[0m07:36:17.377490 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

  
    
    
        
        insert into test.dataset_event_table2__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "event_datetime", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "transactionId", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "YmClientHash", "qid", "AppProfileMatchingHash")
  -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table


   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
  ...
[0m07:36:17.381748 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.385133 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.dataset_event_table"
[0m07:36:17.386040 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

  
    
    
        
        insert into test.dataset_event_table__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "__period_number", "__if_missed", "__priority", "__step", "qid", "event_datetime", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "transactionId", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "YmClientHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table



   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
  ...
[0m07:36:17.485259 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.11 seconds
[0m07:36:17.486608 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */
EXCHANGE TABLES test.dataset_event_table2__dbt_backup AND test.dataset_event_table2 
  
  ...
[0m07:36:17.491793 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:17.495837 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */
drop table if exists test.dataset_event_table2__dbt_backup 
  ...
[0m07:36:17.500864 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:17.502798 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table2 (execute): 2024-05-17 07:36:17.297465 => 2024-05-17 07:36:17.502730
[0m07:36:17.503480 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b7d8a90>]}
[0m07:36:17.503869 [info ] [Thread-2 (]: 90 of 90 OK created sql table model test.dataset_event_table2 .................. [[32mOK[0m in 0.37s]
[0m07:36:17.504252 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.dataset_event_table2
[0m07:36:17.519985 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.13 seconds
[0m07:36:17.521434 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */
EXCHANGE TABLES test.dataset_event_table__dbt_backup AND test.dataset_event_table 
  
  ...
[0m07:36:17.527545 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m07:36:17.531333 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */
drop table if exists test.dataset_event_table__dbt_backup 
  ...
[0m07:36:17.535573 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m07:36:17.537364 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table (execute): 2024-05-17 07:36:17.290873 => 2024-05-17 07:36:17.537303
[0m07:36:17.537965 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '124fcb61-2e12-4751-a168-5954c3b5b5aa', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fce9b7d9ff0>]}
[0m07:36:17.538322 [info ] [Thread-1 (]: 89 of 90 OK created sql table model test.dataset_event_table ................... [[32mOK[0m in 0.40s]
[0m07:36:17.538647 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.dataset_event_table
[0m07:36:17.541876 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
[0m07:36:17.542577 [debug] [MainThread]: Connection 'master' was properly closed.
[0m07:36:17.542792 [debug] [MainThread]: Connection 'model.etlcraft_integration_tests.dataset_event_table' was left open.
[0m07:36:17.542935 [debug] [MainThread]: On model.etlcraft_integration_tests.dataset_event_table: Close
[0m07:36:17.543035 [debug] [MainThread]: Connection 'model.etlcraft_integration_tests.dataset_event_table2' was left open.
[0m07:36:17.543141 [debug] [MainThread]: On model.etlcraft_integration_tests.dataset_event_table2: Close
[0m07:36:17.543753 [info ] [MainThread]: 
[0m07:36:17.544025 [info ] [MainThread]: Finished running 19 view models, 27 incremental models, 44 table models in 0 hours 0 minutes and 11.13 seconds (11.13s).
[0m07:36:17.546810 [debug] [MainThread]: Command end result
[0m07:36:17.568887 [info ] [MainThread]: 
[0m07:36:17.569358 [info ] [MainThread]: [32mCompleted successfully[0m
[0m07:36:17.569655 [info ] [MainThread]: 
[0m07:36:17.569964 [info ] [MainThread]: Done. PASS=90 WARN=0 ERROR=0 SKIP=0 TOTAL=90
[0m07:36:17.570611 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcebd7ee860>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcebd8ead40>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fcea81103d0>]}
[0m07:36:17.570980 [debug] [MainThread]: Flushing usage events


============================== 2024-06-04 10:56:10.655225 | dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b ==============================
[0m10:56:10.655225 [info ] [MainThread]: Running with dbt=1.4.7
[0m10:56:10.658116 [debug] [MainThread]: running dbt with arguments {'write_json': True, 'use_colors': True, 'printer_width': 80, 'version_check': True, 'partial_parse': True, 'static_parser': True, 'profiles_dir': '/home/natalia/.dbt', 'send_anonymous_usage_stats': True, 'quiet': False, 'no_print': False, 'cache_selected_only': False, 'select': ['models/1_silos/1_normalize/+'], 'which': 'run', 'rpc_method': 'run', 'indirect_selection': 'eager'}
[0m10:56:10.658716 [debug] [MainThread]: Tracking: tracking
[0m10:56:10.663164 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a63c1bd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a65739d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a6572530>]}
[0m10:56:10.695890 [debug] [MainThread]: checksum: f4f4cdde9b257b3a8e3791263c44f34b0bd0facc33ef1ba84a563bd63785ce73, vars: {}, profile: None, target: None, version: 1.4.7
[0m10:56:10.988953 [debug] [MainThread]: Partial parsing enabled: 24 files deleted, 25 files added, 4 files changed.
[0m10:56:10.990075 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_mt_default_banners_statistics.csv
[0m10:56:10.990358 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_appmetrica_default_events.csv
[0m10:56:10.990507 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_adjust_default_events.csv
[0m10:56:10.990724 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_utmcraft_default_utmresult.csv
[0m10:56:10.990876 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_appmetrica_default_installations.csv
[0m10:56:10.991000 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_ym_default_yandex_metrika_stream.csv
[0m10:56:10.991706 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_mt_default_banners.csv
[0m10:56:10.991854 [debug] [MainThread]: Partial parsing: added file: etlcraft://macros/other/zero_date.sql
[0m10:56:10.991976 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_adjust_default_cohorts.csv
[0m10:56:10.992095 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_appmetrica_default_viewitemevents.csv
[0m10:56:10.992212 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_appmetrica_default_profiles.csv
[0m10:56:10.992379 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_adjust_default_event_metrics.csv
[0m10:56:10.992518 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_appmetrica_default_deeplinks.csv
[0m10:56:10.992716 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_vkads_default_ad_groups_statistics.csv
[0m10:56:10.992848 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_yd_default_custom_report.csv
[0m10:56:10.993420 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_adjust_default_network.csv
[0m10:56:10.993634 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_appmetrica_default_sessions_starts.csv
[0m10:56:10.993775 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_vkads_default_ad_plans.csv
[0m10:56:10.993975 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_vkads_default_banners_statistics.csv
[0m10:56:10.994100 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_appmetrica_default__viewitemevents.csv
[0m10:56:10.994216 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_mt_default_campaigns.csv
[0m10:56:10.994330 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_vkads_default_ad_plans_statistics.csv
[0m10:56:10.994446 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_sheets_default_planCosts.csv
[0m10:56:10.994577 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_vkads_default_ad_groups.csv
[0m10:56:10.994719 [debug] [MainThread]: Partial parsing: added file: etlcraft_integration_tests://seeds/datacraft_clientname_raw__stream_vkads_default_banners.csv
[0m10:56:10.994817 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_vkads_datestat_default_testaccount_banners_statistics.csv
[0m10:56:10.994901 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_vkads_datestat_default_testaccount_banners.csv
[0m10:56:10.995050 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_appmetrica_events_default_testaccount_viewitemevents.csv
[0m10:56:10.995152 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_vkads_periodstat_default_testaccount_ad_plans.csv
[0m10:56:10.995236 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_mt_datestat_default_testaccount_banners_statistics.csv
[0m10:56:10.995317 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_appmetrica_events_default_testaccount_sessions_starts.csv
[0m10:56:10.995396 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_vkads_datestat_default_testaccount_ad_plans_statistics.csv
[0m10:56:10.995475 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_utmcraft_registry_default_testaccount_utmresult.csv
[0m10:56:10.995555 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_adjust_events_default_testaccount_event_metrics.csv
[0m10:56:10.995676 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_vkads_datestat_default_testaccount_ad_groups.csv
[0m10:56:10.995763 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_appmetrica_events_default_testaccount_deeplinks.csv
[0m10:56:10.995897 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_appmetrica_registry_default_testaccount_profiles.csv
[0m10:56:10.995977 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_mt_registry_default_testaccount_campaigns.csv
[0m10:56:10.996055 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_appmetrica_events_default_testaccount_events.csv
[0m10:56:10.996135 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_sheets_periodstat_default_testaccount_planCosts.csv
[0m10:56:10.996215 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_vkads_datestat_default_testaccount_ad_groups_statistics.csv
[0m10:56:10.996294 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_adjust_registry_default_testaccount_events.csv
[0m10:56:10.996373 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_mt_registry_default_testaccount_banners.csv
[0m10:56:10.996452 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_adjust_events_default_testaccount_network.csv
[0m10:56:10.996531 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_appmetrica_events_default_testaccount__viewitemevents.csv
[0m10:56:10.996647 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_adjust_events_default_testaccount_cohorts.csv
[0m10:56:10.996736 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_ym_events_default_testaccount_yandex_metrika_stream.csv
[0m10:56:10.996815 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_appmetrica_events_default_testaccount_installations.csv
[0m10:56:10.996893 [debug] [MainThread]: Partial parsing: deleted file: etlcraft_integration_tests://seeds/_airbyte_raw_yd_datestat_default_testaccount_custom_report.csv
[0m10:56:11.005186 [debug] [MainThread]: Partial parsing: updated file: etlcraft://macros/other/custom_union_relations_source.sql
[0m10:56:11.007197 [debug] [MainThread]: Partial parsing: updated file: etlcraft://macros/metadata/metadata.sql
[0m10:56:11.008484 [debug] [MainThread]: Partial parsing: updated file: etlcraft://macros/hash/hash.sql
[0m10:56:11.008792 [debug] [MainThread]: Partial parsing: updated file: etlcraft://macros/normalize/normalize.sql
[0m10:56:11.164615 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/adjust/incremental_adjust_events_default_cohorts.sql
[0m10:56:11.243413 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/adjust/incremental_adjust_events_default_cohorts.sql
[0m10:56:11.244653 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/adjust/normalize_adjust_events_default_cohorts.sql
[0m10:56:11.263172 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/adjust/normalize_adjust_events_default_cohorts.sql
[0m10:56:11.264398 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/adjust/incremental_adjust_events_default_event_metrics.sql
[0m10:56:11.269196 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/adjust/incremental_adjust_events_default_event_metrics.sql
[0m10:56:11.270317 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/adjust/normalize_adjust_events_default_event_metrics.sql
[0m10:56:11.274366 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/adjust/normalize_adjust_events_default_event_metrics.sql
[0m10:56:11.275433 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/adjust/incremental_adjust_events_default_network.sql
[0m10:56:11.280067 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/adjust/incremental_adjust_events_default_network.sql
[0m10:56:11.281125 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/adjust/normalize_adjust_events_default_network.sql
[0m10:56:11.286184 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/adjust/normalize_adjust_events_default_network.sql
[0m10:56:11.287242 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/adjust/incremental_adjust_registry_default_events.sql
[0m10:56:11.291553 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/adjust/incremental_adjust_registry_default_events.sql
[0m10:56:11.292707 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/adjust/normalize_adjust_registry_default_events.sql
[0m10:56:11.296851 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/adjust/normalize_adjust_registry_default_events.sql
[0m10:56:11.297947 [debug] [MainThread]: 1603: static parser failed on 7_dataset/dataset_event_table.sql
[0m10:56:11.309388 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 7_dataset/dataset_event_table.sql
[0m10:56:11.310658 [debug] [MainThread]: 1603: static parser failed on 7_dataset/dataset_event_table2.sql
[0m10:56:11.315848 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 7_dataset/dataset_event_table2.sql
[0m10:56:11.317132 [debug] [MainThread]: 1603: static parser failed on 6_attribution/9_final_table/attr_myfirstfunnel_final_table.sql
[0m10:56:11.325112 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/9_final_table/attr_myfirstfunnel_final_table.sql
[0m10:56:11.326522 [debug] [MainThread]: 1603: static parser failed on 6_attribution/8_model/attr_myfirstfunnel_model.sql
[0m10:56:11.342632 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/8_model/attr_myfirstfunnel_model.sql
[0m10:56:11.343817 [debug] [MainThread]: 1603: static parser failed on 6_attribution/9_final_table/attr_mysecondfunnel_final_table.sql
[0m10:56:11.347861 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/9_final_table/attr_mysecondfunnel_final_table.sql
[0m10:56:11.349047 [debug] [MainThread]: 1603: static parser failed on 6_attribution/8_model/attr_mysecondfunnel_model.sql
[0m10:56:11.355356 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/8_model/attr_mysecondfunnel_model.sql
[0m10:56:11.356525 [debug] [MainThread]: 1603: static parser failed on 6_attribution/7_join_to_attr_prepare_with_qid/attr_myfirstfunnel_join_to_attr_prepare_with_qid.sql
[0m10:56:11.369224 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/7_join_to_attr_prepare_with_qid/attr_myfirstfunnel_join_to_attr_prepare_with_qid.sql
[0m10:56:11.370358 [debug] [MainThread]: 1603: static parser failed on 6_attribution/6_create_missed_steps/attr_myfirstfunnel_create_missed_steps.sql
[0m10:56:11.376153 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/6_create_missed_steps/attr_myfirstfunnel_create_missed_steps.sql
[0m10:56:11.377447 [debug] [MainThread]: 1603: static parser failed on 6_attribution/5_calculate_period_number/attr_myfirstfunnel_calculate_period_number.sql
[0m10:56:11.383124 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/5_calculate_period_number/attr_myfirstfunnel_calculate_period_number.sql
[0m10:56:11.384511 [debug] [MainThread]: 1603: static parser failed on 6_attribution/4_find_new_period/attr_myfirstfunnel_find_new_period.sql
[0m10:56:11.395684 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/4_find_new_period/attr_myfirstfunnel_find_new_period.sql
[0m10:56:11.396846 [debug] [MainThread]: 1603: static parser failed on 6_attribution/3_add_row_number/attr_myfirstfunnel_add_row_number.sql
[0m10:56:11.402466 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/3_add_row_number/attr_myfirstfunnel_add_row_number.sql
[0m10:56:11.403797 [debug] [MainThread]: 1603: static parser failed on 6_attribution/2_create_events/attr_myfirstfunnel_create_events.sql
[0m10:56:11.414407 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/2_create_events/attr_myfirstfunnel_create_events.sql
[0m10:56:11.415597 [debug] [MainThread]: 1603: static parser failed on 6_attribution/1_prepare/attr_myfirstfunnel_prepare_with_qid.sql
[0m10:56:11.421559 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/1_prepare/attr_myfirstfunnel_prepare_with_qid.sql
[0m10:56:11.422851 [debug] [MainThread]: 1603: static parser failed on 6_attribution/7_join_to_attr_prepare_with_qid/attr_mysecondfunnel_join_to_attr_prepare_with_qid.sql
[0m10:56:11.429653 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/7_join_to_attr_prepare_with_qid/attr_mysecondfunnel_join_to_attr_prepare_with_qid.sql
[0m10:56:11.430808 [debug] [MainThread]: 1603: static parser failed on 6_attribution/6_create_missed_steps/attr_mysecondfunnel_create_missed_steps.sql
[0m10:56:11.435023 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/6_create_missed_steps/attr_mysecondfunnel_create_missed_steps.sql
[0m10:56:11.436194 [debug] [MainThread]: 1603: static parser failed on 6_attribution/5_calculate_period_number/attr_mysecondfunnel_calculate_period_number.sql
[0m10:56:11.440132 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/5_calculate_period_number/attr_mysecondfunnel_calculate_period_number.sql
[0m10:56:11.441309 [debug] [MainThread]: 1603: static parser failed on 6_attribution/4_find_new_period/attr_mysecondfunnel_find_new_period.sql
[0m10:56:11.448073 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/4_find_new_period/attr_mysecondfunnel_find_new_period.sql
[0m10:56:11.449213 [debug] [MainThread]: 1603: static parser failed on 6_attribution/3_add_row_number/attr_mysecondfunnel_add_row_number.sql
[0m10:56:11.497654 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/3_add_row_number/attr_mysecondfunnel_add_row_number.sql
[0m10:56:11.498858 [debug] [MainThread]: 1603: static parser failed on 6_attribution/2_create_events/attr_mysecondfunnel_create_events.sql
[0m10:56:11.504954 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/2_create_events/attr_mysecondfunnel_create_events.sql
[0m10:56:11.506216 [debug] [MainThread]: 1603: static parser failed on 6_attribution/1_prepare/attr_mysecondfunnel_prepare_with_qid.sql
[0m10:56:11.510625 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/1_prepare/attr_mysecondfunnel_prepare_with_qid.sql
[0m10:56:11.511998 [debug] [MainThread]: 1603: static parser failed on 5_full/full_events.sql
[0m10:56:11.544056 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 5_full/full_events.sql
[0m10:56:11.545223 [debug] [MainThread]: 1603: static parser failed on 4_graph/6_qid/graph_qid.sql
[0m10:56:11.558398 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/6_qid/graph_qid.sql
[0m10:56:11.559645 [debug] [MainThread]: 1603: static parser failed on 4_graph/5_glue/graph_glue.sql
[0m10:56:11.566129 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/5_glue/graph_glue.sql
[0m10:56:11.567441 [debug] [MainThread]: 1603: static parser failed on 4_graph/4_edge/graph_edge.sql
[0m10:56:11.574391 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/4_edge/graph_edge.sql
[0m10:56:11.575592 [debug] [MainThread]: 1603: static parser failed on 4_graph/3_unique/graph_unique.sql
[0m10:56:11.581587 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/3_unique/graph_unique.sql
[0m10:56:11.582800 [debug] [MainThread]: 1603: static parser failed on 4_graph/2_lookup/graph_lookup.sql
[0m10:56:11.588471 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/2_lookup/graph_lookup.sql
[0m10:56:11.589586 [debug] [MainThread]: 1603: static parser failed on 4_graph/1_tuples/graph_tuples.sql
[0m10:56:11.599874 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/1_tuples/graph_tuples.sql
[0m10:56:11.601227 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_events.sql
[0m10:56:11.614737 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_events.sql
[0m10:56:11.615810 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_events.sql
[0m10:56:11.661527 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_events.sql
[0m10:56:11.662980 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_events.sql
[0m10:56:11.675034 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_events.sql
[0m10:56:11.676329 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_appmetrica_events.sql
[0m10:56:11.733621 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_appmetrica_events.sql
[0m10:56:11.734915 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_deeplinks.sql
[0m10:56:11.740173 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_deeplinks.sql
[0m10:56:11.741375 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_deeplinks.sql
[0m10:56:11.745573 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_deeplinks.sql
[0m10:56:11.746631 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_events.sql
[0m10:56:11.751480 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_events.sql
[0m10:56:11.752628 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/manual/normalize_appmetrica_events_default_events.sql
[0m10:56:11.756954 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/manual/normalize_appmetrica_events_default_events.sql
[0m10:56:11.758032 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_installations.sql
[0m10:56:11.763522 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_installations.sql
[0m10:56:11.764609 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_installations.sql
[0m10:56:11.769145 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_installations.sql
[0m10:56:11.770249 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_screen_view.sql
[0m10:56:11.774938 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_screen_view.sql
[0m10:56:11.776310 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/manual/normalize_appmetrica_events_default_screen_view.sql
[0m10:56:11.780768 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/manual/normalize_appmetrica_events_default_screen_view.sql
[0m10:56:11.781891 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_sessions_starts.sql
[0m10:56:11.786810 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_sessions_starts.sql
[0m10:56:11.787868 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_sessions_starts.sql
[0m10:56:11.791906 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_sessions_starts.sql
[0m10:56:11.793021 [debug] [MainThread]: 1603: static parser failed on 5_full/full_datestat.sql
[0m10:56:11.800775 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 5_full/full_datestat.sql
[0m10:56:11.801986 [debug] [MainThread]: 1603: static parser failed on 5_full/full_periodstat.sql
[0m10:56:11.808853 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 5_full/full_periodstat.sql
[0m10:56:11.809972 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_registry_appprofilematching.sql
[0m10:56:11.814414 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_registry_appprofilematching.sql
[0m10:56:11.815532 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_registry_appprofilematching.sql
[0m10:56:11.823425 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_registry_appprofilematching.sql
[0m10:56:11.824537 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_registry_appprofilematching.sql
[0m10:56:11.828664 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_registry_appprofilematching.sql
[0m10:56:11.829698 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_appmetrica_registry_appprofilematching.sql
[0m10:56:11.836656 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_appmetrica_registry_appprofilematching.sql
[0m10:56:11.837716 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_registry_default_profiles.sql
[0m10:56:11.842113 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_registry_default_profiles.sql
[0m10:56:11.843329 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/normalize_appmetrica_registry_default_profiles.sql
[0m10:56:11.848003 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/normalize_appmetrica_registry_default_profiles.sql
[0m10:56:11.849055 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_datestat.sql
[0m10:56:11.853150 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_datestat.sql
[0m10:56:11.854635 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_datestat.sql
[0m10:56:11.861592 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_datestat.sql
[0m10:56:11.862645 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_datestat.sql
[0m10:56:11.867067 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_datestat.sql
[0m10:56:11.868339 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_mt_datestat.sql
[0m10:56:11.880793 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_mt_datestat.sql
[0m10:56:11.881935 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/mytarget/incremental_mt_datestat_default_banners_statistics.sql
[0m10:56:11.887092 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/mytarget/incremental_mt_datestat_default_banners_statistics.sql
[0m10:56:11.888269 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/mytarget/normalize_mt_datestat_default_banners_statistics.sql
[0m10:56:11.892132 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/mytarget/normalize_mt_datestat_default_banners_statistics.sql
[0m10:56:11.893301 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/mytarget/incremental_mt_registry_default_banners.sql
[0m10:56:11.897721 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/mytarget/incremental_mt_registry_default_banners.sql
[0m10:56:11.898800 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/mytarget/normalize_mt_registry_default_banners.sql
[0m10:56:11.903105 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/mytarget/normalize_mt_registry_default_banners.sql
[0m10:56:11.904178 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/mytarget/incremental_mt_registry_default_campaigns.sql
[0m10:56:11.909234 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/mytarget/incremental_mt_registry_default_campaigns.sql
[0m10:56:11.910365 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/mytarget/normalize_mt_registry_default_campaigns.sql
[0m10:56:11.914382 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/mytarget/normalize_mt_registry_default_campaigns.sql
[0m10:56:11.915421 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_periodstat.sql
[0m10:56:11.919503 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_periodstat.sql
[0m10:56:11.920576 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_periodstat.sql
[0m10:56:11.927096 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_periodstat.sql
[0m10:56:11.928166 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_periodstat.sql
[0m10:56:11.932857 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_periodstat.sql
[0m10:56:11.934081 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_sheets_periodstat.sql
[0m10:56:11.942029 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_sheets_periodstat.sql
[0m10:56:11.943176 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/sheets/incremental_sheets_periodstat_default_planCosts.sql
[0m10:56:11.948003 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/sheets/incremental_sheets_periodstat_default_planCosts.sql
[0m10:56:11.949328 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/sheets/normalize_sheets_periodstat_default_planCosts.sql
[0m10:56:11.953758 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/sheets/normalize_sheets_periodstat_default_planCosts.sql
[0m10:56:11.954908 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_registry_utmhashregistry.sql
[0m10:56:11.958648 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_registry_utmhashregistry.sql
[0m10:56:11.959674 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_registry_utmhashregistry.sql
[0m10:56:11.967109 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_registry_utmhashregistry.sql
[0m10:56:11.968360 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_registry_utmhashregistry.sql
[0m10:56:11.972370 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_registry_utmhashregistry.sql
[0m10:56:11.973538 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_utmcraft_registry_utmhashregistry.sql
[0m10:56:11.980766 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_utmcraft_registry_utmhashregistry.sql
[0m10:56:11.981897 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/utmcraft/incremental_utmcraft_registry_default_utmresult.sql
[0m10:56:11.986515 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/utmcraft/incremental_utmcraft_registry_default_utmresult.sql
[0m10:56:11.987600 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/utmcraft/normalize_utmcraft_registry_default_utmresult.sql
[0m10:56:11.991621 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/utmcraft/normalize_utmcraft_registry_default_utmresult.sql
[0m10:56:11.992774 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_vkads_datestat.sql
[0m10:56:12.003511 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_vkads_datestat.sql
[0m10:56:12.004680 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/vk_ads/incremental_vkads_datestat_default_ad_plans_statistics.sql
[0m10:56:12.009492 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/vk_ads/incremental_vkads_datestat_default_ad_plans_statistics.sql
[0m10:56:12.010580 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/vk_ads/normalize_vkads_datestat_default_ad_plans_statistics.sql
[0m10:56:12.014859 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/vk_ads/normalize_vkads_datestat_default_ad_plans_statistics.sql
[0m10:56:12.015965 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/vk_ads/incremental_vkads_periodstat_default_ad_plans.sql
[0m10:56:12.020492 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/vk_ads/incremental_vkads_periodstat_default_ad_plans.sql
[0m10:56:12.021579 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/vk_ads/normalize_vkads_periodstat_default_ad_plans.sql
[0m10:56:12.025975 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/vk_ads/normalize_vkads_periodstat_default_ad_plans.sql
[0m10:56:12.027180 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_yd_datestat.sql
[0m10:56:12.035949 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_yd_datestat.sql
[0m10:56:12.037050 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/yandex_direct/incremental_yd_datestat_default_custom_report.sql
[0m10:56:12.041980 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/yandex_direct/incremental_yd_datestat_default_custom_report.sql
[0m10:56:12.043183 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/yandex_direct/normalize_yd_datestat_default_custom_report.sql
[0m10:56:12.047291 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/yandex_direct/normalize_yd_datestat_default_custom_report.sql
[0m10:56:12.048324 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_ym_events.sql
[0m10:56:12.058079 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_ym_events.sql
[0m10:56:12.059154 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/ym/incremental_ym_events_default_yandex_metrika_stream.sql
[0m10:56:12.063802 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/ym/incremental_ym_events_default_yandex_metrika_stream.sql
[0m10:56:12.064864 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/ym/normalize_ym_events_default_yandex_metrika_stream.sql
[0m10:56:12.070483 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/ym/normalize_ym_events_default_yandex_metrika_stream.sql
[0m10:56:12.175760 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a5573f10>]}
[0m10:56:12.284891 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a56d3460>]}
[0m10:56:12.285336 [info ] [MainThread]: Found 90 models, 8 tests, 0 snapshots, 0 analyses, 532 macros, 0 operations, 24 seed files, 0 sources, 0 exposures, 0 metrics
[0m10:56:12.285656 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a56d33a0>]}
[0m10:56:12.292538 [info ] [MainThread]: 
[0m10:56:12.294655 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
[0m10:56:12.299784 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_schemas'
[0m10:56:12.307020 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m10:56:14.508391 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_schemas: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "connection_name": "list_schemas"} */

    select name from system.databases
  ...
[0m10:56:14.514730 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:14.527880 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_None_test'
[0m10:56:14.528538 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_None_test)
[0m10:56:14.550517 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_None_test: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "connection_name": "list_None_test"} */
select
      t.name as name,
      t.database as schema,
      if(engine not in ('MaterializedView', 'View'), 'table', 'view') as type,
      db.engine as db_engine
    from system.tables as t JOIN system.databases as db on t.database = db.name
    where schema = 'test'
  ...
[0m10:56:14.616234 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m10:56:14.634479 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a567add0>]}
[0m10:56:14.635173 [info ] [MainThread]: Concurrency: 2 threads (target='dev')
[0m10:56:14.635470 [info ] [MainThread]: 
[0m10:56:14.651988 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts
[0m10:56:14.652555 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics
[0m10:56:14.653214 [info ] [Thread-1 (]: 1 of 90 START sql view model test.normalize_adjust_events_default_cohorts ...... [RUN]
[0m10:56:14.653867 [info ] [Thread-2 (]: 2 of 90 START sql view model test.normalize_adjust_events_default_event_metrics  [RUN]
[0m10:56:14.654729 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts'
[0m10:56:14.659395 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics'
[0m10:56:14.659791 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts)
[0m10:56:14.660647 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics
[0m10:56:14.660968 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts
[0m10:56:14.697471 [debug] [Thread-2 (]: Opening a new connection, currently in state init
[0m10:56:14.698567 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_adjust_default_cohorts$')        
...
[0m10:56:14.779345 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m10:56:14.918354 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_adjust_default_cohorts'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:14.931838 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_adjust_default_event_metrics$')        
...
[0m10:56:14.944513 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:14.954499 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:14.970814 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_adjust_default_event_metrics'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:14.974183 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"
[0m10:56:14.976724 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts (compile): 2024-06-04 10:56:14.678537 => 2024-06-04 10:56:14.976506
[0m10:56:14.977173 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts
[0m10:56:14.991767 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.034894 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"
[0m10:56:15.041232 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"
[0m10:56:15.042952 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics (compile): 2024-06-04 10:56:14.661326 => 2024-06-04 10:56:15.042822
[0m10:56:15.043356 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics
[0m10:56:15.061490 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"
[0m10:56:15.062355 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */


  create view test.normalize_adjust_events_default_cohorts__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'country') AS country, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'event_name') AS event_name, 
        JSONExtractString(_airbyte_data, 'event_token') AS event_token, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'network') AS network, 
        JSONExtractString(_airbyte_data, 'period') AS period, 
        JSONExtractString(_airbyte_data, 'tracker_token') AS tracker_token,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_adjust_default_cohorts') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_adjust_default_cohorts
)

)
  )...
[0m10:56:15.064392 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */


  create view test.normalize_adjust_events_default_event_metrics__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'country') AS country, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'event_name') AS event_name, 
        JSONExtractString(_airbyte_data, 'event_token') AS event_token, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'network') AS network, 
        JSONExtractString(_airbyte_data, 'tracker_token') AS tracker_token,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_adjust_default_event_metrics') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_adjust_default_event_metrics
)

)
  )...
[0m10:56:15.086171 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.087007 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.094556 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    drop table if exists test.normalize_adjust_events_default_cohorts__dbt_backup 
  
  ...
[0m10:56:15.097813 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    drop table if exists test.normalize_adjust_events_default_event_metrics__dbt_backup 
  
  ...
[0m10:56:15.102823 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.103396 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.104465 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    rename table test.normalize_adjust_events_default_cohorts to test.normalize_adjust_events_default_cohorts__dbt_backup 
  
  ...
[0m10:56:15.106185 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    rename table test.normalize_adjust_events_default_event_metrics to test.normalize_adjust_events_default_event_metrics__dbt_backup 
  
  ...
[0m10:56:15.110406 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.118971 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    drop table if exists test.normalize_adjust_events_default_cohorts 
  
  ...
[0m10:56:15.119650 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.126472 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    drop table if exists test.normalize_adjust_events_default_event_metrics 
  
  ...
[0m10:56:15.130088 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.130949 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.132551 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    rename table test.normalize_adjust_events_default_cohorts__dbt_tmp to test.normalize_adjust_events_default_cohorts 
  
  ...
[0m10:56:15.134934 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    rename table test.normalize_adjust_events_default_event_metrics__dbt_tmp to test.normalize_adjust_events_default_event_metrics 
  
  ...
[0m10:56:15.139857 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.152314 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.196016 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */
drop table if exists test.normalize_adjust_events_default_event_metrics__dbt_backup 
  ...
[0m10:56:15.200384 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */
drop table if exists test.normalize_adjust_events_default_cohorts__dbt_backup 
  ...
[0m10:56:15.207312 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.208835 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics (execute): 2024-06-04 10:56:15.043530 => 2024-06-04 10:56:15.208745
[0m10:56:15.209546 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e33550>]}
[0m10:56:15.210820 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.210006 [info ] [Thread-2 (]: 2 of 90 OK created sql view model test.normalize_adjust_events_default_event_metrics  [[32mOK[0m in 0.55s]
[0m10:56:15.212549 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts (execute): 2024-06-04 10:56:14.977341 => 2024-06-04 10:56:15.212491
[0m10:56:15.214683 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics
[0m10:56:15.215555 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e332b0>]}
[0m10:56:15.216233 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_adjust_events_default_network
[0m10:56:15.217671 [info ] [Thread-1 (]: 1 of 90 OK created sql view model test.normalize_adjust_events_default_cohorts . [[32mOK[0m in 0.56s]
[0m10:56:15.219280 [info ] [Thread-2 (]: 3 of 90 START sql view model test.normalize_adjust_events_default_network ...... [RUN]
[0m10:56:15.220433 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts
[0m10:56:15.221422 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_adjust_events_default_network'
[0m10:56:15.222284 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_adjust_registry_default_events
[0m10:56:15.224021 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_adjust_events_default_network)
[0m10:56:15.224759 [info ] [Thread-1 (]: 4 of 90 START sql view model test.normalize_adjust_registry_default_events ..... [RUN]
[0m10:56:15.225302 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_adjust_events_default_network
[0m10:56:15.226104 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_adjust_registry_default_events'
[0m10:56:15.231264 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_adjust_default_network$')        
...
[0m10:56:15.231885 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_adjust_registry_default_events)
[0m10:56:15.233151 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_adjust_registry_default_events
[0m10:56:15.240291 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_adjust_default_events$')        
...
[0m10:56:15.248100 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.253501 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_adjust_default_network'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.260563 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.272122 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:15.275268 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_adjust_events_default_network"
[0m10:56:15.279819 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_adjust_default_events'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.281730 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_network (compile): 2024-06-04 10:56:15.226622 => 2024-06-04 10:56:15.281582
[0m10:56:15.282189 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_adjust_events_default_network
[0m10:56:15.288090 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.290500 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_adjust_events_default_network"
[0m10:56:15.301078 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"
[0m10:56:15.302761 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */


  create view test.normalize_adjust_events_default_network__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'clicks') AS clicks, 
        JSONExtractString(_airbyte_data, 'country') AS country, 
        JSONExtractString(_airbyte_data, 'country_code') AS country_code, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'impressions') AS impressions, 
        JSONExtractString(_airbyte_data, 'installs') AS installs, 
        JSONExtractString(_airbyte_data, 'network') AS network, 
        JSONExtractString(_airbyte_data, 'rejected_installs') AS rejected_installs, 
        JSONExtractString(_airbyte_data, 'sessions') AS sessions,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_adjust_default_network') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_adjust_default_network
)

)
  )...
[0m10:56:15.304058 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_registry_default_events (compile): 2024-06-04 10:56:15.233597 => 2024-06-04 10:56:15.303868
[0m10:56:15.304551 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_adjust_registry_default_events
[0m10:56:15.308730 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"
[0m10:56:15.309207 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */


  create view test.normalize_adjust_registry_default_events__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'app_token') AS app_token, 
        JSONExtractString(_airbyte_data, 'description') AS description, 
        JSONExtractString(_airbyte_data, 'formatting') AS formatting, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'is_skad_event') AS is_skad_event, 
        JSONExtractString(_airbyte_data, 'name') AS name, 
        JSONExtractString(_airbyte_data, 'section') AS section, 
        JSONExtractString(_airbyte_data, 'short_name') AS short_name, 
        JSONExtractString(_airbyte_data, 'tokens') AS tokens,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_adjust_default_events') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_adjust_default_events
)

)
  )...
[0m10:56:15.323968 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.327681 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    drop table if exists test.normalize_adjust_events_default_network__dbt_backup 
  
  ...
[0m10:56:15.328901 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.332799 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    drop table if exists test.normalize_adjust_registry_default_events__dbt_backup 
  
  ...
[0m10:56:15.333849 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.336302 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    rename table test.normalize_adjust_events_default_network to test.normalize_adjust_events_default_network__dbt_backup 
  
  ...
[0m10:56:15.338904 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.340569 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    rename table test.normalize_adjust_registry_default_events to test.normalize_adjust_registry_default_events__dbt_backup 
  
  ...
[0m10:56:15.341350 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.345743 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    drop table if exists test.normalize_adjust_events_default_network 
  
  ...
[0m10:56:15.346956 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.351580 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    drop table if exists test.normalize_adjust_registry_default_events 
  
  ...
[0m10:56:15.352933 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.355204 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    rename table test.normalize_adjust_events_default_network__dbt_tmp to test.normalize_adjust_events_default_network 
  
  ...
[0m10:56:15.356114 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.358541 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    rename table test.normalize_adjust_registry_default_events__dbt_tmp to test.normalize_adjust_registry_default_events 
  
  ...
[0m10:56:15.359527 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.366626 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.371265 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */
drop table if exists test.normalize_adjust_registry_default_events__dbt_backup 
  ...
[0m10:56:15.372054 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */
drop table if exists test.normalize_adjust_events_default_network__dbt_backup 
  ...
[0m10:56:15.377509 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.379432 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_registry_default_events (execute): 2024-06-04 10:56:15.304652 => 2024-06-04 10:56:15.379356
[0m10:56:15.380393 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.381785 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790538190>]}
[0m10:56:15.383938 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_network (execute): 2024-06-04 10:56:15.282410 => 2024-06-04 10:56:15.383825
[0m10:56:15.384756 [info ] [Thread-1 (]: 4 of 90 OK created sql view model test.normalize_adjust_registry_default_events  [[32mOK[0m in 0.16s]
[0m10:56:15.386392 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790543ac0>]}
[0m10:56:15.386982 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_adjust_registry_default_events
[0m10:56:15.387696 [info ] [Thread-2 (]: 3 of 90 OK created sql view model test.normalize_adjust_events_default_network . [[32mOK[0m in 0.17s]
[0m10:56:15.388761 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks
[0m10:56:15.390069 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_adjust_events_default_network
[0m10:56:15.390780 [info ] [Thread-1 (]: 5 of 90 START sql view model test.normalize_appmetrica_events_default_deeplinks  [RUN]
[0m10:56:15.391512 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_events
[0m10:56:15.393137 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks'
[0m10:56:15.394035 [info ] [Thread-2 (]: 6 of 90 START sql view model test.normalize_appmetrica_events_default_events ... [RUN]
[0m10:56:15.394623 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks)
[0m10:56:15.395763 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_events'
[0m10:56:15.396436 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks
[0m10:56:15.396939 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_events)
[0m10:56:15.404721 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_deeplinks$')        
...
[0m10:56:15.405293 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_events
[0m10:56:15.412745 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_events$')        
...
[0m10:56:15.417526 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.423615 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_deeplinks'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.424675 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.430410 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_events'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.438887 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.445378 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.456468 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"
[0m10:56:15.473662 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"
[0m10:56:15.474224 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks (compile): 2024-06-04 10:56:15.397390 => 2024-06-04 10:56:15.474140
[0m10:56:15.474569 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks
[0m10:56:15.478573 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"
[0m10:56:15.479004 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_events (compile): 2024-06-04 10:56:15.406996 => 2024-06-04 10:56:15.478883
[0m10:56:15.479595 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_events
[0m10:56:15.484530 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"
[0m10:56:15.485121 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */


  create view test.normalize_appmetrica_events_default_deeplinks__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'deeplink_url_parameters') AS deeplink_url_parameters, 
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS event_receive_datetime, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'publisher_name') AS publisher_name,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_deeplinks') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_deeplinks
)

)
  )...
[0m10:56:15.486397 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */


  create view test.normalize_appmetrica_events_default_events__dbt_tmp 
  
  as (
    SELECT * FROM (
SELECT
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'app_version_name') AS app_version_name, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'event_json') AS event_json, 
        JSONExtractString(_airbyte_data, 'event_name') AS event_name, 
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS event_receive_datetime, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'installation_id') AS installation_id, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'session_id') AS session_id,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_events') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_events
)

)
)
WHERE event_name != 'screen_view'
  )...
[0m10:56:15.498350 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.502023 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    drop table if exists test.normalize_appmetrica_events_default_deeplinks__dbt_backup 
  
  ...
[0m10:56:15.505784 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.507188 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    rename table test.normalize_appmetrica_events_default_deeplinks to test.normalize_appmetrica_events_default_deeplinks__dbt_backup 
  
  ...
[0m10:56:15.510803 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.513904 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    drop table if exists test.normalize_appmetrica_events_default_deeplinks 
  
  ...
[0m10:56:15.517080 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.518339 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    rename table test.normalize_appmetrica_events_default_deeplinks__dbt_tmp to test.normalize_appmetrica_events_default_deeplinks 
  
  ...
[0m10:56:15.521646 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.525839 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */
drop table if exists test.normalize_appmetrica_events_default_deeplinks__dbt_backup 
  ...
[0m10:56:15.529951 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.531439 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks (execute): 2024-06-04 10:56:15.474775 => 2024-06-04 10:56:15.531368
[0m10:56:15.532288 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7902afdf0>]}
[0m10:56:15.532841 [info ] [Thread-1 (]: 5 of 90 OK created sql view model test.normalize_appmetrica_events_default_deeplinks  [[32mOK[0m in 0.14s]
[0m10:56:15.533304 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks
[0m10:56:15.533706 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations
[0m10:56:15.534929 [info ] [Thread-1 (]: 7 of 90 START sql view model test.normalize_appmetrica_events_default_installations  [RUN]
[0m10:56:15.536248 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations'
[0m10:56:15.536481 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations)
[0m10:56:15.536635 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations
[0m10:56:15.542459 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_installations$')        
...
[0m10:56:15.545796 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m10:56:15.549194 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    drop table if exists test.normalize_appmetrica_events_default_events__dbt_backup 
  
  ...
[0m10:56:15.550104 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.555449 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_installations'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.556274 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.559812 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    rename table test.normalize_appmetrica_events_default_events to test.normalize_appmetrica_events_default_events__dbt_backup 
  
  ...
[0m10:56:15.562075 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.568893 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.578161 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    drop table if exists test.normalize_appmetrica_events_default_events 
  
  ...
[0m10:56:15.581477 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"
[0m10:56:15.582353 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations (compile): 2024-06-04 10:56:15.536727 => 2024-06-04 10:56:15.582194
[0m10:56:15.582881 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations
[0m10:56:15.588663 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"
[0m10:56:15.590566 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.594276 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    rename table test.normalize_appmetrica_events_default_events__dbt_tmp to test.normalize_appmetrica_events_default_events 
  
  ...
[0m10:56:15.594896 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */


  create view test.normalize_appmetrica_events_default_installations__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'install_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'click_datetime') AS click_datetime, 
        JSONExtractString(_airbyte_data, 'click_url_parameters') AS click_url_parameters, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'install_receive_datetime') AS install_receive_datetime, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'is_reinstallation') AS is_reinstallation, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'publisher_name') AS publisher_name,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_installations') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_installations
)

)
  )...
[0m10:56:15.599593 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.606919 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */
drop table if exists test.normalize_appmetrica_events_default_events__dbt_backup 
  ...
[0m10:56:15.612010 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.617389 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    drop table if exists test.normalize_appmetrica_events_default_installations__dbt_backup 
  
  ...
[0m10:56:15.618610 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.623693 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_events (execute): 2024-06-04 10:56:15.480161 => 2024-06-04 10:56:15.623512
[0m10:56:15.625383 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.626768 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7903033d0>]}
[0m10:56:15.628560 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    rename table test.normalize_appmetrica_events_default_installations to test.normalize_appmetrica_events_default_installations__dbt_backup 
  
  ...
[0m10:56:15.629511 [info ] [Thread-2 (]: 6 of 90 OK created sql view model test.normalize_appmetrica_events_default_events  [[32mOK[0m in 0.23s]
[0m10:56:15.631418 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_events
[0m10:56:15.631951 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view
[0m10:56:15.632915 [info ] [Thread-2 (]: 8 of 90 START sql view model test.normalize_appmetrica_events_default_screen_view  [RUN]
[0m10:56:15.634352 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view'
[0m10:56:15.634738 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view)
[0m10:56:15.635312 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.635755 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view
[0m10:56:15.638759 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    drop table if exists test.normalize_appmetrica_events_default_installations 
  
  ...
[0m10:56:15.643903 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_events$')        
...
[0m10:56:15.648741 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.649969 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    rename table test.normalize_appmetrica_events_default_installations__dbt_tmp to test.normalize_appmetrica_events_default_installations 
  
  ...
[0m10:56:15.652146 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.656301 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_events'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.657039 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.662094 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */
drop table if exists test.normalize_appmetrica_events_default_installations__dbt_backup 
  ...
[0m10:56:15.665893 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.666811 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.679376 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations (execute): 2024-06-04 10:56:15.583264 => 2024-06-04 10:56:15.679317
[0m10:56:15.686117 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790409840>]}
[0m10:56:15.688896 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"
[0m10:56:15.689692 [info ] [Thread-1 (]: 7 of 90 OK created sql view model test.normalize_appmetrica_events_default_installations  [[32mOK[0m in 0.15s]
[0m10:56:15.690819 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations
[0m10:56:15.691319 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view (compile): 2024-06-04 10:56:15.639180 => 2024-06-04 10:56:15.691203
[0m10:56:15.692106 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts
[0m10:56:15.692872 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view
[0m10:56:15.693718 [info ] [Thread-1 (]: 9 of 90 START sql view model test.normalize_appmetrica_events_default_sessions_starts  [RUN]
[0m10:56:15.699858 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"
[0m10:56:15.700634 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts'
[0m10:56:15.701577 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts)
[0m10:56:15.702347 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts
[0m10:56:15.706975 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_sessions_starts$')        
...
[0m10:56:15.708257 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */


  create view test.normalize_appmetrica_events_default_screen_view__dbt_tmp 
  
  as (
    WITH events_are_screen_view AS (SELECT *, 1 AS screen_view FROM (
SELECT
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'app_version_name') AS app_version_name, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'event_json') AS event_json, 
        JSONExtractString(_airbyte_data, 'event_name') AS event_name, 
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS event_receive_datetime, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'installation_id') AS installation_id, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'session_id') AS session_id,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_events') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_events
)

)
)
WHERE event_name = 'screen_view')


SELECT
    toDate(__date) AS __date,
    toDateTime(event_receive_datetime) AS event_receive_datetime,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    '3101143' AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    city AS cityName,
    os_name AS osName,
    profile_id AS crmUserId,
    __table_name,
    __emitted_at,
    session_id,
    sum(screen_view) AS screen_view
FROM events_are_screen_view
GROUP BY 
    __date,
    event_receive_datetime,
    mobileAdsId,
    accountName,
    appmetricaDeviceId,
    cityName,
    osName,
    crmUserId,
    __table_name,
    __emitted_at,
    session_id
  )...
[0m10:56:15.715257 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.719291 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_sessions_starts'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.724818 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.736253 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"
[0m10:56:15.736894 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts (compile): 2024-06-04 10:56:15.703008 => 2024-06-04 10:56:15.736810
[0m10:56:15.737156 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts
[0m10:56:15.742086 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"
[0m10:56:15.742564 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */


  create view test.normalize_appmetrica_events_default_sessions_starts__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'session_start_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'installation_id') AS installation_id, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'session_start_receive_datetime') AS session_start_receive_datetime,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_sessions_starts') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_sessions_starts
)

)
  )...
[0m10:56:15.756402 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.759597 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    drop table if exists test.normalize_appmetrica_events_default_sessions_starts__dbt_backup 
  
  ...
[0m10:56:15.762909 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.764018 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    rename table test.normalize_appmetrica_events_default_sessions_starts to test.normalize_appmetrica_events_default_sessions_starts__dbt_backup 
  
  ...
[0m10:56:15.767716 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.773047 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    drop table if exists test.normalize_appmetrica_events_default_sessions_starts 
  
  ...
[0m10:56:15.776986 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.778243 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    rename table test.normalize_appmetrica_events_default_sessions_starts__dbt_tmp to test.normalize_appmetrica_events_default_sessions_starts 
  
  ...
[0m10:56:15.782141 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.789451 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */
drop table if exists test.normalize_appmetrica_events_default_sessions_starts__dbt_backup 
  ...
[0m10:56:15.793499 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.794982 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts (execute): 2024-06-04 10:56:15.737265 => 2024-06-04 10:56:15.794907
[0m10:56:15.795738 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791dc3760>]}
[0m10:56:15.796283 [info ] [Thread-1 (]: 9 of 90 OK created sql view model test.normalize_appmetrica_events_default_sessions_starts  [[32mOK[0m in 0.10s]
[0m10:56:15.796640 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts
[0m10:56:15.797001 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles
[0m10:56:15.797599 [info ] [Thread-1 (]: 10 of 90 START sql view model test.normalize_appmetrica_registry_default_profiles  [RUN]
[0m10:56:15.798697 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.09 seconds
[0m10:56:15.800446 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles'
[0m10:56:15.804075 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    drop table if exists test.normalize_appmetrica_events_default_screen_view__dbt_backup 
  
  ...
[0m10:56:15.804636 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles)
[0m10:56:15.806449 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles
[0m10:56:15.810286 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_profiles$')        
...
[0m10:56:15.813979 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.815284 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    rename table test.normalize_appmetrica_events_default_screen_view to test.normalize_appmetrica_events_default_screen_view__dbt_backup 
  
  ...
[0m10:56:15.817196 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.822958 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_profiles'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.823657 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.828488 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    drop table if exists test.normalize_appmetrica_events_default_screen_view 
  
  ...
[0m10:56:15.833189 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.834997 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.837223 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    rename table test.normalize_appmetrica_events_default_screen_view__dbt_tmp to test.normalize_appmetrica_events_default_screen_view 
  
  ...
[0m10:56:15.847512 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"
[0m10:56:15.850134 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles (compile): 2024-06-04 10:56:15.806653 => 2024-06-04 10:56:15.849750
[0m10:56:15.850833 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles
[0m10:56:15.858537 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.866078 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"
[0m10:56:15.868949 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */
drop table if exists test.normalize_appmetrica_events_default_screen_view__dbt_backup 
  ...
[0m10:56:15.872014 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */


  create view test.normalize_appmetrica_registry_default_profiles__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_profiles') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_profiles
)

)
  )...
[0m10:56:15.878855 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.880579 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view (execute): 2024-06-04 10:56:15.694114 => 2024-06-04 10:56:15.880490
[0m10:56:15.881681 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e31990>]}
[0m10:56:15.882149 [info ] [Thread-2 (]: 8 of 90 OK created sql view model test.normalize_appmetrica_events_default_screen_view  [[32mOK[0m in 0.25s]
[0m10:56:15.882536 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view
[0m10:56:15.883036 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics
[0m10:56:15.884399 [info ] [Thread-2 (]: 11 of 90 START sql view model test.normalize_mt_datestat_default_banners_statistics  [RUN]
[0m10:56:15.886742 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics'
[0m10:56:15.887170 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics)
[0m10:56:15.887580 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics
[0m10:56:15.892637 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_mt_default_banners_statistics$')        
...
[0m10:56:15.895989 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.901475 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    drop table if exists test.normalize_appmetrica_registry_default_profiles__dbt_backup 
  
  ...
[0m10:56:15.903518 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.909749 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_mt_default_banners_statistics'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.913121 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.914981 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    rename table test.normalize_appmetrica_registry_default_profiles to test.normalize_appmetrica_registry_default_profiles__dbt_backup 
  
  ...
[0m10:56:15.917131 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.927040 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"
[0m10:56:15.927802 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.930816 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    drop table if exists test.normalize_appmetrica_registry_default_profiles 
  
  ...
[0m10:56:15.931987 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics (compile): 2024-06-04 10:56:15.887781 => 2024-06-04 10:56:15.931840
[0m10:56:15.932351 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics
[0m10:56:15.942375 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"
[0m10:56:15.943438 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.945468 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    rename table test.normalize_appmetrica_registry_default_profiles__dbt_tmp to test.normalize_appmetrica_registry_default_profiles 
  
  ...
[0m10:56:15.947608 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */


  create view test.normalize_mt_datestat_default_banners_statistics__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'banner_id') AS banner_id, 
        JSONExtractString(_airbyte_data, 'base') AS base, 
        JSONExtractString(_airbyte_data, 'date') AS date,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_mt_default_banners_statistics') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_mt_default_banners_statistics
)

)
  )...
[0m10:56:15.950452 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.956219 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */
drop table if exists test.normalize_appmetrica_registry_default_profiles__dbt_backup 
  ...
[0m10:56:15.960009 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:15.961286 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles (execute): 2024-06-04 10:56:15.851311 => 2024-06-04 10:56:15.961221
[0m10:56:15.961869 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e31cc0>]}
[0m10:56:15.962317 [info ] [Thread-1 (]: 10 of 90 OK created sql view model test.normalize_appmetrica_registry_default_profiles  [[32mOK[0m in 0.16s]
[0m10:56:15.962802 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles
[0m10:56:15.963193 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m10:56:15.964276 [info ] [Thread-1 (]: 12 of 90 START sql view model test.normalize_mt_registry_default_banners ....... [RUN]
[0m10:56:15.965418 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:15.966043 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_mt_registry_default_banners'
[0m10:56:15.970300 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    drop table if exists test.normalize_mt_datestat_default_banners_statistics__dbt_backup 
  
  ...
[0m10:56:15.970895 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_mt_registry_default_banners)
[0m10:56:15.972906 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m10:56:15.978038 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_mt_default_banners$')        
...
[0m10:56:15.979655 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.981326 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    rename table test.normalize_mt_datestat_default_banners_statistics to test.normalize_mt_datestat_default_banners_statistics__dbt_backup 
  
  ...
[0m10:56:15.986180 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.987179 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:15.990712 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_mt_default_banners'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:15.994589 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    drop table if exists test.normalize_mt_datestat_default_banners_statistics 
  
  ...
[0m10:56:15.998834 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.000180 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    rename table test.normalize_mt_datestat_default_banners_statistics__dbt_tmp to test.normalize_mt_datestat_default_banners_statistics 
  
  ...
[0m10:56:16.001171 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.008281 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.011915 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"
[0m10:56:16.019450 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */
drop table if exists test.normalize_mt_datestat_default_banners_statistics__dbt_backup 
  ...
[0m10:56:16.021635 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_banners (compile): 2024-06-04 10:56:15.973525 => 2024-06-04 10:56:16.021459
[0m10:56:16.022270 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m10:56:16.027115 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"
[0m10:56:16.027966 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.029533 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics (execute): 2024-06-04 10:56:15.932483 => 2024-06-04 10:56:16.029473
[0m10:56:16.029913 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */


  create view test.normalize_mt_registry_default_banners__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'campaign_id') AS campaign_id, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'textblocks') AS textblocks, 
        JSONExtractString(_airbyte_data, 'urls') AS urls,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_mt_default_banners') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_mt_default_banners
)

)
  )...
[0m10:56:16.031001 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e31960>]}
[0m10:56:16.033397 [info ] [Thread-2 (]: 11 of 90 OK created sql view model test.normalize_mt_datestat_default_banners_statistics  [[32mOK[0m in 0.14s]
[0m10:56:16.034172 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics
[0m10:56:16.034564 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m10:56:16.036448 [info ] [Thread-2 (]: 13 of 90 START sql view model test.normalize_mt_registry_default_campaigns ..... [RUN]
[0m10:56:16.037508 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns'
[0m10:56:16.037877 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns)
[0m10:56:16.038050 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m10:56:16.042422 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_mt_default_campaigns$')        
...
[0m10:56:16.045234 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.048037 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    drop table if exists test.normalize_mt_registry_default_banners__dbt_backup 
  
  ...
[0m10:56:16.049617 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.054108 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_mt_default_campaigns'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:16.054992 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.057207 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    rename table test.normalize_mt_registry_default_banners to test.normalize_mt_registry_default_banners__dbt_backup 
  
  ...
[0m10:56:16.061507 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.064578 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    drop table if exists test.normalize_mt_registry_default_banners 
  
  ...
[0m10:56:16.065986 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.073436 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"
[0m10:56:16.074391 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.076187 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    rename table test.normalize_mt_registry_default_banners__dbt_tmp to test.normalize_mt_registry_default_banners 
  
  ...
[0m10:56:16.076598 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns (compile): 2024-06-04 10:56:16.038161 => 2024-06-04 10:56:16.076478
[0m10:56:16.078178 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m10:56:16.158670 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m10:56:16.160435 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"
[0m10:56:16.164801 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */
drop table if exists test.normalize_mt_registry_default_banners__dbt_backup 
  ...
[0m10:56:16.166556 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */


  create view test.normalize_mt_registry_default_campaigns__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'name') AS name,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_mt_default_campaigns') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_mt_default_campaigns
)

)
  )...
[0m10:56:16.169854 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.171290 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_banners (execute): 2024-06-04 10:56:16.022490 => 2024-06-04 10:56:16.171214
[0m10:56:16.172163 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7902360b0>]}
[0m10:56:16.172860 [info ] [Thread-1 (]: 12 of 90 OK created sql view model test.normalize_mt_registry_default_banners .. [[32mOK[0m in 0.21s]
[0m10:56:16.173318 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m10:56:16.173652 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m10:56:16.174055 [info ] [Thread-1 (]: 14 of 90 START sql view model test.normalize_sheets_periodstat_default_planCosts  [RUN]
[0m10:56:16.175239 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts'
[0m10:56:16.175562 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts)
[0m10:56:16.175790 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m10:56:16.179981 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_sheets_default_planCosts$')        
...
[0m10:56:16.181526 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.186185 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    drop table if exists test.normalize_mt_registry_default_campaigns__dbt_backup 
  
  ...
[0m10:56:16.189518 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.190097 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.191345 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    rename table test.normalize_mt_registry_default_campaigns to test.normalize_mt_registry_default_campaigns__dbt_backup 
  
  ...
[0m10:56:16.195303 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_sheets_default_planCosts'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:16.202241 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.203327 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.206363 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    drop table if exists test.normalize_mt_registry_default_campaigns 
  
  ...
[0m10:56:16.213705 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"
[0m10:56:16.215001 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts (compile): 2024-06-04 10:56:16.176410 => 2024-06-04 10:56:16.214868
[0m10:56:16.215389 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m10:56:16.221657 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"
[0m10:56:16.223219 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.224968 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    rename table test.normalize_mt_registry_default_campaigns__dbt_tmp to test.normalize_mt_registry_default_campaigns 
  
  ...
[0m10:56:16.226382 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */


  create view test.normalize_sheets_periodstat_default_planCosts__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'Period_start') AS __date, 
        JSONExtractString(_airbyte_data, 'Campaign') AS Campaign, 
        JSONExtractString(_airbyte_data, 'Cost') AS Cost, 
        JSONExtractString(_airbyte_data, 'Period_end') AS Period_end, 
        JSONExtractString(_airbyte_data, 'Period_start') AS Period_start,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_sheets_default_planCosts') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_sheets_default_planCosts
)

)
  )...
[0m10:56:16.228405 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.232466 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */
drop table if exists test.normalize_mt_registry_default_campaigns__dbt_backup 
  ...
[0m10:56:16.238045 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.240024 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns (execute): 2024-06-04 10:56:16.078559 => 2024-06-04 10:56:16.239941
[0m10:56:16.240873 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790407460>]}
[0m10:56:16.241431 [info ] [Thread-2 (]: 13 of 90 OK created sql view model test.normalize_mt_registry_default_campaigns  [[32mOK[0m in 0.20s]
[0m10:56:16.241973 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m10:56:16.242335 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m10:56:16.243280 [info ] [Thread-2 (]: 15 of 90 START sql view model test.normalize_utmcraft_registry_default_utmresult  [RUN]
[0m10:56:16.244498 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult'
[0m10:56:16.245342 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.246041 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult)
[0m10:56:16.249744 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    drop table if exists test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m10:56:16.250527 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m10:56:16.258011 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.258486 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_utmcraft_default_utmresult$')        
...
[0m10:56:16.259601 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    rename table test.normalize_sheets_periodstat_default_planCosts to test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m10:56:16.264763 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.269156 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    drop table if exists test.normalize_sheets_periodstat_default_planCosts 
  
  ...
[0m10:56:16.271008 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.275414 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_utmcraft_default_utmresult'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:16.278984 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.280318 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    rename table test.normalize_sheets_periodstat_default_planCosts__dbt_tmp to test.normalize_sheets_periodstat_default_planCosts 
  
  ...
[0m10:56:16.281113 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.291686 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"
[0m10:56:16.292578 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.299094 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */
drop table if exists test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  ...
[0m10:56:16.300292 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult (compile): 2024-06-04 10:56:16.252359 => 2024-06-04 10:56:16.300070
[0m10:56:16.301089 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m10:56:16.307416 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.308973 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"
[0m10:56:16.311112 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts (execute): 2024-06-04 10:56:16.215504 => 2024-06-04 10:56:16.311015
[0m10:56:16.312487 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790225240>]}
[0m10:56:16.313238 [info ] [Thread-1 (]: 14 of 90 OK created sql view model test.normalize_sheets_periodstat_default_planCosts  [[32mOK[0m in 0.14s]
[0m10:56:16.313893 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m10:56:16.314400 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */


  create view test.normalize_utmcraft_registry_default_utmresult__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'created_at') AS created_at, 
        JSONExtractString(_airbyte_data, 'created_by_id') AS created_by_id, 
        JSONExtractString(_airbyte_data, 'data') AS data, 
        JSONExtractString(_airbyte_data, 'form_id') AS form_id, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'updated_at') AS updated_at, 
        JSONExtractString(_airbyte_data, 'updated_by_id') AS updated_by_id, 
        JSONExtractString(_airbyte_data, 'utm_hashcode') AS utm_hashcode,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_utmcraft_default_utmresult') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_utmcraft_default_utmresult
)

)
  )...
[0m10:56:16.314923 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m10:56:16.316778 [info ] [Thread-1 (]: 16 of 90 START sql view model test.normalize_vkads_datestat_default_ad_plans_statistics  [RUN]
[0m10:56:16.318569 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics'
[0m10:56:16.319252 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics)
[0m10:56:16.319718 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m10:56:16.325467 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_vkads_default_ad_plans_statistics$')        
...
[0m10:56:16.328373 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.331932 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    drop table if exists test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  
  ...
[0m10:56:16.333952 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.339543 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_vkads_default_ad_plans_statistics'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:16.340480 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.343433 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    rename table test.normalize_utmcraft_registry_default_utmresult to test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  
  ...
[0m10:56:16.347157 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.352579 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    drop table if exists test.normalize_utmcraft_registry_default_utmresult 
  
  ...
[0m10:56:16.354178 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.360672 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.367211 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    rename table test.normalize_utmcraft_registry_default_utmresult__dbt_tmp to test.normalize_utmcraft_registry_default_utmresult 
  
  ...
[0m10:56:16.372640 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"
[0m10:56:16.374569 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics (compile): 2024-06-04 10:56:16.319915 => 2024-06-04 10:56:16.374396
[0m10:56:16.375026 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m10:56:16.380662 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"
[0m10:56:16.381920 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.386874 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */
drop table if exists test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  ...
[0m10:56:16.388277 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */


  create view test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'ad_offers') AS ad_offers, 
        JSONExtractString(_airbyte_data, 'ad_plan_id') AS ad_plan_id, 
        JSONExtractString(_airbyte_data, 'base') AS base, 
        JSONExtractString(_airbyte_data, 'carousel') AS carousel, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'moat') AS moat, 
        JSONExtractString(_airbyte_data, 'playable') AS playable, 
        JSONExtractString(_airbyte_data, 'romi') AS romi, 
        JSONExtractString(_airbyte_data, 'social_network') AS social_network, 
        JSONExtractString(_airbyte_data, 'tps') AS tps, 
        JSONExtractString(_airbyte_data, 'uniques') AS uniques, 
        JSONExtractString(_airbyte_data, 'uniques_video') AS uniques_video, 
        JSONExtractString(_airbyte_data, 'video') AS video,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_vkads_default_ad_plans_statistics') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_vkads_default_ad_plans_statistics
)

)
  )...
[0m10:56:16.391404 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.392868 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult (execute): 2024-06-04 10:56:16.301668 => 2024-06-04 10:56:16.392794
[0m10:56:16.393500 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790503eb0>]}
[0m10:56:16.393871 [info ] [Thread-2 (]: 15 of 90 OK created sql view model test.normalize_utmcraft_registry_default_utmresult  [[32mOK[0m in 0.15s]
[0m10:56:16.394194 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m10:56:16.394449 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m10:56:16.394747 [info ] [Thread-2 (]: 17 of 90 START sql view model test.normalize_vkads_periodstat_default_ad_plans . [RUN]
[0m10:56:16.395456 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans'
[0m10:56:16.396260 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans)
[0m10:56:16.396865 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m10:56:16.402443 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_vkads_default_ad_plans$')        
...
[0m10:56:16.404411 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.407181 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m10:56:16.409616 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.413525 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_vkads_default_ad_plans'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:16.414961 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.417266 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    rename table test.normalize_vkads_datestat_default_ad_plans_statistics to test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m10:56:16.419821 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.434940 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.438754 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics 
  
  ...
[0m10:56:16.442654 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"
[0m10:56:16.443704 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans (compile): 2024-06-04 10:56:16.397185 => 2024-06-04 10:56:16.443572
[0m10:56:16.444116 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m10:56:16.448452 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"
[0m10:56:16.449363 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.450455 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    rename table test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_tmp to test.normalize_vkads_datestat_default_ad_plans_statistics 
  
  ...
[0m10:56:16.451113 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */


  create view test.normalize_vkads_periodstat_default_ad_plans__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'ad_groups') AS ad_groups, 
        JSONExtractString(_airbyte_data, 'autobidding_mode') AS autobidding_mode, 
        JSONExtractString(_airbyte_data, 'budget_limit') AS budget_limit, 
        JSONExtractString(_airbyte_data, 'budget_limit_day') AS budget_limit_day, 
        JSONExtractString(_airbyte_data, 'created') AS created, 
        JSONExtractString(_airbyte_data, 'date_end') AS date_end, 
        JSONExtractString(_airbyte_data, 'date_start') AS date_start, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'max_price') AS max_price, 
        JSONExtractString(_airbyte_data, 'name') AS name, 
        JSONExtractString(_airbyte_data, 'objective') AS objective, 
        JSONExtractString(_airbyte_data, 'priced_goal') AS priced_goal, 
        JSONExtractString(_airbyte_data, 'pricelist_id') AS pricelist_id, 
        JSONExtractString(_airbyte_data, 'status') AS status, 
        JSONExtractString(_airbyte_data, 'updated') AS updated, 
        JSONExtractString(_airbyte_data, 'vkads_status') AS vkads_status,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_vkads_default_ad_plans') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_vkads_default_ad_plans
)

)
  )...
[0m10:56:16.456129 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.460518 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */
drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  ...
[0m10:56:16.464007 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.465362 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics (execute): 2024-06-04 10:56:16.375262 => 2024-06-04 10:56:16.465297
[0m10:56:16.465951 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7904094b0>]}
[0m10:56:16.466401 [info ] [Thread-1 (]: 16 of 90 OK created sql view model test.normalize_vkads_datestat_default_ad_plans_statistics  [[32mOK[0m in 0.15s]
[0m10:56:16.466792 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m10:56:16.467104 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m10:56:16.469162 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.469950 [info ] [Thread-1 (]: 18 of 90 START sql view model test.normalize_yd_datestat_default_custom_report . [RUN]
[0m10:56:16.473506 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    drop table if exists test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  
  ...
[0m10:56:16.474669 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report'
[0m10:56:16.476030 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report)
[0m10:56:16.476306 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m10:56:16.480071 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_yd_default_custom_report$')        
...
[0m10:56:16.481007 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.484566 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    rename table test.normalize_vkads_periodstat_default_ad_plans to test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  
  ...
[0m10:56:16.489601 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.490277 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.494301 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    drop table if exists test.normalize_vkads_periodstat_default_ad_plans 
  
  ...
[0m10:56:16.497955 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_yd_default_custom_report'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:16.504397 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.505817 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    rename table test.normalize_vkads_periodstat_default_ad_plans__dbt_tmp to test.normalize_vkads_periodstat_default_ad_plans 
  
  ...
[0m10:56:16.507036 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.518895 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"
[0m10:56:16.520292 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report (compile): 2024-06-04 10:56:16.476400 => 2024-06-04 10:56:16.520126
[0m10:56:16.520676 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m10:56:16.525566 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"
[0m10:56:16.526383 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.530944 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */
drop table if exists test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  ...
[0m10:56:16.532040 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */


  create view test.normalize_yd_datestat_default_custom_report__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'Date') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'AdId') AS AdId, 
        JSONExtractString(_airbyte_data, 'CampaignId') AS CampaignId, 
        JSONExtractString(_airbyte_data, 'CampaignName') AS CampaignName, 
        JSONExtractString(_airbyte_data, 'CampaignType') AS CampaignType, 
        JSONExtractString(_airbyte_data, 'Clicks') AS Clicks, 
        JSONExtractString(_airbyte_data, 'Cost') AS Cost, 
        JSONExtractString(_airbyte_data, 'Date') AS Date, 
        JSONExtractString(_airbyte_data, 'Impressions') AS Impressions,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_yd_default_custom_report') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_yd_default_custom_report
)

)
  )...
[0m10:56:16.534557 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.536586 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans (execute): 2024-06-04 10:56:16.444298 => 2024-06-04 10:56:16.536492
[0m10:56:16.537454 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79029b190>]}
[0m10:56:16.538123 [info ] [Thread-2 (]: 17 of 90 OK created sql view model test.normalize_vkads_periodstat_default_ad_plans  [[32mOK[0m in 0.14s]
[0m10:56:16.538525 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m10:56:16.538839 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m10:56:16.539719 [info ] [Thread-2 (]: 19 of 90 START sql view model test.normalize_ym_events_default_yandex_metrika_stream  [RUN]
[0m10:56:16.541046 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream'
[0m10:56:16.541320 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream)
[0m10:56:16.541477 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m10:56:16.546603 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_ym_default_yandex_metrika_stream$')        
...
[0m10:56:16.548030 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.551706 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    drop table if exists test.normalize_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m10:56:16.555227 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.559399 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_ym_default_yandex_metrika_stream'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m10:56:16.560828 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.562440 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    rename table test.normalize_yd_datestat_default_custom_report to test.normalize_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m10:56:16.565184 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.565827 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.579739 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    drop table if exists test.normalize_yd_datestat_default_custom_report 
  
  ...
[0m10:56:16.596307 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"
[0m10:56:16.597209 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream (compile): 2024-06-04 10:56:16.541590 => 2024-06-04 10:56:16.597066
[0m10:56:16.597581 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m10:56:16.603513 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"
[0m10:56:16.604475 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.605701 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    rename table test.normalize_yd_datestat_default_custom_report__dbt_tmp to test.normalize_yd_datestat_default_custom_report 
  
  ...
[0m10:56:16.606909 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */


  create view test.normalize_ym_events_default_yandex_metrika_stream__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'ym:s:dateTime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'ym:s:clientID') AS ymsclientID, 
        JSONExtractString(_airbyte_data, 'ym:s:dateTime') AS ymsdateTime, 
        JSONExtractString(_airbyte_data, 'ym:s:goalsID') AS ymsgoalsID, 
        JSONExtractString(_airbyte_data, 'ym:s:goalsOrder') AS ymsgoalsOrder, 
        JSONExtractString(_airbyte_data, 'ym:s:lastAdvEngine') AS ymslastAdvEngine, 
        JSONExtractString(_airbyte_data, 'ym:s:lastReferalSource') AS ymslastReferalSource, 
        JSONExtractString(_airbyte_data, 'ym:s:lastSearchEngine') AS ymslastSearchEngine, 
        JSONExtractString(_airbyte_data, 'ym:s:lastTrafficSource') AS ymslastTrafficSource, 
        JSONExtractString(_airbyte_data, 'ym:s:pageViews') AS ymspageViews, 
        JSONExtractString(_airbyte_data, 'ym:s:parsedParamsKey1') AS ymsparsedParamsKey1, 
        JSONExtractString(_airbyte_data, 'ym:s:parsedParamsKey2') AS ymsparsedParamsKey2, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseCoupon') AS ymspurchaseCoupon, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseID') AS ymspurchaseID, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseRevenue') AS ymspurchaseRevenue, 
        JSONExtractString(_airbyte_data, 'ym:s:regionCity') AS ymsregionCity, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMCampaign') AS ymsUTMCampaign, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMContent') AS ymsUTMContent, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMMedium') AS ymsUTMMedium, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMSource') AS ymsUTMSource, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMTerm') AS ymsUTMTerm, 
        JSONExtractString(_airbyte_data, 'ym:s:visitID') AS ymsvisitID,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(_airbyte_extracted_at, 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_ym_default_yandex_metrika_stream') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_ym_default_yandex_metrika_stream
)

)
  )...
[0m10:56:16.609439 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.613467 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */
drop table if exists test.normalize_yd_datestat_default_custom_report__dbt_backup 
  ...
[0m10:56:16.617363 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.619909 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report (execute): 2024-06-04 10:56:16.520881 => 2024-06-04 10:56:16.619815
[0m10:56:16.620791 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79028e470>]}
[0m10:56:16.621294 [info ] [Thread-1 (]: 18 of 90 OK created sql view model test.normalize_yd_datestat_default_custom_report  [[32mOK[0m in 0.15s]
[0m10:56:16.621844 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m10:56:16.622340 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m10:56:16.623648 [info ] [Thread-1 (]: 20 of 90 START sql incremental model test.incremental_adjust_events_default_event_metrics  [RUN]
[0m10:56:16.625051 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics'
[0m10:56:16.625305 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics)
[0m10:56:16.625485 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m10:56:16.629123 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_event_metrics')        
...
[0m10:56:16.630482 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.636030 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    drop table if exists test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m10:56:16.641188 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.642351 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    rename table test.normalize_ym_events_default_yandex_metrika_stream to test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m10:56:16.643624 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.647665 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_event_metrics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.648612 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.653246 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    drop table if exists test.normalize_ym_events_default_yandex_metrika_stream 
  
  ...
[0m10:56:16.657033 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.658228 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    rename table test.normalize_ym_events_default_yandex_metrika_stream__dbt_tmp to test.normalize_ym_events_default_yandex_metrika_stream 
  
  ...
[0m10:56:16.658899 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.662931 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"
[0m10:56:16.663730 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.667912 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */
drop table if exists test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  ...
[0m10:56:16.669943 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics (compile): 2024-06-04 10:56:16.625577 => 2024-06-04 10:56:16.669731
[0m10:56:16.670427 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m10:56:16.684434 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.687087 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream (execute): 2024-06-04 10:56:16.597825 => 2024-06-04 10:56:16.687024
[0m10:56:16.693650 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791df3370>]}
[0m10:56:16.713036 [info ] [Thread-2 (]: 19 of 90 OK created sql view model test.normalize_ym_events_default_yandex_metrika_stream  [[32mOK[0m in 0.15s]
[0m10:56:16.729461 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_event_metrics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.730255 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m10:56:16.731621 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m10:56:16.733032 [info ] [Thread-2 (]: 21 of 90 START sql incremental model test.incremental_adjust_events_default_cohorts  [RUN]
[0m10:56:16.735275 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts'
[0m10:56:16.735745 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts)
[0m10:56:16.736006 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m10:56:16.740532 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_cohorts')        
...
[0m10:56:16.742475 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.746105 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_event_metrics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.747971 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.751752 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_cohorts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.752866 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.763556 [debug] [Thread-1 (]: 
    In test.incremental_adjust_events_default_event_metrics:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:16.764293 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.776409 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */
drop table if exists test.incremental_adjust_events_default_event_metrics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:16.779763 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"
[0m10:56:16.782075 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts (compile): 2024-06-04 10:56:16.736112 => 2024-06-04 10:56:16.781910
[0m10:56:16.782538 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m10:56:16.791372 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_cohorts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.792695 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.810120 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.819685 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_cohorts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.822457 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

            

    
        create table test.incremental_adjust_events_default_event_metrics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_event_metrics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_event_metrics
        )

        )

    )
        ...
[0m10:56:16.828369 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.830702 [debug] [Thread-2 (]: 
    In test.incremental_adjust_events_default_cohorts:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:16.833900 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */
drop table if exists test.incremental_adjust_events_default_cohorts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:16.837149 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:16.839333 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

            

    
        create table test.incremental_adjust_events_default_cohorts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_cohorts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("period") as period ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_cohorts
        )

        )

    )
        ...
[0m10:56:16.858632 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:16.862912 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_event_metrics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.864462 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:16.869247 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_cohorts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.870766 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.872954 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"
[0m10:56:16.874827 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_event_metrics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "country", "date", "event_name", "event_token", "events", "network", "tracker_token", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_event_metrics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_event_metrics
        )

        )

  
      ...
[0m10:56:16.875621 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.878059 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"
[0m10:56:16.878835 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_cohorts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "country", "date", "event_name", "event_token", "events", "network", "period", "tracker_token", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_cohorts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("period") as period ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_cohorts
        )

        )

  
      ...
[0m10:56:16.910651 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:16.911921 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

      delete from test.incremental_adjust_events_default_cohorts where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_adjust_events_default_cohorts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:16.912828 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:16.915534 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

      delete from test.incremental_adjust_events_default_event_metrics where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_adjust_events_default_event_metrics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:16.982314 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m10:56:16.983316 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m10:56:16.986027 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_cohorts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.989151 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_event_metrics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:16.995563 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:16.997243 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

        insert into test.incremental_adjust_events_default_cohorts select "__date", "country", "date", "event_name", "event_token", "events", "network", "period", "tracker_token", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_adjust_events_default_cohorts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:16.998567 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.001329 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

        insert into test.incremental_adjust_events_default_event_metrics select "__date", "country", "date", "event_name", "event_token", "events", "network", "tracker_token", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_adjust_events_default_event_metrics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:17.004854 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.008424 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */
drop table if exists test.incremental_adjust_events_default_cohorts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.010048 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.012998 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */
drop table if exists test.incremental_adjust_events_default_event_metrics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.015548 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.019294 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */
drop table if exists test.incremental_adjust_events_default_cohorts__dbt_distributed_new_data 
  ...
[0m10:56:17.020225 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.024645 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */
drop table if exists test.incremental_adjust_events_default_event_metrics__dbt_distributed_new_data 
  ...
[0m10:56:17.027356 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.029603 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts (execute): 2024-06-04 10:56:16.782821 => 2024-06-04 10:56:17.029531
[0m10:56:17.030287 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790407340>]}
[0m10:56:17.031129 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.031662 [info ] [Thread-2 (]: 21 of 90 OK created sql incremental model test.incremental_adjust_events_default_cohorts  [[32mOK[0m in 0.30s]
[0m10:56:17.034158 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics (execute): 2024-06-04 10:56:16.670534 => 2024-06-04 10:56:17.034074
[0m10:56:17.034660 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m10:56:17.035690 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791df34c0>]}
[0m10:56:17.036445 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m10:56:17.037318 [info ] [Thread-1 (]: 20 of 90 OK created sql incremental model test.incremental_adjust_events_default_event_metrics  [[32mOK[0m in 0.41s]
[0m10:56:17.038132 [info ] [Thread-2 (]: 22 of 90 START sql table model test.incremental_adjust_registry_default_events . [RUN]
[0m10:56:17.039114 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m10:56:17.040252 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_registry_default_events'
[0m10:56:17.040912 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m10:56:17.041716 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_registry_default_events)
[0m10:56:17.042713 [info ] [Thread-1 (]: 23 of 90 START sql incremental model test.incremental_adjust_events_default_network  [RUN]
[0m10:56:17.043451 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m10:56:17.044493 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_network'
[0m10:56:17.052097 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_registry_default_events')        
...
[0m10:56:17.053043 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_network)
[0m10:56:17.054919 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m10:56:17.060622 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_network')        
...
[0m10:56:17.064121 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.068658 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

    select name, type from system.columns where table = 'normalize_adjust_registry_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.070524 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.075819 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_network'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.077377 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.080366 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"
[0m10:56:17.081140 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.085185 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_network"
[0m10:56:17.086214 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_registry_default_events (compile): 2024-06-04 10:56:17.045160 => 2024-06-04 10:56:17.085984
[0m10:56:17.086897 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m10:56:17.087290 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_network (compile): 2024-06-04 10:56:17.055384 => 2024-06-04 10:56:17.087188
[0m10:56:17.103699 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m10:56:17.106455 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

            

    
        create table test.incremental_adjust_registry_default_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_registry_default_events


SELECT *
FROM (

        (
            select
                            toString("app_token") as app_token ,
                            toString("description") as description ,
                            toString("formatting") as formatting ,
                            toString("id") as id ,
                            toString("is_skad_event") as is_skad_event ,
                            toString("name") as name ,
                            toString("section") as section ,
                            toString("short_name") as short_name ,
                            toString("tokens") as tokens ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_registry_default_events
        )

        )

    )
        ...
[0m10:56:17.206044 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_network'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.213225 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.216734 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_network'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.222897 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.225753 [debug] [Thread-1 (]: 
    In test.incremental_adjust_events_default_network:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:17.228786 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */
drop table if exists test.incremental_adjust_events_default_network__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.230076 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:17.233614 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

    select name, type from system.columns where table = 'incremental_adjust_registry_default_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.234392 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.237798 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

            

    
        create table test.incremental_adjust_events_default_network__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_network

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("clicks") as clicks ,
                            toString("country") as country ,
                            toString("country_code") as country_code ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("impressions") as impressions ,
                            toString("installs") as installs ,
                            toString("network") as network ,
                            toString("rejected_installs") as rejected_installs ,
                            toString("sessions") as sessions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_network
        )

        )

    )
        ...
[0m10:56:17.239883 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.242277 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"
[0m10:56:17.243069 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

  
    
    
        
        insert into test.incremental_adjust_registry_default_events__dbt_backup ("app_token", "description", "formatting", "id", "is_skad_event", "name", "section", "short_name", "tokens", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_registry_default_events


SELECT *
FROM (

        (
            select
                            toString("app_token") as app_token ,
                            toString("description") as description ,
                            toString("formatting") as formatting ,
                            toString("id") as id ,
                            toString("is_skad_event") as is_skad_event ,
                            toString("name") as name ,
                            toString("section") as section ,
                            toString("short_name") as short_name ,
                            toString("tokens") as tokens ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_registry_default_events
        )

        )

  ...
[0m10:56:17.262408 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:17.267096 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */
EXCHANGE TABLES test.incremental_adjust_registry_default_events__dbt_backup AND test.incremental_adjust_registry_default_events 
  
  ...
[0m10:56:17.268599 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:17.272427 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_network__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.274757 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.280729 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */
drop table if exists test.incremental_adjust_registry_default_events__dbt_backup 
  ...
[0m10:56:17.281546 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.284478 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_network"
[0m10:56:17.285094 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_network__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "clicks", "country", "country_code", "date", "events", "impressions", "installs", "network", "rejected_installs", "sessions", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_network

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("clicks") as clicks ,
                            toString("country") as country ,
                            toString("country_code") as country_code ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("impressions") as impressions ,
                            toString("installs") as installs ,
                            toString("network") as network ,
                            toString("rejected_installs") as rejected_installs ,
                            toString("sessions") as sessions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_network
        )

        )

  
      ...
[0m10:56:17.286501 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.288388 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_registry_default_events (execute): 2024-06-04 10:56:17.087562 => 2024-06-04 10:56:17.288321
[0m10:56:17.289439 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791d8de70>]}
[0m10:56:17.290319 [info ] [Thread-2 (]: 22 of 90 OK created sql table model test.incremental_adjust_registry_default_events  [[32mOK[0m in 0.25s]
[0m10:56:17.291466 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m10:56:17.291969 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m10:56:17.292596 [info ] [Thread-2 (]: 24 of 90 START sql incremental model test.incremental_appmetrica_events_default_deeplinks  [RUN]
[0m10:56:17.293961 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks'
[0m10:56:17.294338 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks)
[0m10:56:17.294508 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m10:56:17.299155 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_deeplinks')        
...
[0m10:56:17.306581 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.310990 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.312107 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:17.314903 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

      delete from test.incremental_adjust_events_default_network where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_adjust_events_default_network__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:17.319163 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.323229 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"
[0m10:56:17.323698 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks (compile): 2024-06-04 10:56:17.294598 => 2024-06-04 10:56:17.323630
[0m10:56:17.323905 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m10:56:17.329941 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.336989 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.341773 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.347185 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.350094 [debug] [Thread-2 (]: 
    In test.incremental_appmetrica_events_default_deeplinks:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:17.357246 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */
drop table if exists test.incremental_appmetrica_events_default_deeplinks__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.360426 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.363015 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

            

    
        create table test.incremental_appmetrica_events_default_deeplinks__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_deeplinks

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("deeplink_url_parameters") as deeplink_url_parameters ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_deeplinks
        )

        )

    )
        ...
[0m10:56:17.372770 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m10:56:17.376076 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_network'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.381323 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.383485 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

        insert into test.incremental_adjust_events_default_network select "__date", "clicks", "country", "country_code", "date", "events", "impressions", "installs", "network", "rejected_installs", "sessions", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_adjust_events_default_network__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:17.384455 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:17.389690 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.393979 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.397525 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */
drop table if exists test.incremental_adjust_events_default_network__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.398586 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.401792 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"
[0m10:56:17.403191 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.407236 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */
drop table if exists test.incremental_adjust_events_default_network__dbt_distributed_new_data 
  ...
[0m10:56:17.408892 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_deeplinks__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "deeplink_url_parameters", "event_receive_datetime", "google_aid", "ios_ifa", "os_name", "profile_id", "publisher_name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_deeplinks

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("deeplink_url_parameters") as deeplink_url_parameters ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_deeplinks
        )

        )

  
      ...
[0m10:56:17.412283 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.414418 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_network (execute): 2024-06-04 10:56:17.106782 => 2024-06-04 10:56:17.414344
[0m10:56:17.415039 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7901da980>]}
[0m10:56:17.415380 [info ] [Thread-1 (]: 23 of 90 OK created sql incremental model test.incremental_adjust_events_default_network  [[32mOK[0m in 0.37s]
[0m10:56:17.415694 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m10:56:17.415952 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m10:56:17.416195 [info ] [Thread-1 (]: 25 of 90 START sql incremental model test.incremental_appmetrica_events_default_events  [RUN]
[0m10:56:17.417637 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_events'
[0m10:56:17.418012 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_events)
[0m10:56:17.418308 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m10:56:17.422315 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_events')        
...
[0m10:56:17.424525 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:17.425833 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

      delete from test.incremental_appmetrica_events_default_deeplinks where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_appmetrica_events_default_deeplinks__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:17.430220 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.438600 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.444302 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.447556 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"
[0m10:56:17.448105 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_events (compile): 2024-06-04 10:56:17.418398 => 2024-06-04 10:56:17.448015
[0m10:56:17.448360 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m10:56:17.457672 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.464083 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.470262 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.476288 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.479651 [debug] [Thread-1 (]: 
    In test.incremental_appmetrica_events_default_events:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:17.480533 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:17.483914 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */
drop table if exists test.incremental_appmetrica_events_default_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.488622 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.492198 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.494880 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

            

    
        create table test.incremental_appmetrica_events_default_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_events

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("app_version_name") as app_version_name ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("event_json") as event_json ,
                            toString("event_name") as event_name ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_id") as session_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_events
        )

        )

    )
        ...
[0m10:56:17.495715 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.498543 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

        insert into test.incremental_appmetrica_events_default_deeplinks select "__date", "__clientName", "__productName", "appmetrica_device_id", "city", "deeplink_url_parameters", "event_receive_datetime", "google_aid", "ios_ifa", "os_name", "profile_id", "publisher_name", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_appmetrica_events_default_deeplinks__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:17.507393 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.513338 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */
drop table if exists test.incremental_appmetrica_events_default_deeplinks__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.517212 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.521752 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */
drop table if exists test.incremental_appmetrica_events_default_deeplinks__dbt_distributed_new_data 
  ...
[0m10:56:17.525121 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.527453 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks (execute): 2024-06-04 10:56:17.323999 => 2024-06-04 10:56:17.527383
[0m10:56:17.528227 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791d8d000>]}
[0m10:56:17.528943 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:17.529629 [info ] [Thread-2 (]: 24 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_deeplinks  [[32mOK[0m in 0.23s]
[0m10:56:17.534179 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.534843 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m10:56:17.536417 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m10:56:17.537976 [info ] [Thread-2 (]: 26 of 90 START sql incremental model test.incremental_appmetrica_events_default_installations  [RUN]
[0m10:56:17.539076 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations'
[0m10:56:17.539423 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations)
[0m10:56:17.539613 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m10:56:17.544021 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_installations')        
...
[0m10:56:17.545790 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.547845 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"
[0m10:56:17.549011 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__clientName", "__productName", "app_version_name", "appmetrica_device_id", "city", "event_json", "event_name", "event_receive_datetime", "google_aid", "installation_id", "ios_ifa", "os_name", "profile_id", "session_id", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_events

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("app_version_name") as app_version_name ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("event_json") as event_json ,
                            toString("event_name") as event_name ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_id") as session_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_events
        )

        )

  
      ...
[0m10:56:17.553031 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.558091 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.563050 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.566381 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"
[0m10:56:17.567127 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations (compile): 2024-06-04 10:56:17.539706 => 2024-06-04 10:56:17.566991
[0m10:56:17.567473 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m10:56:17.578755 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.584576 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.589375 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.590494 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:17.593201 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

      delete from test.incremental_appmetrica_events_default_events where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_appmetrica_events_default_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:17.595998 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.599123 [debug] [Thread-2 (]: 
    In test.incremental_appmetrica_events_default_installations:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:17.603776 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */
drop table if exists test.incremental_appmetrica_events_default_installations__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.608368 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.610861 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

            

    
        create table test.incremental_appmetrica_events_default_installations__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_installations

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("click_datetime") as click_datetime ,
                            toString("click_url_parameters") as click_url_parameters ,
                            toString("google_aid") as google_aid ,
                            toString("install_receive_datetime") as install_receive_datetime ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("is_reinstallation") as is_reinstallation ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_installations
        )

        )

    )
        ...
[0m10:56:17.632649 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:17.637011 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.640884 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:17.644242 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.645036 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.648875 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"
[0m10:56:17.649519 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_installations__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "click_datetime", "click_url_parameters", "google_aid", "install_receive_datetime", "ios_ifa", "is_reinstallation", "os_name", "profile_id", "publisher_name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_installations

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("click_datetime") as click_datetime ,
                            toString("click_url_parameters") as click_url_parameters ,
                            toString("google_aid") as google_aid ,
                            toString("install_receive_datetime") as install_receive_datetime ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("is_reinstallation") as is_reinstallation ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_installations
        )

        )

  
      ...
[0m10:56:17.650372 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.653560 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

        insert into test.incremental_appmetrica_events_default_events select "__date", "__clientName", "__productName", "app_version_name", "appmetrica_device_id", "city", "event_json", "event_name", "event_receive_datetime", "google_aid", "installation_id", "ios_ifa", "os_name", "profile_id", "session_id", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_appmetrica_events_default_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:17.662967 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.666728 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */
drop table if exists test.incremental_appmetrica_events_default_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.667575 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:17.669541 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

      delete from test.incremental_appmetrica_events_default_installations where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_appmetrica_events_default_installations__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:17.671359 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.676326 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */
drop table if exists test.incremental_appmetrica_events_default_events__dbt_distributed_new_data 
  ...
[0m10:56:17.679402 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.681770 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_events (execute): 2024-06-04 10:56:17.448496 => 2024-06-04 10:56:17.681696
[0m10:56:17.682354 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7901dbf10>]}
[0m10:56:17.709132 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:17.712859 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:17.717880 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.719813 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

        insert into test.incremental_appmetrica_events_default_installations select "__date", "__clientName", "__productName", "appmetrica_device_id", "city", "click_datetime", "click_url_parameters", "google_aid", "install_receive_datetime", "ios_ifa", "is_reinstallation", "os_name", "profile_id", "publisher_name", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_appmetrica_events_default_installations__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:17.728356 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:17.731105 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */
drop table if exists test.incremental_appmetrica_events_default_installations__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:17.735712 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.739242 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */
drop table if exists test.incremental_appmetrica_events_default_installations__dbt_distributed_new_data 
  ...
[0m10:56:17.743302 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:17.745372 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations (execute): 2024-06-04 10:56:17.567606 => 2024-06-04 10:56:17.745303
[0m10:56:17.745900 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e4afe0>]}
[0m10:56:18.462629 [info ] [Thread-1 (]: 25 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_events  [[32mOK[0m in 0.27s]
[0m10:56:18.463703 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m10:56:18.464184 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m10:56:18.464995 [info ] [Thread-2 (]: 26 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_installations  [[32mOK[0m in 0.21s]
[0m10:56:18.465893 [info ] [Thread-1 (]: 27 of 90 START sql incremental model test.incremental_appmetrica_events_default_sessions_starts  [RUN]
[0m10:56:18.466823 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m10:56:18.467754 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts'
[0m10:56:18.468476 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m10:56:18.469065 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts)
[0m10:56:18.469521 [info ] [Thread-2 (]: 28 of 90 START sql incremental model test.incremental_appmetrica_events_default_screen_view  [RUN]
[0m10:56:18.469968 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m10:56:18.470808 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view'
[0m10:56:18.476339 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_sessions_starts')        
...
[0m10:56:18.476925 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view)
[0m10:56:18.478839 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m10:56:18.484635 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_screen_view')        
...
[0m10:56:18.485694 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.492126 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.497584 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.498342 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.501824 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"
[0m10:56:18.506574 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.508387 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts (compile): 2024-06-04 10:56:18.471428 => 2024-06-04 10:56:18.508257
[0m10:56:18.508774 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m10:56:18.514816 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.515947 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.520937 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"
[0m10:56:18.522967 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view (compile): 2024-06-04 10:56:18.479656 => 2024-06-04 10:56:18.522870
[0m10:56:18.523345 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m10:56:18.529152 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.533694 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.539307 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.540785 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.544588 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.546515 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.550764 [debug] [Thread-1 (]: 
    In test.incremental_appmetrica_events_default_sessions_starts:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:18.554130 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */
drop table if exists test.incremental_appmetrica_events_default_sessions_starts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:18.554940 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.558903 [debug] [Thread-2 (]: 
    In test.incremental_appmetrica_events_default_screen_view:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:18.562053 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */
drop table if exists test.incremental_appmetrica_events_default_screen_view__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:18.562839 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.565865 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

            

    
        create table test.incremental_appmetrica_events_default_sessions_starts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_sessions_starts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_start_receive_datetime") as session_start_receive_datetime ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_sessions_starts
        )

        )

    )
        ...
[0m10:56:18.567993 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:18.570200 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

            

    
        create table test.incremental_appmetrica_events_default_screen_view__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_screen_view

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toDateTime("event_receive_datetime") as event_receive_datetime ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("cityName") as cityName ,
                            toString("osName") as osName ,
                            toString("crmUserId") as crmUserId ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("session_id") as session_id ,
                            toUInt64("screen_view") as screen_view 

            from test.normalize_appmetrica_events_default_screen_view
        )

        )

    )
        ...
[0m10:56:18.590253 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:18.593619 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.594401 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:18.599553 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.604066 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.604779 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:18.606397 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"
[0m10:56:18.608507 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"
[0m10:56:18.609740 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_sessions_starts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "google_aid", "installation_id", "ios_ifa", "os_name", "profile_id", "session_start_receive_datetime", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_sessions_starts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_start_receive_datetime") as session_start_receive_datetime ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_sessions_starts
        )

        )

  
      ...
[0m10:56:18.610121 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_screen_view__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "event_receive_datetime", "mobileAdsId", "accountName", "appmetricaDeviceId", "cityName", "osName", "crmUserId", "__table_name", "__emitted_at", "session_id", "screen_view")
  -- depends_on: test.normalize_appmetrica_events_default_screen_view

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toDateTime("event_receive_datetime") as event_receive_datetime ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("cityName") as cityName ,
                            toString("osName") as osName ,
                            toString("crmUserId") as crmUserId ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("session_id") as session_id ,
                            toUInt64("screen_view") as screen_view 

            from test.normalize_appmetrica_events_default_screen_view
        )

        )

  
      ...
[0m10:56:18.624783 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.625946 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

      delete from test.incremental_appmetrica_events_default_sessions_starts where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_appmetrica_events_default_sessions_starts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:18.664701 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:18.665912 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

      delete from test.incremental_appmetrica_events_default_screen_view where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_appmetrica_events_default_screen_view__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:18.679246 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:18.681921 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.688205 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.689996 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

        insert into test.incremental_appmetrica_events_default_sessions_starts select "__date", "__clientName", "__productName", "appmetrica_device_id", "city", "google_aid", "installation_id", "ios_ifa", "os_name", "profile_id", "session_start_receive_datetime", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_appmetrica_events_default_sessions_starts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:18.697413 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.700964 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */
drop table if exists test.incremental_appmetrica_events_default_sessions_starts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:18.704683 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:18.707912 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */
drop table if exists test.incremental_appmetrica_events_default_sessions_starts__dbt_distributed_new_data 
  ...
[0m10:56:18.711338 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:18.714221 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts (execute): 2024-06-04 10:56:18.508939 => 2024-06-04 10:56:18.714160
[0m10:56:18.714906 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7901d8e50>]}
[0m10:56:18.715329 [info ] [Thread-1 (]: 27 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_sessions_starts  [[32mOK[0m in 0.25s]
[0m10:56:18.715674 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m10:56:18.715956 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m10:56:18.716918 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:18.717898 [info ] [Thread-1 (]: 29 of 90 START sql table model test.incremental_appmetrica_registry_default_profiles  [RUN]
[0m10:56:18.720782 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.721736 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles'
[0m10:56:18.722648 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles)
[0m10:56:18.722934 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m10:56:18.727605 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_registry_default_profiles')        
...
[0m10:56:18.732612 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.735241 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

        insert into test.incremental_appmetrica_events_default_screen_view select "__date", "event_receive_datetime", "mobileAdsId", "accountName", "appmetricaDeviceId", "cityName", "osName", "crmUserId", "__table_name", "__emitted_at", "session_id", "screen_view" from test.incremental_appmetrica_events_default_screen_view__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:18.736258 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.743943 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

    select name, type from system.columns where table = 'normalize_appmetrica_registry_default_profiles'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.745196 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.748058 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */
drop table if exists test.incremental_appmetrica_events_default_screen_view__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:18.753730 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.757493 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */
drop table if exists test.incremental_appmetrica_events_default_screen_view__dbt_distributed_new_data 
  ...
[0m10:56:18.758385 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.761179 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"
[0m10:56:18.762254 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles (compile): 2024-06-04 10:56:18.723126 => 2024-06-04 10:56:18.762089
[0m10:56:18.762798 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m10:56:18.767615 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

            

    
        create table test.incremental_appmetrica_registry_default_profiles__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_registry_default_profiles


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("profile_id") as profile_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_registry_default_profiles
        )

        )

    )
        ...
[0m10:56:18.769668 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.772510 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view (execute): 2024-06-04 10:56:18.523547 => 2024-06-04 10:56:18.772402
[0m10:56:18.773689 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791d8da50>]}
[0m10:56:18.774250 [info ] [Thread-2 (]: 28 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_screen_view  [[32mOK[0m in 0.30s]
[0m10:56:18.774634 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m10:56:18.774958 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m10:56:18.775508 [info ] [Thread-2 (]: 30 of 90 START sql incremental model test.incremental_mt_datestat_default_banners_statistics  [RUN]
[0m10:56:18.776916 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics'
[0m10:56:18.777586 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics)
[0m10:56:18.777966 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m10:56:18.782562 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_datestat_default_banners_statistics')        
...
[0m10:56:18.787930 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:18.791258 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

    select name, type from system.columns where table = 'incremental_appmetrica_registry_default_profiles__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.792051 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.797461 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'normalize_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.803155 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.805041 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"
[0m10:56:18.806138 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.810866 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"
[0m10:56:18.811412 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

  
    
    
        
        insert into test.incremental_appmetrica_registry_default_profiles__dbt_backup ("__clientName", "__productName", "appmetrica_device_id", "city", "profile_id", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_registry_default_profiles


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("profile_id") as profile_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_registry_default_profiles
        )

        )

  ...
[0m10:56:18.812428 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics (compile): 2024-06-04 10:56:18.778124 => 2024-06-04 10:56:18.812252
[0m10:56:18.812850 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m10:56:18.894813 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.895764 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m10:56:18.899335 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */
EXCHANGE TABLES test.incremental_appmetrica_registry_default_profiles__dbt_backup AND test.incremental_appmetrica_registry_default_profiles 
  
  ...
[0m10:56:18.903941 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.904657 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:18.907493 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.911740 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */
drop table if exists test.incremental_appmetrica_registry_default_profiles__dbt_backup 
  ...
[0m10:56:18.915736 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:18.917143 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles (execute): 2024-06-04 10:56:18.763064 => 2024-06-04 10:56:18.917077
[0m10:56:18.917866 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7901c04f0>]}
[0m10:56:18.918580 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.919365 [info ] [Thread-1 (]: 29 of 90 OK created sql table model test.incremental_appmetrica_registry_default_profiles  [[32mOK[0m in 0.20s]
[0m10:56:18.921908 [debug] [Thread-2 (]: 
    In test.incremental_mt_datestat_default_banners_statistics:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:18.922612 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m10:56:18.925582 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */
drop table if exists test.incremental_mt_datestat_default_banners_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:18.926350 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m10:56:18.929144 [info ] [Thread-1 (]: 31 of 90 START sql table model test.incremental_mt_registry_default_banners .... [RUN]
[0m10:56:18.930131 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_registry_default_banners'
[0m10:56:18.930458 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_registry_default_banners)
[0m10:56:18.930663 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m10:56:18.937197 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_registry_default_banners')        
...
[0m10:56:18.937853 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.942387 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

            

    
        create table test.incremental_mt_datestat_default_banners_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_datestat_default_banners_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("banner_id") as banner_id ,
                            toString("base") as base ,
                            toString("date") as date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_datestat_default_banners_statistics
        )

        )

    )
        ...
[0m10:56:18.945083 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.948683 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

    select name, type from system.columns where table = 'normalize_mt_registry_default_banners'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.956596 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.959050 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"
[0m10:56:18.959667 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_banners (compile): 2024-06-04 10:56:18.930767 => 2024-06-04 10:56:18.959559
[0m10:56:18.959980 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m10:56:18.964882 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

            

    
        create table test.incremental_mt_registry_default_banners__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_registry_default_banners


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("campaign_id") as campaign_id ,
                            toString("id") as id ,
                            toString("textblocks") as textblocks ,
                            toString("urls") as urls ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_banners
        )

        )

    )
        ...
[0m10:56:18.965666 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:18.970892 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.978057 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:18.979703 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"
[0m10:56:18.980475 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

        
  
    
    
        
        insert into test.incremental_mt_datestat_default_banners_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__clientName", "__productName", "banner_id", "base", "date", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_datestat_default_banners_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("banner_id") as banner_id ,
                            toString("base") as base ,
                            toString("date") as date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_datestat_default_banners_statistics
        )

        )

  
      ...
[0m10:56:18.984549 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:18.988637 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_banners__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:18.993283 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:18.995024 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"
[0m10:56:18.995459 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

  
    
    
        
        insert into test.incremental_mt_registry_default_banners__dbt_backup ("__clientName", "__productName", "campaign_id", "id", "textblocks", "urls", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_registry_default_banners


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("campaign_id") as campaign_id ,
                            toString("id") as id ,
                            toString("textblocks") as textblocks ,
                            toString("urls") as urls ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_banners
        )

        )

  ...
[0m10:56:18.997447 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:18.999006 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

      delete from test.incremental_mt_datestat_default_banners_statistics where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_mt_datestat_default_banners_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:19.007259 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.008522 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */
EXCHANGE TABLES test.incremental_mt_registry_default_banners__dbt_backup AND test.incremental_mt_registry_default_banners 
  
  ...
[0m10:56:19.013233 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.017817 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */
drop table if exists test.incremental_mt_registry_default_banners__dbt_backup 
  ...
[0m10:56:19.021900 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.023517 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_banners (execute): 2024-06-04 10:56:18.960085 => 2024-06-04 10:56:19.023429
[0m10:56:19.024331 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790298940>]}
[0m10:56:19.024878 [info ] [Thread-1 (]: 31 of 90 OK created sql table model test.incremental_mt_registry_default_banners  [[32mOK[0m in 0.09s]
[0m10:56:19.025363 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m10:56:19.025864 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m10:56:19.026784 [info ] [Thread-1 (]: 32 of 90 START sql table model test.incremental_mt_registry_default_campaigns .. [RUN]
[0m10:56:19.027591 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns'
[0m10:56:19.027865 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns)
[0m10:56:19.028027 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m10:56:19.034095 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_registry_default_campaigns')        
...
[0m10:56:19.042776 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.046348 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = 'normalize_mt_registry_default_campaigns'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.047186 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:19.052870 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.054313 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.057066 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"
[0m10:56:19.057683 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns (compile): 2024-06-04 10:56:19.028116 => 2024-06-04 10:56:19.057570
[0m10:56:19.058057 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m10:56:19.062235 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

            

    
        create table test.incremental_mt_registry_default_campaigns__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_registry_default_campaigns


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("id") as id ,
                            toString("name") as name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_campaigns
        )

        )

    )
        ...
[0m10:56:19.063456 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.066124 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

        insert into test.incremental_mt_datestat_default_banners_statistics select "__date", "__clientName", "__productName", "banner_id", "base", "date", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_mt_datestat_default_banners_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:19.076335 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.079529 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */
drop table if exists test.incremental_mt_datestat_default_banners_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.083824 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:19.084937 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.088819 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_campaigns__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.093053 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */
drop table if exists test.incremental_mt_datestat_default_banners_statistics__dbt_distributed_new_data 
  ...
[0m10:56:19.097256 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.099491 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics (execute): 2024-06-04 10:56:18.813009 => 2024-06-04 10:56:19.099391
[0m10:56:19.100446 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7902981c0>]}
[0m10:56:19.102395 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.101404 [info ] [Thread-2 (]: 30 of 90 OK created sql incremental model test.incremental_mt_datestat_default_banners_statistics  [[32mOK[0m in 0.32s]
[0m10:56:19.104633 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"
[0m10:56:19.105186 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m10:56:19.105971 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m10:56:19.106664 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

  
    
    
        
        insert into test.incremental_mt_registry_default_campaigns__dbt_backup ("__clientName", "__productName", "id", "name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_registry_default_campaigns


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("id") as id ,
                            toString("name") as name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_campaigns
        )

        )

  ...
[0m10:56:19.107165 [info ] [Thread-2 (]: 33 of 90 START sql incremental model test.incremental_sheets_periodstat_default_planCosts  [RUN]
[0m10:56:19.109644 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts'
[0m10:56:19.110024 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts)
[0m10:56:19.110473 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m10:56:19.115633 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_sheets_periodstat_default_planCosts')        
...
[0m10:56:19.120768 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.122437 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */
EXCHANGE TABLES test.incremental_mt_registry_default_campaigns__dbt_backup AND test.incremental_mt_registry_default_campaigns 
  
  ...
[0m10:56:19.124259 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.128622 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'normalize_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.129793 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.135618 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */
drop table if exists test.incremental_mt_registry_default_campaigns__dbt_backup 
  ...
[0m10:56:19.136417 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.139560 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"
[0m10:56:19.140610 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts (compile): 2024-06-04 10:56:19.110658 => 2024-06-04 10:56:19.140468
[0m10:56:19.141074 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m10:56:19.147158 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.148153 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.149388 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns (execute): 2024-06-04 10:56:19.058219 => 2024-06-04 10:56:19.149332
[0m10:56:19.152479 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79038f070>]}
[0m10:56:19.153679 [info ] [Thread-1 (]: 32 of 90 OK created sql table model test.incremental_mt_registry_default_campaigns  [[32mOK[0m in 0.12s]
[0m10:56:19.154278 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m10:56:19.154761 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m10:56:19.155676 [info ] [Thread-1 (]: 34 of 90 START sql table model test.incremental_utmcraft_registry_default_utmresult  [RUN]
[0m10:56:19.156557 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult'
[0m10:56:19.157317 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.157968 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult)
[0m10:56:19.163143 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.163693 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m10:56:19.169756 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_utmcraft_registry_default_utmresult')        
...
[0m10:56:19.171858 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.174542 [debug] [Thread-2 (]: 
    In test.incremental_sheets_periodstat_default_planCosts:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:19.178250 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */
drop table if exists test.incremental_sheets_periodstat_default_planCosts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.179113 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.184533 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = 'normalize_utmcraft_registry_default_utmresult'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.185657 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.189930 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

            

    
        create table test.incremental_sheets_periodstat_default_planCosts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_sheets_periodstat_default_planCosts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("Campaign") as Campaign ,
                            toString("Cost") as Cost ,
                            toString("Period_end") as Period_end ,
                            toString("Period_start") as Period_start ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_sheets_periodstat_default_planCosts
        )

        )

    )
        ...
[0m10:56:19.192154 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.195118 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"
[0m10:56:19.196254 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult (compile): 2024-06-04 10:56:19.165118 => 2024-06-04 10:56:19.196057
[0m10:56:19.196884 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m10:56:19.202573 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

            

    
        create table test.incremental_utmcraft_registry_default_utmresult__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_utmcraft_registry_default_utmresult


SELECT *
FROM (

        (
            select
                            toString("created_at") as created_at ,
                            toString("created_by_id") as created_by_id ,
                            toString("data") as data ,
                            toString("form_id") as form_id ,
                            toString("id") as id ,
                            toString("updated_at") as updated_at ,
                            toString("updated_by_id") as updated_by_id ,
                            toString("utm_hashcode") as utm_hashcode ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_utmcraft_registry_default_utmresult
        )

        )

    )
        ...
[0m10:56:19.209684 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:19.214487 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.221923 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.223668 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"
[0m10:56:19.224675 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:19.227416 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = 'incremental_utmcraft_registry_default_utmresult__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.229188 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

        
  
    
    
        
        insert into test.incremental_sheets_periodstat_default_planCosts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "Campaign", "Cost", "Period_end", "Period_start", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_sheets_periodstat_default_planCosts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("Campaign") as Campaign ,
                            toString("Cost") as Cost ,
                            toString("Period_end") as Period_end ,
                            toString("Period_start") as Period_start ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_sheets_periodstat_default_planCosts
        )

        )

  
      ...
[0m10:56:19.233257 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.235820 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"
[0m10:56:19.237046 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

  
    
    
        
        insert into test.incremental_utmcraft_registry_default_utmresult__dbt_backup ("created_at", "created_by_id", "data", "form_id", "id", "updated_at", "updated_by_id", "utm_hashcode", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_utmcraft_registry_default_utmresult


SELECT *
FROM (

        (
            select
                            toString("created_at") as created_at ,
                            toString("created_by_id") as created_by_id ,
                            toString("data") as data ,
                            toString("form_id") as form_id ,
                            toString("id") as id ,
                            toString("updated_at") as updated_at ,
                            toString("updated_by_id") as updated_by_id ,
                            toString("utm_hashcode") as utm_hashcode ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_utmcraft_registry_default_utmresult
        )

        )

  ...
[0m10:56:19.243674 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.244965 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

      delete from test.incremental_sheets_periodstat_default_planCosts where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_sheets_periodstat_default_planCosts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:19.249000 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.250302 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */
EXCHANGE TABLES test.incremental_utmcraft_registry_default_utmresult__dbt_backup AND test.incremental_utmcraft_registry_default_utmresult 
  
  ...
[0m10:56:19.258215 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.262277 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */
drop table if exists test.incremental_utmcraft_registry_default_utmresult__dbt_backup 
  ...
[0m10:56:19.265722 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.267423 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult (execute): 2024-06-04 10:56:19.197035 => 2024-06-04 10:56:19.267352
[0m10:56:19.268096 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790539420>]}
[0m10:56:19.268614 [info ] [Thread-1 (]: 34 of 90 OK created sql table model test.incremental_utmcraft_registry_default_utmresult  [[32mOK[0m in 0.11s]
[0m10:56:19.268994 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m10:56:19.269276 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m10:56:19.270058 [info ] [Thread-1 (]: 35 of 90 START sql incremental model test.incremental_vkads_datestat_default_ad_plans_statistics  [RUN]
[0m10:56:19.271750 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics'
[0m10:56:19.272044 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics)
[0m10:56:19.272192 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m10:56:19.276347 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_vkads_datestat_default_ad_plans_statistics')        
...
[0m10:56:19.282923 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.286981 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'normalize_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.289538 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:19.292762 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.293635 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.297414 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"
[0m10:56:19.298394 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics (compile): 2024-06-04 10:56:19.272281 => 2024-06-04 10:56:19.298246
[0m10:56:19.298935 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m10:56:19.299744 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.309847 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.311835 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

        insert into test.incremental_sheets_periodstat_default_planCosts select "__date", "Campaign", "Cost", "Period_end", "Period_start", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_sheets_periodstat_default_planCosts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:19.318665 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.322566 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.323454 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.327945 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */
drop table if exists test.incremental_sheets_periodstat_default_planCosts__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.329664 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.333511 [debug] [Thread-1 (]: 
    In test.incremental_vkads_datestat_default_ad_plans_statistics:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:19.336947 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */
drop table if exists test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.338702 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.342208 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */
drop table if exists test.incremental_sheets_periodstat_default_planCosts__dbt_distributed_new_data 
  ...
[0m10:56:19.343373 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.346755 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

            

    
        create table test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_vkads_datestat_default_ad_plans_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("ad_offers") as ad_offers ,
                            toString("ad_plan_id") as ad_plan_id ,
                            toString("base") as base ,
                            toString("carousel") as carousel ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("moat") as moat ,
                            toString("playable") as playable ,
                            toString("romi") as romi ,
                            toString("social_network") as social_network ,
                            toString("tps") as tps ,
                            toString("uniques") as uniques ,
                            toString("uniques_video") as uniques_video ,
                            toString("video") as video ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_datestat_default_ad_plans_statistics
        )

        )

    )
        ...
[0m10:56:19.347410 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.350246 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts (execute): 2024-06-04 10:56:19.141289 => 2024-06-04 10:56:19.350155
[0m10:56:19.351457 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7903ae890>]}
[0m10:56:19.352271 [info ] [Thread-2 (]: 33 of 90 OK created sql incremental model test.incremental_sheets_periodstat_default_planCosts  [[32mOK[0m in 0.24s]
[0m10:56:19.353125 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m10:56:19.353673 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m10:56:19.354838 [info ] [Thread-2 (]: 36 of 90 START sql table model test.incremental_vkads_periodstat_default_ad_plans  [RUN]
[0m10:56:19.355714 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans'
[0m10:56:19.356056 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans)
[0m10:56:19.356236 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m10:56:19.361838 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_vkads_periodstat_default_ad_plans')        
...
[0m10:56:19.369572 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.374032 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = 'normalize_vkads_periodstat_default_ad_plans'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.376695 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:19.379558 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.380871 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.385075 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"
[0m10:56:19.386086 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans (compile): 2024-06-04 10:56:19.356329 => 2024-06-04 10:56:19.385933
[0m10:56:19.386862 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m10:56:19.392202 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

            

    
        create table test.incremental_vkads_periodstat_default_ad_plans__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_vkads_periodstat_default_ad_plans


SELECT *
FROM (

        (
            select
                            toString("ad_groups") as ad_groups ,
                            toString("autobidding_mode") as autobidding_mode ,
                            toString("budget_limit") as budget_limit ,
                            toString("budget_limit_day") as budget_limit_day ,
                            toString("created") as created ,
                            toString("date_end") as date_end ,
                            toString("date_start") as date_start ,
                            toString("id") as id ,
                            toString("max_price") as max_price ,
                            toString("name") as name ,
                            toString("objective") as objective ,
                            toString("priced_goal") as priced_goal ,
                            toString("pricelist_id") as pricelist_id ,
                            toString("status") as status ,
                            toString("updated") as updated ,
                            toString("vkads_status") as vkads_status ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_periodstat_default_ad_plans
        )

        )

    )
        ...
[0m10:56:19.393510 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.397960 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"
[0m10:56:19.399705 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

        
  
    
    
        
        insert into test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "ad_offers", "ad_plan_id", "base", "carousel", "date", "events", "moat", "playable", "romi", "social_network", "tps", "uniques", "uniques_video", "video", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_vkads_datestat_default_ad_plans_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("ad_offers") as ad_offers ,
                            toString("ad_plan_id") as ad_plan_id ,
                            toString("base") as base ,
                            toString("carousel") as carousel ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("moat") as moat ,
                            toString("playable") as playable ,
                            toString("romi") as romi ,
                            toString("social_network") as social_network ,
                            toString("tps") as tps ,
                            toString("uniques") as uniques ,
                            toString("uniques_video") as uniques_video ,
                            toString("video") as video ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_datestat_default_ad_plans_statistics
        )

        )

  
      ...
[0m10:56:19.414054 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:19.417044 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = 'incremental_vkads_periodstat_default_ad_plans__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.420267 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:19.421415 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

      delete from test.incremental_vkads_datestat_default_ad_plans_statistics where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:19.422980 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.424603 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"
[0m10:56:19.425091 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

  
    
    
        
        insert into test.incremental_vkads_periodstat_default_ad_plans__dbt_backup ("ad_groups", "autobidding_mode", "budget_limit", "budget_limit_day", "created", "date_end", "date_start", "id", "max_price", "name", "objective", "priced_goal", "pricelist_id", "status", "updated", "vkads_status", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_vkads_periodstat_default_ad_plans


SELECT *
FROM (

        (
            select
                            toString("ad_groups") as ad_groups ,
                            toString("autobidding_mode") as autobidding_mode ,
                            toString("budget_limit") as budget_limit ,
                            toString("budget_limit_day") as budget_limit_day ,
                            toString("created") as created ,
                            toString("date_end") as date_end ,
                            toString("date_start") as date_start ,
                            toString("id") as id ,
                            toString("max_price") as max_price ,
                            toString("name") as name ,
                            toString("objective") as objective ,
                            toString("priced_goal") as priced_goal ,
                            toString("pricelist_id") as pricelist_id ,
                            toString("status") as status ,
                            toString("updated") as updated ,
                            toString("vkads_status") as vkads_status ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_periodstat_default_ad_plans
        )

        )

  ...
[0m10:56:19.440259 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.441467 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */
EXCHANGE TABLES test.incremental_vkads_periodstat_default_ad_plans__dbt_backup AND test.incremental_vkads_periodstat_default_ad_plans 
  
  ...
[0m10:56:19.450834 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.455130 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */
drop table if exists test.incremental_vkads_periodstat_default_ad_plans__dbt_backup 
  ...
[0m10:56:19.458866 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.460187 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans (execute): 2024-06-04 10:56:19.387158 => 2024-06-04 10:56:19.460128
[0m10:56:19.460718 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791dbd840>]}
[0m10:56:19.461054 [info ] [Thread-2 (]: 36 of 90 OK created sql table model test.incremental_vkads_periodstat_default_ad_plans  [[32mOK[0m in 0.11s]
[0m10:56:19.461416 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m10:56:19.461683 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m10:56:19.461972 [info ] [Thread-2 (]: 37 of 90 START sql incremental model test.incremental_yd_datestat_default_custom_report  [RUN]
[0m10:56:19.463334 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report'
[0m10:56:19.463628 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report)
[0m10:56:19.463838 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m10:56:19.470138 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_yd_datestat_default_custom_report')        
...
[0m10:56:19.477533 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.478458 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m10:56:19.482227 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'normalize_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.486401 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.492697 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.495570 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"
[0m10:56:19.496231 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.498073 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

        insert into test.incremental_vkads_datestat_default_ad_plans_statistics select "__date", "ad_offers", "ad_plan_id", "base", "carousel", "date", "events", "moat", "playable", "romi", "social_network", "tps", "uniques", "uniques_video", "video", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:19.499010 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report (compile): 2024-06-04 10:56:19.463941 => 2024-06-04 10:56:19.498909
[0m10:56:19.499421 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m10:56:19.507311 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.509162 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.512851 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */
drop table if exists test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.518595 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.519619 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.524547 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */
drop table if exists test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_distributed_new_data 
  ...
[0m10:56:19.528175 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.532507 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.534778 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics (execute): 2024-06-04 10:56:19.300203 => 2024-06-04 10:56:19.534695
[0m10:56:19.535712 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79049f130>]}
[0m10:56:19.536810 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.537905 [info ] [Thread-1 (]: 35 of 90 OK created sql incremental model test.incremental_vkads_datestat_default_ad_plans_statistics  [[32mOK[0m in 0.26s]
[0m10:56:19.541199 [debug] [Thread-2 (]: 
    In test.incremental_yd_datestat_default_custom_report:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:19.541840 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m10:56:19.545849 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */
drop table if exists test.incremental_yd_datestat_default_custom_report__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.546630 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m10:56:19.548300 [info ] [Thread-1 (]: 38 of 90 START sql incremental model test.incremental_ym_events_default_yandex_metrika_stream  [RUN]
[0m10:56:19.549802 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream'
[0m10:56:19.550373 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream)
[0m10:56:19.550768 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m10:56:19.557019 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_ym_events_default_yandex_metrika_stream')        
...
[0m10:56:19.557831 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.561826 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

            

    
        create table test.incremental_yd_datestat_default_custom_report__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_yd_datestat_default_custom_report

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("AdId") as AdId ,
                            toString("CampaignId") as CampaignId ,
                            toString("CampaignName") as CampaignName ,
                            toString("CampaignType") as CampaignType ,
                            toString("Clicks") as Clicks ,
                            toString("Cost") as Cost ,
                            toString("Date") as Date ,
                            toString("Impressions") as Impressions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_yd_datestat_default_custom_report
        )

        )

    )
        ...
[0m10:56:19.565245 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.571208 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'normalize_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.577049 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.580835 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"
[0m10:56:19.581407 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream (compile): 2024-06-04 10:56:19.551149 => 2024-06-04 10:56:19.581305
[0m10:56:19.581711 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m10:56:19.591674 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.592532 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:19.596699 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.599033 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.603552 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.605066 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.606694 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"
[0m10:56:19.607542 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

        
  
    
    
        
        insert into test.incremental_yd_datestat_default_custom_report__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__clientName", "__productName", "AdId", "CampaignId", "CampaignName", "CampaignType", "Clicks", "Cost", "Date", "Impressions", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_yd_datestat_default_custom_report

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("AdId") as AdId ,
                            toString("CampaignId") as CampaignId ,
                            toString("CampaignName") as CampaignName ,
                            toString("CampaignType") as CampaignType ,
                            toString("Clicks") as Clicks ,
                            toString("Cost") as Cost ,
                            toString("Date") as Date ,
                            toString("Impressions") as Impressions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_yd_datestat_default_custom_report
        )

        )

  
      ...
[0m10:56:19.611169 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.615577 [debug] [Thread-1 (]: 
    In test.incremental_ym_events_default_yandex_metrika_stream:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:19.619587 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */
drop table if exists test.incremental_ym_events_default_yandex_metrika_stream__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.621833 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.622931 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

      delete from test.incremental_yd_datestat_default_custom_report where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_yd_datestat_default_custom_report__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:19.623470 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.626443 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

            

    
        create table test.incremental_ym_events_default_yandex_metrika_stream__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_ym_events_default_yandex_metrika_stream

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("ymsclientID") as ymsclientID ,
                            toString("ymsdateTime") as ymsdateTime ,
                            toString("ymsgoalsID") as ymsgoalsID ,
                            toString("ymsgoalsOrder") as ymsgoalsOrder ,
                            toString("ymslastAdvEngine") as ymslastAdvEngine ,
                            toString("ymslastReferalSource") as ymslastReferalSource ,
                            toString("ymslastSearchEngine") as ymslastSearchEngine ,
                            toString("ymslastTrafficSource") as ymslastTrafficSource ,
                            toString("ymspageViews") as ymspageViews ,
                            toString("ymsparsedParamsKey1") as ymsparsedParamsKey1 ,
                            toString("ymsparsedParamsKey2") as ymsparsedParamsKey2 ,
                            toString("ymspurchaseCoupon") as ymspurchaseCoupon ,
                            toString("ymspurchaseID") as ymspurchaseID ,
                            toString("ymspurchaseRevenue") as ymspurchaseRevenue ,
                            toString("ymsregionCity") as ymsregionCity ,
                            toString("ymsUTMCampaign") as ymsUTMCampaign ,
                            toString("ymsUTMContent") as ymsUTMContent ,
                            toString("ymsUTMMedium") as ymsUTMMedium ,
                            toString("ymsUTMSource") as ymsUTMSource ,
                            toString("ymsUTMTerm") as ymsUTMTerm ,
                            toString("ymsvisitID") as ymsvisitID ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_ym_events_default_yandex_metrika_stream
        )

        )

    )
        ...
[0m10:56:19.645661 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:19.648691 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.653732 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.655613 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"
[0m10:56:19.656379 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

        
  
    
    
        
        insert into test.incremental_ym_events_default_yandex_metrika_stream__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__clientName", "__productName", "ymsclientID", "ymsdateTime", "ymsgoalsID", "ymsgoalsOrder", "ymslastAdvEngine", "ymslastReferalSource", "ymslastSearchEngine", "ymslastTrafficSource", "ymspageViews", "ymsparsedParamsKey1", "ymsparsedParamsKey2", "ymspurchaseCoupon", "ymspurchaseID", "ymspurchaseRevenue", "ymsregionCity", "ymsUTMCampaign", "ymsUTMContent", "ymsUTMMedium", "ymsUTMSource", "ymsUTMTerm", "ymsvisitID", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_ym_events_default_yandex_metrika_stream

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("ymsclientID") as ymsclientID ,
                            toString("ymsdateTime") as ymsdateTime ,
                            toString("ymsgoalsID") as ymsgoalsID ,
                            toString("ymsgoalsOrder") as ymsgoalsOrder ,
                            toString("ymslastAdvEngine") as ymslastAdvEngine ,
                            toString("ymslastReferalSource") as ymslastReferalSource ,
                            toString("ymslastSearchEngine") as ymslastSearchEngine ,
                            toString("ymslastTrafficSource") as ymslastTrafficSource ,
                            toString("ymspageViews") as ymspageViews ,
                            toString("ymsparsedParamsKey1") as ymsparsedParamsKey1 ,
                            toString("ymsparsedParamsKey2") as ymsparsedParamsKey2 ,
                            toString("ymspurchaseCoupon") as ymspurchaseCoupon ,
                            toString("ymspurchaseID") as ymspurchaseID ,
                            toString("ymspurchaseRevenue") as ymspurchaseRevenue ,
                            toString("ymsregionCity") as ymsregionCity ,
                            toString("ymsUTMCampaign") as ymsUTMCampaign ,
                            toString("ymsUTMContent") as ymsUTMContent ,
                            toString("ymsUTMMedium") as ymsUTMMedium ,
                            toString("ymsUTMSource") as ymsUTMSource ,
                            toString("ymsUTMTerm") as ymsUTMTerm ,
                            toString("ymsvisitID") as ymsvisitID ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_ym_events_default_yandex_metrika_stream
        )

        )

  
      ...
[0m10:56:19.660643 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:19.663484 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.668866 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.670508 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

        insert into test.incremental_yd_datestat_default_custom_report select "__date", "__clientName", "__productName", "AdId", "CampaignId", "CampaignName", "CampaignType", "Clicks", "Cost", "Date", "Impressions", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_yd_datestat_default_custom_report__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:19.681374 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.684464 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */
drop table if exists test.incremental_yd_datestat_default_custom_report__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.688656 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.692268 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */
drop table if exists test.incremental_yd_datestat_default_custom_report__dbt_distributed_new_data 
  ...
[0m10:56:19.693268 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:19.695635 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

      delete from test.incremental_ym_events_default_yandex_metrika_stream where (__date, __table_name) in (select __date, __table_name
                                          from test.incremental_ym_events_default_yandex_metrika_stream__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:19.697500 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.699460 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report (execute): 2024-06-04 10:56:19.499613 => 2024-06-04 10:56:19.699399
[0m10:56:19.700152 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7903ad480>]}
[0m10:56:19.700713 [info ] [Thread-2 (]: 37 of 90 OK created sql incremental model test.incremental_yd_datestat_default_custom_report  [[32mOK[0m in 0.24s]
[0m10:56:19.701337 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m10:56:19.702310 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_appmetrica_events
[0m10:56:19.703052 [info ] [Thread-2 (]: 39 of 90 START sql incremental model test.join_appmetrica_events ............... [RUN]
[0m10:56:19.704275 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_appmetrica_events'
[0m10:56:19.704701 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_appmetrica_events)
[0m10:56:19.705278 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_appmetrica_events
[0m10:56:19.709934 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_appmetrica__%'
    GROUP BY table

...
[0m10:56:19.718912 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.720728 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_appmetrica__%' AND 
        name='__date'

  ...
[0m10:56:19.728141 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.730309 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_appmetrica_events_default_deeplinks' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_deeplinks
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_events' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_events
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_installations' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_installations
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_screen_view' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_screen_view
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_sessions_starts' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_sessions_starts
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m10:56:19.751207 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:19.754897 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.759954 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.761668 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

        insert into test.incremental_ym_events_default_yandex_metrika_stream select "__date", "__clientName", "__productName", "ymsclientID", "ymsdateTime", "ymsgoalsID", "ymsgoalsOrder", "ymslastAdvEngine", "ymslastReferalSource", "ymslastSearchEngine", "ymslastTrafficSource", "ymspageViews", "ymsparsedParamsKey1", "ymsparsedParamsKey2", "ymspurchaseCoupon", "ymspurchaseID", "ymspurchaseRevenue", "ymsregionCity", "ymsUTMCampaign", "ymsUTMContent", "ymsUTMMedium", "ymsUTMSource", "ymsUTMTerm", "ymsvisitID", "__table_name", "__emitted_at", "__normalized_at" from test.incremental_ym_events_default_yandex_metrika_stream__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:19.769854 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.773671 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */
drop table if exists test.incremental_ym_events_default_yandex_metrika_stream__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:19.776819 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.780921 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */
drop table if exists test.incremental_ym_events_default_yandex_metrika_stream__dbt_distributed_new_data 
  ...
[0m10:56:19.784940 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.788464 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream (execute): 2024-06-04 10:56:19.581854 => 2024-06-04 10:56:19.788366
[0m10:56:19.789401 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7901c0970>]}
[0m10:56:19.789966 [info ] [Thread-1 (]: 38 of 90 OK created sql incremental model test.incremental_ym_events_default_yandex_metrika_stream  [[32mOK[0m in 0.24s]
[0m10:56:19.790454 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m10:56:19.790891 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m10:56:19.791440 [info ] [Thread-1 (]: 40 of 90 START sql table model test.join_appmetrica_registry_appprofilematching  [RUN]
[0m10:56:19.792798 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching'
[0m10:56:19.793497 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching)
[0m10:56:19.794202 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m10:56:19.798095 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_appmetrica__%'
    GROUP BY table

...
[0m10:56:19.806004 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.808015 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_registry_[^_]+_profiles$')        
...
[0m10:56:19.817726 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.822534 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    select name, type from system.columns where table = 'incremental_appmetrica_registry_default_profiles'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.827671 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.833604 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"
[0m10:56:19.834341 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching (compile): 2024-06-04 10:56:19.794676 => 2024-06-04 10:56:19.834204
[0m10:56:19.834753 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m10:56:19.839935 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

            

    
        create table test.join_appmetrica_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_appmetrica_registry_default_profiles
SELECT
    appmetrica_device_id AS appmetricaDeviceId,
    profile_id AS crmUserId,
    city AS cityName,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    toLowCardinality('AppProfileMatching') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_registry_default_profiles' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_registry_default_profiles

            
        )

        )




    )
        ...
[0m10:56:19.862898 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:19.863689 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.13 seconds
[0m10:56:19.866268 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    select name, type from system.columns where table = 'join_appmetrica_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.869393 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_deeplinks$')        
...
[0m10:56:19.875815 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.877451 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"
[0m10:56:19.878230 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.883095 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.884910 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

  
    
    
        
        insert into test.join_appmetrica_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_appmetrica_registry_default_profiles
SELECT
    appmetrica_device_id AS appmetricaDeviceId,
    profile_id AS crmUserId,
    city AS cityName,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    toLowCardinality('AppProfileMatching') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_registry_default_profiles' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_registry_default_profiles

            
        )

        )




  ...
[0m10:56:19.888214 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.891213 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_events$')        
...
[0m10:56:19.894772 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.895977 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */
EXCHANGE TABLES test.join_appmetrica_registry_appprofilematching__dbt_backup AND test.join_appmetrica_registry_appprofilematching 
  
  ...
[0m10:56:19.899263 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.904244 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.905145 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.909890 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */
drop table if exists test.join_appmetrica_registry_appprofilematching__dbt_backup 
  ...
[0m10:56:19.913361 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.915013 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching (execute): 2024-06-04 10:56:19.834901 => 2024-06-04 10:56:19.914897
[0m10:56:19.915723 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790236890>]}
[0m10:56:19.916740 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.916111 [info ] [Thread-1 (]: 40 of 90 OK created sql table model test.join_appmetrica_registry_appprofilematching  [[32mOK[0m in 0.12s]
[0m10:56:19.920347 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_installations$')        
...
[0m10:56:19.920805 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m10:56:19.921873 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_mt_datestat
[0m10:56:19.922731 [info ] [Thread-1 (]: 41 of 90 START sql incremental model test.join_mt_datestat ..................... [RUN]
[0m10:56:19.924280 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_mt_datestat'
[0m10:56:19.925099 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_mt_datestat)
[0m10:56:19.925679 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_mt_datestat
[0m10:56:19.930759 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_mt__%'
    GROUP BY table

...
[0m10:56:19.931674 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.937513 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.939109 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.940906 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_mt__%' AND 
        name='__date'

  ...
[0m10:56:19.943181 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.946744 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_screen_view$')        
...
[0m10:56:19.947474 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.949931 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_mt_datestat_default_banners_statistics' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_mt_datestat_default_banners_statistics
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m10:56:19.957543 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.961398 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.966306 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:19.969867 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_sessions_starts$')        
...
[0m10:56:19.970884 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:19.975398 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_datestat_[^_]+_banners_statistics$')        
...
[0m10:56:19.978457 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.984050 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.986299 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.990810 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:19.992517 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:19.995364 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_appmetrica_events"
[0m10:56:19.995949 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_events (compile): 2024-06-04 10:56:19.705436 => 2024-06-04 10:56:19.995848
[0m10:56:19.996253 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_appmetrica_events
[0m10:56:20.002731 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.006138 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_registry_[^_]+_banners$')        
...
[0m10:56:20.007297 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.015509 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.016329 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.020629 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.024175 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_banners'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.030322 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.036328 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.038850 [debug] [Thread-2 (]: 
    In test.join_appmetrica_events:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:20.042111 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_registry_[^_]+_campaigns$')        
...
[0m10:56:20.120551 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */
drop table if exists test.join_appmetrica_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:20.125439 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.127712 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

            

    
        create table test.join_appmetrica_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_appmetrica_events_default_deeplinks
-- depends_on: test.incremental_appmetrica_events_default_events
-- depends_on: test.incremental_appmetrica_events_default_installations
-- depends_on: test.incremental_appmetrica_events_default_screen_view
-- depends_on: test.incremental_appmetrica_events_default_sessions_starts
WITH join_appmetrica_events_deeplinks AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime,
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode, --
    os_name AS osName,
    city AS cityName,
    assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, '')) AS adSourceDirty,
    extract(deeplink_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(deeplink_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(deeplink_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(deeplink_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(deeplink_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions, --
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppDeeplinkStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_deeplinks' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("deeplink_url_parameters" as String) as "deeplink_url_parameters" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_deeplinks

            
        )

        )
), union_events AS (
SELECT
    __emitted_at,
    splitByChar('_', __table_name)[6] AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    city AS cityName,
    event_name AS eventName,
    event_json AS eventJson,
    session_id AS sessionId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    JSONExtractString(event_json, 'transaction_id') AS transactionId,
    appmetrica_device_id AS appmetricaDeviceId,
    os_name AS osName,
    profile_id AS crmUserId,
    JSONExtractString(event_json, 'coupon') AS promoCode,    
    toDate(__date) AS __date, 
    toDateTime(event_receive_datetime) AS event_datetime, 
    0 AS screen_view
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_events' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("app_version_name" as String) as "app_version_name" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("event_json" as String) as "event_json" ,
                    cast("event_name" as String) as "event_name" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_events

            
        )

        )
)
, join_appmetrica_events_prepare AS (
SELECT 
    __date,
    toLowCardinality(__table_name) AS __table_name,
    event_datetime,
    toLowCardinality(accountName) AS accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId,   
    promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    transactionId,
    '' AS UtmHash,
    0 AS sessions,
    eventName = 'add_to_cart' AS addToCartSessions,
    eventName = 'view_cart' AS cartViewSessions,
    eventName = 'begin_checkout' AS checkoutSessions,
    eventName = 'purchase' AS webSalesSessions,
    eventName = 'purchase' AS sales,    
    assumeNotNull(coalesce(if(eventName = 'purchase', toFloat64(nullif(JSONExtractString(JSONExtractString(JSONExtractString(eventJson, 'value'), 'fiat'), 'value'), '')), 0), 0)) AS amountSales,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindVirtualCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS registrationCardSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'IntroRegistrationButtonClick' AND (JSONExtractString(eventJson, 'item_name') = 'AdventCalendar' or JSONExtractString(eventJson, 'item_name') = 'ScratchCards') as registrationButtonClick,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindPlasticCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CashbackButtonRegistration' AND  JSONExtractString(eventJson, 'item_name') = 'Cashback' AS registrationCashbackSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'ButtonActivate' AS instantDiscountActivationSessions,
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponDetailActivate' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR 
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Club') AS couponActivationSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'TakePartButton' AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link,
    JSONExtractString(eventJson, 'item_category') AS __itemCategory, 
    JSONExtractString(eventJson, 'item_name') AS __itemName,
    row_number() over() AS __rn,
    eventName AS __eventName, 
    sessionId AS __sessionId
FROM union_events
WHERE addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 OR registrationButtonClick > 0
  OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
  OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
  OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 
  OR couponActivationSessions > 0 OR participationInLotterySessions > 0 or screenView > 0
ORDER BY __date
)
, min_event AS (
SELECT MIN(__rn) AS __rn 
FROM join_appmetrica_events_prepare
GROUP BY appmetricaDeviceId, __sessionId, __eventName, __itemCategory, __itemName
), join_appmetrica_events_events AS (
SELECT * EXCEPT(__itemCategory, __itemName, __rn, __eventName, __sessionId)
FROM join_appmetrica_events_prepare
WHERE __rn IN (SELECT __rn FROM min_event) AND  
    (addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 
    OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
    OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
    OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 OR registrationButtonClick > 0
    OR couponActivationSessions > 0 OR participationInLotterySessions > 0)
), join_appmetrica_events_install AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(install_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    if(match(click_url_parameters, 'organic'), 'Органическая установка', assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, ''))) AS adSourceDirty,
    extract(click_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(click_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(click_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(click_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(click_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    is_reinstallation = 'false' AS installApp,
    1 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppInstallStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_installations' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("click_datetime" as String) as "click_datetime" ,
                    cast("click_url_parameters" as String) as "click_url_parameters" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("install_receive_datetime" as String) as "install_receive_datetime" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("is_reinstallation" as String) as "is_reinstallation" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_installations

            
        )

        )
), join_appmetrica_events_screen_view AS (
SELECT
    toDateTime(date_add(hour, 23, date_add(minute, 59, toDateTime(__date)))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime, 
    accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId, 
    '' AS promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,    
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    screen_view AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_screen_view' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("event_receive_datetime" as DateTime) as "event_receive_datetime" ,
                    cast("mobileAdsId" as String) as "mobileAdsId" ,
                    cast("accountName" as String) as "accountName" ,
                    cast("appmetricaDeviceId" as String) as "appmetricaDeviceId" ,
                    cast("cityName" as String) as "cityName" ,
                    cast("osName" as String) as "osName" ,
                    cast("crmUserId" as String) as "crmUserId" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("screen_view" as UInt64) as "screen_view" 

            from test.incremental_appmetrica_events_default_screen_view

            
        )

        )
), join_appmetrica_events_sessions_starts AS (
SELECT
    toDateTime(date_add(minute, 1, toDateTime(__date))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(session_start_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS UtmHash,
    1 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    CONCAT(installation_id, appmetrica_device_id) AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppSessionStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_sessions_starts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_start_receive_datetime" as String) as "session_start_receive_datetime" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_sessions_starts

            
        )

        )
)SELECT * 
FROM join_appmetrica_events_deeplinks
UNION ALL
SELECT * 
FROM join_appmetrica_events_events
UNION ALL
SELECT * 
FROM join_appmetrica_events_install
UNION ALL
SELECT * 
FROM join_appmetrica_events_screen_view
UNION ALL
SELECT * 
FROM join_appmetrica_events_sessions_starts





    )
        ...
[0m10:56:20.128469 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.133509 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_campaigns'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.138847 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.140997 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_mt_datestat"
[0m10:56:20.141443 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_mt_datestat (compile): 2024-06-04 10:56:19.926032 => 2024-06-04 10:56:20.141373
[0m10:56:20.141661 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_mt_datestat
[0m10:56:20.147590 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.152803 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.156168 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.161292 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.164582 [debug] [Thread-1 (]: 
    In test.join_mt_datestat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:20.167284 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */
drop table if exists test.join_mt_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:20.170336 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.174227 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

            

    
        create table test.join_mt_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_mt_datestat_default_banners_statistics
-- depends_on: test.incremental_mt_registry_default_banners
-- depends_on: test.incremental_mt_registry_default_campaigns
WITH banners_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_datestat_default_banners_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("banner_id" as String) as "banner_id" ,
                    cast("base" as String) as "base" ,
                    cast("date" as String) as "date" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_datestat_default_banners_statistics

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-22' AND '2024-02-23'),

banners AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_banners' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("campaign_id" as String) as "campaign_id" ,
                    cast("id" as String) as "id" ,
                    cast("textblocks" as String) as "textblocks" ,
                    cast("urls" as String) as "urls" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_banners

            
        )

        )
),

campaigns AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_campaigns' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("id" as String) as "id" ,
                    cast("name" as String) as "name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_campaigns

            
        )

        )
)

SELECT 
    toDate(banners_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,  
    toLowCardinality(splitByChar('_', banners_statistics.__table_name)[6]) AS accountName,
    toLowCardinality(banners_statistics.__table_name) AS __table_name,
    'MyTarget' AS adSourceDirty,
    --'' AS productName,
    campaigns.name AS adCampaignName,
    --'' AS adGroupName,
    banners.id AS adId,
    --'' AS adPhraseId,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_source=([^&]*)') AS utmSource,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_medium=([^&]*)') AS utmMedium,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_term=([^&]*)') AS utmTerm,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_content=([^&]*)') AS utmContent,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(adCampaignName, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.title_25.text') AS adTitle1,
    --'' AS adTitle2,
    assumeNotNull(coalesce(nullif(JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_90.text'), ''),
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_220.text'), '')) AS adText,
    --'' AS adPhraseName,
    toFloat64(JSONExtractString(banners_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(banners_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(banners_statistics.base, 'clicks')) AS clicks,
    banners_statistics.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM banners_statistics
JOIN banners ON banners_statistics.banner_id = banners.id 
JOIN campaigns ON banners.campaign_id = campaigns.id






    )
        ...
[0m10:56:20.214555 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:20.217448 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.222210 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.224017 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_mt_datestat"
[0m10:56:20.226035 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

        
  
    
    
        
        insert into test.join_mt_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_mt_datestat_default_banners_statistics
-- depends_on: test.incremental_mt_registry_default_banners
-- depends_on: test.incremental_mt_registry_default_campaigns
WITH banners_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_datestat_default_banners_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("banner_id" as String) as "banner_id" ,
                    cast("base" as String) as "base" ,
                    cast("date" as String) as "date" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_datestat_default_banners_statistics

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-22' AND '2024-02-23'),

banners AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_banners' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("campaign_id" as String) as "campaign_id" ,
                    cast("id" as String) as "id" ,
                    cast("textblocks" as String) as "textblocks" ,
                    cast("urls" as String) as "urls" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_banners

            
        )

        )
),

campaigns AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_campaigns' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("id" as String) as "id" ,
                    cast("name" as String) as "name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_campaigns

            
        )

        )
)

SELECT 
    toDate(banners_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,  
    toLowCardinality(splitByChar('_', banners_statistics.__table_name)[6]) AS accountName,
    toLowCardinality(banners_statistics.__table_name) AS __table_name,
    'MyTarget' AS adSourceDirty,
    --'' AS productName,
    campaigns.name AS adCampaignName,
    --'' AS adGroupName,
    banners.id AS adId,
    --'' AS adPhraseId,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_source=([^&]*)') AS utmSource,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_medium=([^&]*)') AS utmMedium,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_term=([^&]*)') AS utmTerm,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_content=([^&]*)') AS utmContent,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(adCampaignName, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.title_25.text') AS adTitle1,
    --'' AS adTitle2,
    assumeNotNull(coalesce(nullif(JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_90.text'), ''),
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_220.text'), '')) AS adText,
    --'' AS adPhraseName,
    toFloat64(JSONExtractString(banners_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(banners_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(banners_statistics.base, 'clicks')) AS clicks,
    banners_statistics.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM banners_statistics
JOIN banners ON banners_statistics.banner_id = banners.id 
JOIN campaigns ON banners.campaign_id = campaigns.id






  
      ...
[0m10:56:20.306048 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m10:56:20.307188 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

      delete from test.join_mt_datestat where (__date, __table_name) in (select __date, __table_name
                                          from test.join_mt_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:20.337851 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:20.340704 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.346731 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.349448 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

        insert into test.join_mt_datestat select "__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link" from test.join_mt_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:20.357230 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.360206 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */
drop table if exists test.join_mt_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:20.364078 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.368021 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */
drop table if exists test.join_mt_datestat__dbt_distributed_new_data 
  ...
[0m10:56:20.369383 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.24 seconds
[0m10:56:20.372904 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.373867 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.377669 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_mt_datestat (execute): 2024-06-04 10:56:20.141772 => 2024-06-04 10:56:20.377590
[0m10:56:20.378494 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790443fd0>]}
[0m10:56:20.379121 [info ] [Thread-1 (]: 41 of 90 OK created sql incremental model test.join_mt_datestat ................ [[32mOK[0m in 0.45s]
[0m10:56:20.380026 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.380608 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_mt_datestat
[0m10:56:20.382645 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_appmetrica_events"
[0m10:56:20.383532 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m10:56:20.384675 [info ] [Thread-1 (]: 42 of 90 START sql table model test.join_utmcraft_registry_utmhashregistry ..... [RUN]
[0m10:56:20.385461 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry'
[0m10:56:20.385817 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry)
[0m10:56:20.386089 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m10:56:20.386514 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

        
  
    
    
        
        insert into test.join_appmetrica_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link")
  -- depends_on: test.incremental_appmetrica_events_default_deeplinks
-- depends_on: test.incremental_appmetrica_events_default_events
-- depends_on: test.incremental_appmetrica_events_default_installations
-- depends_on: test.incremental_appmetrica_events_default_screen_view
-- depends_on: test.incremental_appmetrica_events_default_sessions_starts
WITH join_appmetrica_events_deeplinks AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime,
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode, --
    os_name AS osName,
    city AS cityName,
    assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, '')) AS adSourceDirty,
    extract(deeplink_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(deeplink_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(deeplink_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(deeplink_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(deeplink_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions, --
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppDeeplinkStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_deeplinks' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("deeplink_url_parameters" as String) as "deeplink_url_parameters" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_deeplinks

            
        )

        )
), union_events AS (
SELECT
    __emitted_at,
    splitByChar('_', __table_name)[6] AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    city AS cityName,
    event_name AS eventName,
    event_json AS eventJson,
    session_id AS sessionId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    JSONExtractString(event_json, 'transaction_id') AS transactionId,
    appmetrica_device_id AS appmetricaDeviceId,
    os_name AS osName,
    profile_id AS crmUserId,
    JSONExtractString(event_json, 'coupon') AS promoCode,    
    toDate(__date) AS __date, 
    toDateTime(event_receive_datetime) AS event_datetime, 
    0 AS screen_view
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_events' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("app_version_name" as String) as "app_version_name" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("event_json" as String) as "event_json" ,
                    cast("event_name" as String) as "event_name" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_events

            
        )

        )
)
, join_appmetrica_events_prepare AS (
SELECT 
    __date,
    toLowCardinality(__table_name) AS __table_name,
    event_datetime,
    toLowCardinality(accountName) AS accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId,   
    promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    transactionId,
    '' AS UtmHash,
    0 AS sessions,
    eventName = 'add_to_cart' AS addToCartSessions,
    eventName = 'view_cart' AS cartViewSessions,
    eventName = 'begin_checkout' AS checkoutSessions,
    eventName = 'purchase' AS webSalesSessions,
    eventName = 'purchase' AS sales,    
    assumeNotNull(coalesce(if(eventName = 'purchase', toFloat64(nullif(JSONExtractString(JSONExtractString(JSONExtractString(eventJson, 'value'), 'fiat'), 'value'), '')), 0), 0)) AS amountSales,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindVirtualCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS registrationCardSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'IntroRegistrationButtonClick' AND (JSONExtractString(eventJson, 'item_name') = 'AdventCalendar' or JSONExtractString(eventJson, 'item_name') = 'ScratchCards') as registrationButtonClick,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindPlasticCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CashbackButtonRegistration' AND  JSONExtractString(eventJson, 'item_name') = 'Cashback' AS registrationCashbackSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'ButtonActivate' AS instantDiscountActivationSessions,
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponDetailActivate' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR 
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Club') AS couponActivationSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'TakePartButton' AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link,
    JSONExtractString(eventJson, 'item_category') AS __itemCategory, 
    JSONExtractString(eventJson, 'item_name') AS __itemName,
    row_number() over() AS __rn,
    eventName AS __eventName, 
    sessionId AS __sessionId
FROM union_events
WHERE addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 OR registrationButtonClick > 0
  OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
  OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
  OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 
  OR couponActivationSessions > 0 OR participationInLotterySessions > 0 or screenView > 0
ORDER BY __date
)
, min_event AS (
SELECT MIN(__rn) AS __rn 
FROM join_appmetrica_events_prepare
GROUP BY appmetricaDeviceId, __sessionId, __eventName, __itemCategory, __itemName
), join_appmetrica_events_events AS (
SELECT * EXCEPT(__itemCategory, __itemName, __rn, __eventName, __sessionId)
FROM join_appmetrica_events_prepare
WHERE __rn IN (SELECT __rn FROM min_event) AND  
    (addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 
    OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
    OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
    OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 OR registrationButtonClick > 0
    OR couponActivationSessions > 0 OR participationInLotterySessions > 0)
), join_appmetrica_events_install AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(install_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    if(match(click_url_parameters, 'organic'), 'Органическая установка', assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, ''))) AS adSourceDirty,
    extract(click_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(click_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(click_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(click_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(click_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    is_reinstallation = 'false' AS installApp,
    1 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppInstallStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_installations' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("click_datetime" as String) as "click_datetime" ,
                    cast("click_url_parameters" as String) as "click_url_parameters" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("install_receive_datetime" as String) as "install_receive_datetime" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("is_reinstallation" as String) as "is_reinstallation" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_installations

            
        )

        )
), join_appmetrica_events_screen_view AS (
SELECT
    toDateTime(date_add(hour, 23, date_add(minute, 59, toDateTime(__date)))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime, 
    accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId, 
    '' AS promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,    
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    screen_view AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_screen_view' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("event_receive_datetime" as DateTime) as "event_receive_datetime" ,
                    cast("mobileAdsId" as String) as "mobileAdsId" ,
                    cast("accountName" as String) as "accountName" ,
                    cast("appmetricaDeviceId" as String) as "appmetricaDeviceId" ,
                    cast("cityName" as String) as "cityName" ,
                    cast("osName" as String) as "osName" ,
                    cast("crmUserId" as String) as "crmUserId" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("screen_view" as UInt64) as "screen_view" 

            from test.incremental_appmetrica_events_default_screen_view

            
        )

        )
), join_appmetrica_events_sessions_starts AS (
SELECT
    toDateTime(date_add(minute, 1, toDateTime(__date))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(session_start_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS UtmHash,
    1 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    CONCAT(installation_id, appmetrica_device_id) AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppSessionStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_sessions_starts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_start_receive_datetime" as String) as "session_start_receive_datetime" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_sessions_starts

            
        )

        )
)SELECT * 
FROM join_appmetrica_events_deeplinks
UNION ALL
SELECT * 
FROM join_appmetrica_events_events
UNION ALL
SELECT * 
FROM join_appmetrica_events_install
UNION ALL
SELECT * 
FROM join_appmetrica_events_screen_view
UNION ALL
SELECT * 
FROM join_appmetrica_events_sessions_starts





  
      ...
[0m10:56:20.392727 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_utmcraft__%'
    GROUP BY table

...
[0m10:56:20.400677 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.402980 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_utmcraft_registry_[^_]+_utmresult$')        
...
[0m10:56:20.411471 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.415074 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'incremental_utmcraft_registry_default_utmresult'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.420808 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.423873 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"
[0m10:56:20.424465 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry (compile): 2024-06-04 10:56:20.386952 => 2024-06-04 10:56:20.424368
[0m10:56:20.424761 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m10:56:20.429321 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

            

    
        create table test.join_utmcraft_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_utmcraft_registry_default_utmresult
SELECT
    utm_hashcode AS utmHash,
    JSONExtractString(data, '4') AS utm_base_url,
    JSONExtractString(data, '5') AS utm_utmSource,
    if(JSONExtractString(data, '6') = 'указать вручную', JSONExtractString(data, '95'), JSONExtractString(data, '6')) AS utm_utmMedium,
    JSONExtractString(data, '9') AS utm_utmCampaign,
    JSONExtractString(data, '97') AS utm_project,
    if(JSONExtractString(data, '7') = 'custom-value-input-field',JSONExtractString(data, 'custom-7'),JSONExtractString(data, '7')) AS utm_utmContent,
    JSONExtractString(data, '66') AS utm_strategy,
    concat(if(JSONExtractString(data, '69') = 'custom-value-input-field',JSONExtractString(data, 'custom-69'),JSONExtractString(data, '69')),
            if(JSONExtractString(data, '69') != '' or JSONExtractString(data, 'custom-69') != '', ';', ''),
           if(JSONExtractString(data, '88') = 'custom-value-input-field',JSONExtractString(data, 'custom-88'),JSONExtractString(data, '88')),
           if(JSONExtractString(data, '88') != '' or JSONExtractString(data, 'custom-88') != '', ';', ''),
           if(JSONExtractString(data, '87') = 'custom-value-input-field',JSONExtractString(data, 'custom-87'),JSONExtractString(data, '87')),
           if(JSONExtractString(data, '87') != '' or JSONExtractString(data, 'custom-87') != '', ';', ''),
           if(JSONExtractString(data, '89') = 'custom-value-input-field',JSONExtractString(data, 'custom-89'),JSONExtractString(data, '89')),
           if(JSONExtractString(data, '89') != '' or JSONExtractString(data, 'custom-89') != '', ';', ''),
           if(JSONExtractString(data, '90') = 'custom-value-input-field',JSONExtractString(data, 'custom-90'),JSONExtractString(data, '90')),
           if(JSONExtractString(data, '90') != '' or JSONExtractString(data, 'custom-90') != '', ';', ''),
           if(JSONExtractString(data, '91') = 'custom-value-input-field',JSONExtractString(data, 'custom-91'),JSONExtractString(data, '91')),
           if(JSONExtractString(data, '91') != '' or JSONExtractString(data, 'custom-91') != '', ';', ''),
           if(JSONExtractString(data, '93') = 'custom-value-input-field',JSONExtractString(data, 'custom-93'),JSONExtractString(data, '93')),
           if(JSONExtractString(data, '93') != '' or JSONExtractString(data, 'custom-93') != '', ';', ''),
           if(JSONExtractString(data, '85') = 'custom-value-input-field',JSONExtractString(data, 'custom-85'),JSONExtractString(data, '85')),
           if(JSONExtractString(data, '85') != '' or JSONExtractString(data, 'custom-85') != '', ';', ''),
           if(JSONExtractString(data, '92') = 'custom-value-input-field',JSONExtractString(data, 'custom-92'),JSONExtractString(data, '92')),
           if(JSONExtractString(data, '92') != '' or JSONExtractString(data, 'custom-92') != '', ';', ''),
           if(JSONExtractString(data, '86') = 'custom-value-input-field',JSONExtractString(data, 'custom-86'),JSONExtractString(data, '86'))) AS utm_audience,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    'UtmHashRegistry' AS __link         
FROM (
    

        (
            select
                cast('test.incremental_utmcraft_registry_default_utmresult' as String) as _dbt_source_relation,

                
                    cast("created_at" as String) as "created_at" ,
                    cast("created_by_id" as String) as "created_by_id" ,
                    cast("data" as String) as "data" ,
                    cast("form_id" as String) as "form_id" ,
                    cast("id" as String) as "id" ,
                    cast("updated_at" as String) as "updated_at" ,
                    cast("updated_by_id" as String) as "updated_by_id" ,
                    cast("utm_hashcode" as String) as "utm_hashcode" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_utmcraft_registry_default_utmresult

            
        )

        )





    )
        ...
[0m10:56:20.448582 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:20.452062 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'join_utmcraft_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.457521 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.459050 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"
[0m10:56:20.459543 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

  
    
    
        
        insert into test.join_utmcraft_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_utmcraft_registry_default_utmresult
SELECT
    utm_hashcode AS utmHash,
    JSONExtractString(data, '4') AS utm_base_url,
    JSONExtractString(data, '5') AS utm_utmSource,
    if(JSONExtractString(data, '6') = 'указать вручную', JSONExtractString(data, '95'), JSONExtractString(data, '6')) AS utm_utmMedium,
    JSONExtractString(data, '9') AS utm_utmCampaign,
    JSONExtractString(data, '97') AS utm_project,
    if(JSONExtractString(data, '7') = 'custom-value-input-field',JSONExtractString(data, 'custom-7'),JSONExtractString(data, '7')) AS utm_utmContent,
    JSONExtractString(data, '66') AS utm_strategy,
    concat(if(JSONExtractString(data, '69') = 'custom-value-input-field',JSONExtractString(data, 'custom-69'),JSONExtractString(data, '69')),
            if(JSONExtractString(data, '69') != '' or JSONExtractString(data, 'custom-69') != '', ';', ''),
           if(JSONExtractString(data, '88') = 'custom-value-input-field',JSONExtractString(data, 'custom-88'),JSONExtractString(data, '88')),
           if(JSONExtractString(data, '88') != '' or JSONExtractString(data, 'custom-88') != '', ';', ''),
           if(JSONExtractString(data, '87') = 'custom-value-input-field',JSONExtractString(data, 'custom-87'),JSONExtractString(data, '87')),
           if(JSONExtractString(data, '87') != '' or JSONExtractString(data, 'custom-87') != '', ';', ''),
           if(JSONExtractString(data, '89') = 'custom-value-input-field',JSONExtractString(data, 'custom-89'),JSONExtractString(data, '89')),
           if(JSONExtractString(data, '89') != '' or JSONExtractString(data, 'custom-89') != '', ';', ''),
           if(JSONExtractString(data, '90') = 'custom-value-input-field',JSONExtractString(data, 'custom-90'),JSONExtractString(data, '90')),
           if(JSONExtractString(data, '90') != '' or JSONExtractString(data, 'custom-90') != '', ';', ''),
           if(JSONExtractString(data, '91') = 'custom-value-input-field',JSONExtractString(data, 'custom-91'),JSONExtractString(data, '91')),
           if(JSONExtractString(data, '91') != '' or JSONExtractString(data, 'custom-91') != '', ';', ''),
           if(JSONExtractString(data, '93') = 'custom-value-input-field',JSONExtractString(data, 'custom-93'),JSONExtractString(data, '93')),
           if(JSONExtractString(data, '93') != '' or JSONExtractString(data, 'custom-93') != '', ';', ''),
           if(JSONExtractString(data, '85') = 'custom-value-input-field',JSONExtractString(data, 'custom-85'),JSONExtractString(data, '85')),
           if(JSONExtractString(data, '85') != '' or JSONExtractString(data, 'custom-85') != '', ';', ''),
           if(JSONExtractString(data, '92') = 'custom-value-input-field',JSONExtractString(data, 'custom-92'),JSONExtractString(data, '92')),
           if(JSONExtractString(data, '92') != '' or JSONExtractString(data, 'custom-92') != '', ';', ''),
           if(JSONExtractString(data, '86') = 'custom-value-input-field',JSONExtractString(data, 'custom-86'),JSONExtractString(data, '86'))) AS utm_audience,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    'UtmHashRegistry' AS __link         
FROM (
    

        (
            select
                cast('test.incremental_utmcraft_registry_default_utmresult' as String) as _dbt_source_relation,

                
                    cast("created_at" as String) as "created_at" ,
                    cast("created_by_id" as String) as "created_by_id" ,
                    cast("data" as String) as "data" ,
                    cast("form_id" as String) as "form_id" ,
                    cast("id" as String) as "id" ,
                    cast("updated_at" as String) as "updated_at" ,
                    cast("updated_by_id" as String) as "updated_by_id" ,
                    cast("utm_hashcode" as String) as "utm_hashcode" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_utmcraft_registry_default_utmresult

            
        )

        )





  ...
[0m10:56:20.472934 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.474292 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */
EXCHANGE TABLES test.join_utmcraft_registry_utmhashregistry__dbt_backup AND test.join_utmcraft_registry_utmhashregistry 
  
  ...
[0m10:56:20.479282 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.483410 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */
drop table if exists test.join_utmcraft_registry_utmhashregistry__dbt_backup 
  ...
[0m10:56:20.487289 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.488671 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry (execute): 2024-06-04 10:56:20.424881 => 2024-06-04 10:56:20.488609
[0m10:56:20.489297 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791d8ee00>]}
[0m10:56:20.489763 [info ] [Thread-1 (]: 42 of 90 OK created sql table model test.join_utmcraft_registry_utmhashregistry  [[32mOK[0m in 0.10s]
[0m10:56:20.490153 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m10:56:20.490456 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_sheets_periodstat
[0m10:56:20.491203 [info ] [Thread-1 (]: 43 of 90 START sql incremental model test.join_sheets_periodstat ............... [RUN]
[0m10:56:20.492519 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_sheets_periodstat'
[0m10:56:20.492765 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_sheets_periodstat)
[0m10:56:20.492915 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_sheets_periodstat
[0m10:56:20.496088 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_sheets__%'
    GROUP BY table

...
[0m10:56:20.503258 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.504739 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_sheets__%' AND 
        name='__date'

  ...
[0m10:56:20.511262 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.513015 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_sheets_periodstat_default_planCosts' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_sheets_periodstat_default_planCosts
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m10:56:20.528121 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.530403 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_sheets_periodstat_[^_]+_planCosts$')        
...
[0m10:56:20.538137 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.543932 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.548543 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.551062 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_sheets_periodstat"
[0m10:56:20.551885 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_sheets_periodstat (compile): 2024-06-04 10:56:20.493012 => 2024-06-04 10:56:20.551729
[0m10:56:20.552368 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_sheets_periodstat
[0m10:56:20.559088 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.564298 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.567837 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.574044 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.576236 [debug] [Thread-1 (]: 
    In test.join_sheets_periodstat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:20.579281 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */
drop table if exists test.join_sheets_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:20.582875 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.586050 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

            

    
        create table test.join_sheets_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_sheets_periodstat_default_planCosts
SELECT
    __date,
    Campaign AS campaign,
    toFloat64(Cost) AS cost,
    toDate(Period_start) AS periodStart,
    toDate(Period_end) AS periodEnd,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name, 
    toLowCardinality('ManualAdCostStat') AS __link

FROM (
    

        (
            select
                cast('test.incremental_sheets_periodstat_default_planCosts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("Campaign" as String) as "Campaign" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Period_end" as String) as "Period_end" ,
                    cast("Period_start" as String) as "Period_start" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_sheets_periodstat_default_planCosts

            
        )

        )




    )
        ...
[0m10:56:20.661832 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m10:56:20.664840 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.669998 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.671513 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_sheets_periodstat"
[0m10:56:20.671937 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

        
  
    
    
        
        insert into test.join_sheets_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_sheets_periodstat_default_planCosts
SELECT
    __date,
    Campaign AS campaign,
    toFloat64(Cost) AS cost,
    toDate(Period_start) AS periodStart,
    toDate(Period_end) AS periodEnd,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name, 
    toLowCardinality('ManualAdCostStat') AS __link

FROM (
    

        (
            select
                cast('test.incremental_sheets_periodstat_default_planCosts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("Campaign" as String) as "Campaign" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Period_end" as String) as "Period_end" ,
                    cast("Period_start" as String) as "Period_start" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_sheets_periodstat_default_planCosts

            
        )

        )




  
      ...
[0m10:56:20.688274 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:20.689295 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

      delete from test.join_sheets_periodstat where (__date, __table_name) in (select __date, __table_name
                                          from test.join_sheets_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:20.720204 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:20.724551 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.729511 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.731215 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

        insert into test.join_sheets_periodstat select "__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link" from test.join_sheets_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:20.737502 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.740847 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */
drop table if exists test.join_sheets_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:20.744726 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.747904 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */
drop table if exists test.join_sheets_periodstat__dbt_distributed_new_data 
  ...
[0m10:56:20.751662 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.754225 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_sheets_periodstat (execute): 2024-06-04 10:56:20.552530 => 2024-06-04 10:56:20.754151
[0m10:56:20.754793 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7901d8b20>]}
[0m10:56:20.755172 [info ] [Thread-1 (]: 43 of 90 OK created sql incremental model test.join_sheets_periodstat .......... [[32mOK[0m in 0.26s]
[0m10:56:20.755552 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_sheets_periodstat
[0m10:56:20.755882 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_vkads_datestat
[0m10:56:20.756276 [info ] [Thread-1 (]: 44 of 90 START sql incremental model test.join_vkads_datestat .................. [RUN]
[0m10:56:20.757809 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_vkads_datestat'
[0m10:56:20.758375 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_vkads_datestat)
[0m10:56:20.758659 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_vkads_datestat
[0m10:56:20.762452 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_vkads__%'
    GROUP BY table

...
[0m10:56:20.769351 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.770742 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_vkads__%' AND 
        name='__date'

  ...
[0m10:56:20.776372 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.778800 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_vkads_datestat_default_ad_plans_statistics' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_vkads_datestat_default_ad_plans_statistics
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m10:56:20.801079 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:20.804211 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_vkads_datestat_[^_]+_ad_plans_statistics$')        
...
[0m10:56:20.812335 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.815970 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.821551 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.824952 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_vkads_periodstat_[^_]+_ad_plans$')        
...
[0m10:56:20.831730 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.838981 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'incremental_vkads_periodstat_default_ad_plans'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.844709 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.847395 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_vkads_datestat"
[0m10:56:20.847811 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_vkads_datestat (compile): 2024-06-04 10:56:20.758857 => 2024-06-04 10:56:20.847745
[0m10:56:20.847985 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_vkads_datestat
[0m10:56:20.853733 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.859848 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.863247 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.868122 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.870504 [debug] [Thread-1 (]: 
    In test.join_vkads_datestat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:20.873347 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */
drop table if exists test.join_vkads_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:20.876736 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.879402 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

            

    
        create table test.join_vkads_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_vkads_datestat_default_ad_plans_statistics
-- depends_on: test.incremental_vkads_periodstat_default_ad_plans
WITH ad_plans_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_datestat_default_ad_plans_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("ad_offers" as String) as "ad_offers" ,
                    cast("ad_plan_id" as String) as "ad_plan_id" ,
                    cast("base" as String) as "base" ,
                    cast("carousel" as String) as "carousel" ,
                    cast("date" as String) as "date" ,
                    cast("events" as String) as "events" ,
                    cast("moat" as String) as "moat" ,
                    cast("playable" as String) as "playable" ,
                    cast("romi" as String) as "romi" ,
                    cast("social_network" as String) as "social_network" ,
                    cast("tps" as String) as "tps" ,
                    cast("uniques" as String) as "uniques" ,
                    cast("uniques_video" as String) as "uniques_video" ,
                    cast("video" as String) as "video" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_datestat_default_ad_plans_statistics

            
        )

        ) 
WHERE toDate(__date) between '2024-02-26' and '2024-03-02'),

ad_plans AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_periodstat_default_ad_plans' as String) as _dbt_source_relation,

                
                    cast("ad_groups" as String) as "ad_groups" ,
                    cast("autobidding_mode" as String) as "autobidding_mode" ,
                    cast("budget_limit" as String) as "budget_limit" ,
                    cast("budget_limit_day" as String) as "budget_limit_day" ,
                    cast("created" as String) as "created" ,
                    cast("date_end" as String) as "date_end" ,
                    cast("date_start" as String) as "date_start" ,
                    cast("id" as String) as "id" ,
                    cast("max_price" as String) as "max_price" ,
                    cast("name" as String) as "name" ,
                    cast("objective" as String) as "objective" ,
                    cast("priced_goal" as String) as "priced_goal" ,
                    cast("pricelist_id" as String) as "pricelist_id" ,
                    cast("status" as String) as "status" ,
                    cast("updated" as String) as "updated" ,
                    cast("vkads_status" as String) as "vkads_status" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_periodstat_default_ad_plans

            
        )

        )
)

SELECT
    toDate(ad_plans_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,
    toLowCardinality(splitByChar('_', ad_plans.__table_name)[6]) AS accountName,
    toLowCardinality(ad_plans.__table_name) AS __table_name,
    'VK Ads' AS adSourceDirty,
    ad_plans.name AS adCampaignName,
    ad_plans.id AS adId,
    toFloat64(JSONExtractString(ad_plans_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'clicks')) AS clicks,
    ad_plans.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM ad_plans
JOIN ad_plans_statistics ON ad_plans.id = ad_plans_statistics.ad_plan_id






    )
        ...
[0m10:56:20.906589 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:20.909545 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.914131 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:20.915576 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_vkads_datestat"
[0m10:56:20.915967 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

        
  
    
    
        
        insert into test.join_vkads_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_vkads_datestat_default_ad_plans_statistics
-- depends_on: test.incremental_vkads_periodstat_default_ad_plans
WITH ad_plans_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_datestat_default_ad_plans_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("ad_offers" as String) as "ad_offers" ,
                    cast("ad_plan_id" as String) as "ad_plan_id" ,
                    cast("base" as String) as "base" ,
                    cast("carousel" as String) as "carousel" ,
                    cast("date" as String) as "date" ,
                    cast("events" as String) as "events" ,
                    cast("moat" as String) as "moat" ,
                    cast("playable" as String) as "playable" ,
                    cast("romi" as String) as "romi" ,
                    cast("social_network" as String) as "social_network" ,
                    cast("tps" as String) as "tps" ,
                    cast("uniques" as String) as "uniques" ,
                    cast("uniques_video" as String) as "uniques_video" ,
                    cast("video" as String) as "video" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_datestat_default_ad_plans_statistics

            
        )

        ) 
WHERE toDate(__date) between '2024-02-26' and '2024-03-02'),

ad_plans AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_periodstat_default_ad_plans' as String) as _dbt_source_relation,

                
                    cast("ad_groups" as String) as "ad_groups" ,
                    cast("autobidding_mode" as String) as "autobidding_mode" ,
                    cast("budget_limit" as String) as "budget_limit" ,
                    cast("budget_limit_day" as String) as "budget_limit_day" ,
                    cast("created" as String) as "created" ,
                    cast("date_end" as String) as "date_end" ,
                    cast("date_start" as String) as "date_start" ,
                    cast("id" as String) as "id" ,
                    cast("max_price" as String) as "max_price" ,
                    cast("name" as String) as "name" ,
                    cast("objective" as String) as "objective" ,
                    cast("priced_goal" as String) as "priced_goal" ,
                    cast("pricelist_id" as String) as "pricelist_id" ,
                    cast("status" as String) as "status" ,
                    cast("updated" as String) as "updated" ,
                    cast("vkads_status" as String) as "vkads_status" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_periodstat_default_ad_plans

            
        )

        )
)

SELECT
    toDate(ad_plans_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,
    toLowCardinality(splitByChar('_', ad_plans.__table_name)[6]) AS accountName,
    toLowCardinality(ad_plans.__table_name) AS __table_name,
    'VK Ads' AS adSourceDirty,
    ad_plans.name AS adCampaignName,
    ad_plans.id AS adId,
    toFloat64(JSONExtractString(ad_plans_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'clicks')) AS clicks,
    ad_plans.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM ad_plans
JOIN ad_plans_statistics ON ad_plans.id = ad_plans_statistics.ad_plan_id






  
      ...
[0m10:56:20.942800 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.55 seconds
[0m10:56:20.944089 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

      delete from test.join_appmetrica_events where (__date, __table_name) in (select __date, __table_name
                                          from test.join_appmetrica_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:20.949701 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:20.951457 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

      delete from test.join_vkads_datestat where (__date, __table_name) in (select __date, __table_name
                                          from test.join_vkads_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:20.984645 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:20.989572 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.990298 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:20.994950 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:20.996452 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:20.998494 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

        insert into test.join_appmetrica_events select "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link" from test.join_appmetrica_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:21.004962 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.006771 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

        insert into test.join_vkads_datestat select "__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "adCost", "impressions", "clicks", "__emitted_at", "__link" from test.join_vkads_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:21.011518 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.014547 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */
drop table if exists test.join_appmetrica_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.015334 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.019192 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */
drop table if exists test.join_vkads_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.020584 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.024283 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */
drop table if exists test.join_appmetrica_events__dbt_distributed_new_data 
  ...
[0m10:56:21.025053 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.028837 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */
drop table if exists test.join_vkads_datestat__dbt_distributed_new_data 
  ...
[0m10:56:21.029712 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.033213 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_events (execute): 2024-06-04 10:56:19.996423 => 2024-06-04 10:56:21.033141
[0m10:56:21.033851 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.035261 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7902e15d0>]}
[0m10:56:21.037830 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_vkads_datestat (execute): 2024-06-04 10:56:20.848075 => 2024-06-04 10:56:21.037750
[0m10:56:21.039368 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790406920>]}
[0m10:56:21.040007 [info ] [Thread-2 (]: 39 of 90 OK created sql incremental model test.join_appmetrica_events .......... [[32mOK[0m in 1.33s]
[0m10:56:21.040907 [info ] [Thread-1 (]: 44 of 90 OK created sql incremental model test.join_vkads_datestat ............. [[32mOK[0m in 0.28s]
[0m10:56:21.041482 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_appmetrica_events
[0m10:56:21.042031 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_vkads_datestat
[0m10:56:21.042998 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_yd_datestat
[0m10:56:21.043845 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_ym_events
[0m10:56:21.044369 [info ] [Thread-2 (]: 45 of 90 START sql incremental model test.join_yd_datestat ..................... [RUN]
[0m10:56:21.045682 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_yd_datestat'
[0m10:56:21.046250 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_yd_datestat)
[0m10:56:21.046552 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_yd_datestat
[0m10:56:21.055667 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_yd__%'
    GROUP BY table

...
[0m10:56:21.044774 [info ] [Thread-1 (]: 46 of 90 START sql incremental model test.join_ym_events ....................... [RUN]
[0m10:56:21.057934 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_ym_events'
[0m10:56:21.058523 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_ym_events)
[0m10:56:21.058794 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_ym_events
[0m10:56:21.062195 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_ym__%'
    GROUP BY table

...
[0m10:56:21.063279 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.065631 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_yd__%' AND 
        name='__date'

  ...
[0m10:56:21.070693 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.072769 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_ym__%' AND 
        name='__date'

  ...
[0m10:56:21.073495 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.076148 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_yd_datestat_default_custom_report' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_yd_datestat_default_custom_report
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m10:56:21.078962 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.080568 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_ym_events_default_yandex_metrika_stream' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        False as should_full_refresh
    
    FROM test.normalize_ym_events_default_yandex_metrika_stream
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m10:56:21.091893 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.094504 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_yd_datestat_[^_]+')        
...
[0m10:56:21.097886 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.100308 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_ym_events_[^_]+_yandex_metrika_stream$')        
...
[0m10:56:21.103598 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.107493 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.108852 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.113294 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.114073 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.118935 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_yd_datestat"
[0m10:56:21.120097 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_yd_datestat (compile): 2024-06-04 10:56:21.046694 => 2024-06-04 10:56:21.119914
[0m10:56:21.120863 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.121286 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_yd_datestat
[0m10:56:21.124714 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_ym_events"
[0m10:56:21.131246 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.132888 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_ym_events (compile): 2024-06-04 10:56:21.058903 => 2024-06-04 10:56:21.132754
[0m10:56:21.133268 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_ym_events
[0m10:56:21.142212 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'join_ym_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.143113 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.147917 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.148624 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.154936 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'join_ym_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.156198 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.158997 [debug] [Thread-2 (]: 
    In test.join_yd_datestat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:21.162556 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */
drop table if exists test.join_yd_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.163210 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.169089 [debug] [Thread-1 (]: 
    In test.join_ym_events:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:21.172094 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */
drop table if exists test.join_ym_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.174139 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.176585 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

            

    
        create table test.join_yd_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_yd_datestat_default_custom_report
WITH cmps AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_yd_datestat_default_custom_report' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("AdId" as String) as "AdId" ,
                    cast("CampaignId" as String) as "CampaignId" ,
                    cast("CampaignName" as String) as "CampaignName" ,
                    cast("CampaignType" as String) as "CampaignType" ,
                    cast("Clicks" as String) as "Clicks" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Date" as String) as "Date" ,
                    cast("Impressions" as String) as "Impressions" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_yd_datestat_default_custom_report

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-15' AND '2024-02-28')

SELECT  
    toDate(__date) AS __date,
    toLowCardinality('*') AS reportType, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    'Yandex Direct Ads' AS adSourceDirty,
    --'' AS productName,
    CampaignName AS adCampaignName,
    CampaignType AS adGroupName,
    CampaignId AS adId,
    '' AS adPhraseId,
    --'' AS utmSource,
    --'' AS utmMedium,
    --'' AS utmCampaign,
    --'' AS utmTerm,
    --'' AS utmContent,
    arrayElement(splitByChar('~', CampaignName), 2) AS utmHash,
    --'' AS adTitle1,
    --'' AS adTitle2,
    --'' AS adText,
    --'' AS adPhraseName,  
    (toFloat64(Cost)/1000000)*1.2 AS adCost,
    toInt32(Impressions) AS impressions,
    toInt32(Clicks) AS clicks,
    __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM cmps





    )
        ...
[0m10:56:21.179827 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.182313 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

            

    
        create table test.join_ym_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_ym_events_default_yandex_metrika_stream
WITH events AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_ym_events_default_yandex_metrika_stream' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("ymsclientID" as String) as "ymsclientID" ,
                    cast("ymsdateTime" as String) as "ymsdateTime" ,
                    cast("ymsgoalsID" as String) as "ymsgoalsID" ,
                    cast("ymsgoalsOrder" as String) as "ymsgoalsOrder" ,
                    cast("ymslastAdvEngine" as String) as "ymslastAdvEngine" ,
                    cast("ymslastReferalSource" as String) as "ymslastReferalSource" ,
                    cast("ymslastSearchEngine" as String) as "ymslastSearchEngine" ,
                    cast("ymslastTrafficSource" as String) as "ymslastTrafficSource" ,
                    cast("ymspageViews" as String) as "ymspageViews" ,
                    cast("ymsparsedParamsKey1" as String) as "ymsparsedParamsKey1" ,
                    cast("ymsparsedParamsKey2" as String) as "ymsparsedParamsKey2" ,
                    cast("ymspurchaseCoupon" as String) as "ymspurchaseCoupon" ,
                    cast("ymspurchaseID" as String) as "ymspurchaseID" ,
                    cast("ymspurchaseRevenue" as String) as "ymspurchaseRevenue" ,
                    cast("ymsregionCity" as String) as "ymsregionCity" ,
                    cast("ymsUTMCampaign" as String) as "ymsUTMCampaign" ,
                    cast("ymsUTMContent" as String) as "ymsUTMContent" ,
                    cast("ymsUTMMedium" as String) as "ymsUTMMedium" ,
                    cast("ymsUTMSource" as String) as "ymsUTMSource" ,
                    cast("ymsUTMTerm" as String) as "ymsUTMTerm" ,
                    cast("ymsvisitID" as String) as "ymsvisitID" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_ym_events_default_yandex_metrika_stream

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-16' AND '2024-02-29')

SELECT  
    __date, 
    __table_name,  
    ymsvisitID As visitId,
    ymsclientID AS clientId,
    extract(ymspurchaseCoupon, '\'([^\'\[\],]+)') AS promoCode,   
    'web' AS osName,
    ymsregionCity AS cityName,
    lower(ymsregionCity) AS cityCode,
    assumeNotNull(coalesce(lower(if(length(ymsUTMSource) > 0, concat(ymsUTMSource, ' / ', ymsUTMMedium), null)), 
    multiIf(ymslastTrafficSource = 'ad', lower(if(length(ymslastAdvEngine) > 0, concat(ymslastAdvEngine, ' / ', ymslastTrafficSource), null)),  
    ymslastTrafficSource = 'organic', lower(if(length(ymslastSearchEngine) > 0, concat(ymslastSearchEngine, ' / ', ymslastTrafficSource), null)),  
    lower(if(length(ymslastReferalSource) > 0, concat(ymslastReferalSource, ' / ', ymslastTrafficSource), null))), '')) AS adSourceDirty, 
    ymsUTMSource AS utmSource,
    ymsUTMMedium AS utmMedium,
    ymsUTMCampaign AS utmCampaign,
    ymsUTMTerm AS utmTerm,
    ymsUTMContent AS utmContent,
    ymspurchaseID AS transactionId,
    greatest(coalesce(extract(ymsUTMCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(ymsUTMContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    1 AS sessions,
    if(countSubstrings(ymsgoalsID, '131126368')>0,1,0) AS addToCartSessions, 
    if(countSubstrings(ymsgoalsID, '229829884')>0,1,0) AS cartViewSessions, 
    if(countSubstrings(ymsgoalsID, '131126557')>0,1,0) AS checkoutSessions, 
    if(countSubstrings(ymsgoalsID, '131127241')>0,1,0) AS webSalesSessions, 
    countSubstrings(ymsgoalsID, '131127241') AS sales, 
    --0.0 AS amountSales,
    if(countSubstrings(ymsgoalsID, '199402504')>0,1,0) AS registrationCardSessions,
    if(countSubstrings(ymsgoalsID, '199402597')>0,1,0) AS linkingCardToPhoneNumberSessions, 
    if(countSubstrings(ymsgoalsID, '226410025')>0,1,0) AS registrationLendingPromotionsSessions, 
    if(countSubstrings(ymsgoalsID, '232977064')>0,1,0) AS registrationCashbackSessions, 
    if(countSubstrings(ymsgoalsID, '232977580')>0,1,0) AS couponActivationSessions, 
    if(countSubstrings(ymsgoalsID, '232977647')>0,1,0) AS participationInLotterySessions,
    toUInt32(ymspageViews) AS pageViews,
    __emitted_at,
    toLowCardinality('VisitStat') AS __link 

FROM events





    )
        ...
[0m10:56:21.204193 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:21.207183 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.207842 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.212164 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'join_ym_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.213669 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.215548 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_yd_datestat"
[0m10:56:21.216004 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

        
  
    
    
        
        insert into test.join_yd_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adGroupName", "adId", "adPhraseId", "utmHash", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_yd_datestat_default_custom_report
WITH cmps AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_yd_datestat_default_custom_report' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("AdId" as String) as "AdId" ,
                    cast("CampaignId" as String) as "CampaignId" ,
                    cast("CampaignName" as String) as "CampaignName" ,
                    cast("CampaignType" as String) as "CampaignType" ,
                    cast("Clicks" as String) as "Clicks" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Date" as String) as "Date" ,
                    cast("Impressions" as String) as "Impressions" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_yd_datestat_default_custom_report

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-15' AND '2024-02-28')

SELECT  
    toDate(__date) AS __date,
    toLowCardinality('*') AS reportType, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    'Yandex Direct Ads' AS adSourceDirty,
    --'' AS productName,
    CampaignName AS adCampaignName,
    CampaignType AS adGroupName,
    CampaignId AS adId,
    '' AS adPhraseId,
    --'' AS utmSource,
    --'' AS utmMedium,
    --'' AS utmCampaign,
    --'' AS utmTerm,
    --'' AS utmContent,
    arrayElement(splitByChar('~', CampaignName), 2) AS utmHash,
    --'' AS adTitle1,
    --'' AS adTitle2,
    --'' AS adText,
    --'' AS adPhraseName,  
    (toFloat64(Cost)/1000000)*1.2 AS adCost,
    toInt32(Impressions) AS impressions,
    toInt32(Clicks) AS clicks,
    __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM cmps





  
      ...
[0m10:56:21.217185 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.218966 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_ym_events"
[0m10:56:21.219367 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

        
  
    
    
        
        insert into test.join_ym_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__table_name", "visitId", "clientId", "promoCode", "osName", "cityName", "cityCode", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "registrationCardSessions", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "couponActivationSessions", "participationInLotterySessions", "pageViews", "__emitted_at", "__link")
  -- depends_on: test.incremental_ym_events_default_yandex_metrika_stream
WITH events AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_ym_events_default_yandex_metrika_stream' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("ymsclientID" as String) as "ymsclientID" ,
                    cast("ymsdateTime" as String) as "ymsdateTime" ,
                    cast("ymsgoalsID" as String) as "ymsgoalsID" ,
                    cast("ymsgoalsOrder" as String) as "ymsgoalsOrder" ,
                    cast("ymslastAdvEngine" as String) as "ymslastAdvEngine" ,
                    cast("ymslastReferalSource" as String) as "ymslastReferalSource" ,
                    cast("ymslastSearchEngine" as String) as "ymslastSearchEngine" ,
                    cast("ymslastTrafficSource" as String) as "ymslastTrafficSource" ,
                    cast("ymspageViews" as String) as "ymspageViews" ,
                    cast("ymsparsedParamsKey1" as String) as "ymsparsedParamsKey1" ,
                    cast("ymsparsedParamsKey2" as String) as "ymsparsedParamsKey2" ,
                    cast("ymspurchaseCoupon" as String) as "ymspurchaseCoupon" ,
                    cast("ymspurchaseID" as String) as "ymspurchaseID" ,
                    cast("ymspurchaseRevenue" as String) as "ymspurchaseRevenue" ,
                    cast("ymsregionCity" as String) as "ymsregionCity" ,
                    cast("ymsUTMCampaign" as String) as "ymsUTMCampaign" ,
                    cast("ymsUTMContent" as String) as "ymsUTMContent" ,
                    cast("ymsUTMMedium" as String) as "ymsUTMMedium" ,
                    cast("ymsUTMSource" as String) as "ymsUTMSource" ,
                    cast("ymsUTMTerm" as String) as "ymsUTMTerm" ,
                    cast("ymsvisitID" as String) as "ymsvisitID" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_ym_events_default_yandex_metrika_stream

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-16' AND '2024-02-29')

SELECT  
    __date, 
    __table_name,  
    ymsvisitID As visitId,
    ymsclientID AS clientId,
    extract(ymspurchaseCoupon, '\'([^\'\[\],]+)') AS promoCode,   
    'web' AS osName,
    ymsregionCity AS cityName,
    lower(ymsregionCity) AS cityCode,
    assumeNotNull(coalesce(lower(if(length(ymsUTMSource) > 0, concat(ymsUTMSource, ' / ', ymsUTMMedium), null)), 
    multiIf(ymslastTrafficSource = 'ad', lower(if(length(ymslastAdvEngine) > 0, concat(ymslastAdvEngine, ' / ', ymslastTrafficSource), null)),  
    ymslastTrafficSource = 'organic', lower(if(length(ymslastSearchEngine) > 0, concat(ymslastSearchEngine, ' / ', ymslastTrafficSource), null)),  
    lower(if(length(ymslastReferalSource) > 0, concat(ymslastReferalSource, ' / ', ymslastTrafficSource), null))), '')) AS adSourceDirty, 
    ymsUTMSource AS utmSource,
    ymsUTMMedium AS utmMedium,
    ymsUTMCampaign AS utmCampaign,
    ymsUTMTerm AS utmTerm,
    ymsUTMContent AS utmContent,
    ymspurchaseID AS transactionId,
    greatest(coalesce(extract(ymsUTMCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(ymsUTMContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    1 AS sessions,
    if(countSubstrings(ymsgoalsID, '131126368')>0,1,0) AS addToCartSessions, 
    if(countSubstrings(ymsgoalsID, '229829884')>0,1,0) AS cartViewSessions, 
    if(countSubstrings(ymsgoalsID, '131126557')>0,1,0) AS checkoutSessions, 
    if(countSubstrings(ymsgoalsID, '131127241')>0,1,0) AS webSalesSessions, 
    countSubstrings(ymsgoalsID, '131127241') AS sales, 
    --0.0 AS amountSales,
    if(countSubstrings(ymsgoalsID, '199402504')>0,1,0) AS registrationCardSessions,
    if(countSubstrings(ymsgoalsID, '199402597')>0,1,0) AS linkingCardToPhoneNumberSessions, 
    if(countSubstrings(ymsgoalsID, '226410025')>0,1,0) AS registrationLendingPromotionsSessions, 
    if(countSubstrings(ymsgoalsID, '232977064')>0,1,0) AS registrationCashbackSessions, 
    if(countSubstrings(ymsgoalsID, '232977580')>0,1,0) AS couponActivationSessions, 
    if(countSubstrings(ymsgoalsID, '232977647')>0,1,0) AS participationInLotterySessions,
    toUInt32(ymspageViews) AS pageViews,
    __emitted_at,
    toLowCardinality('VisitStat') AS __link 

FROM events





  
      ...
[0m10:56:21.229223 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.230326 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

      delete from test.join_yd_datestat where (__date, __table_name) in (select __date, __table_name
                                          from test.join_yd_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:21.244778 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:21.245881 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

      delete from test.join_ym_events where (__date, __table_name) in (select __date, __table_name
                                          from test.join_ym_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:21.272902 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:21.275447 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.280274 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.281983 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

        insert into test.join_yd_datestat select "__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adGroupName", "adId", "adPhraseId", "utmHash", "adCost", "impressions", "clicks", "__emitted_at", "__link" from test.join_yd_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:21.283179 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:21.286009 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'join_ym_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.289676 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.292634 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */
drop table if exists test.join_yd_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.294092 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.296794 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

        insert into test.join_ym_events select "__date", "__table_name", "visitId", "clientId", "promoCode", "osName", "cityName", "cityCode", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "registrationCardSessions", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "couponActivationSessions", "participationInLotterySessions", "pageViews", "__emitted_at", "__link" from test.join_ym_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:21.297714 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.303475 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */
drop table if exists test.join_yd_datestat__dbt_distributed_new_data 
  ...
[0m10:56:21.306758 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.308975 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_yd_datestat (execute): 2024-06-04 10:56:21.125142 => 2024-06-04 10:56:21.308899
[0m10:56:21.309640 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7904edd80>]}
[0m10:56:21.310153 [info ] [Thread-2 (]: 45 of 90 OK created sql incremental model test.join_yd_datestat ................ [[32mOK[0m in 0.26s]
[0m10:56:21.310607 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_yd_datestat
[0m10:56:21.311063 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m10:56:21.311618 [info ] [Thread-2 (]: 47 of 90 START sql table model test.combine_registry_appprofilematching ........ [RUN]
[0m10:56:21.312723 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_registry_appprofilematching'
[0m10:56:21.313472 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.313723 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_registry_appprofilematching)
[0m10:56:21.317105 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */
drop table if exists test.join_ym_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.318085 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m10:56:21.323703 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_registry_appprofilematching')        
...
[0m10:56:21.324473 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.328792 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */
drop table if exists test.join_ym_events__dbt_distributed_new_data 
  ...
[0m10:56:21.331625 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.332886 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.337270 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

    select name, type from system.columns where table = 'join_appmetrica_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.339706 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_ym_events (execute): 2024-06-04 10:56:21.133454 => 2024-06-04 10:56:21.339641
[0m10:56:21.341905 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79038f970>]}
[0m10:56:21.342696 [info ] [Thread-1 (]: 46 of 90 OK created sql incremental model test.join_ym_events .................. [[32mOK[0m in 0.28s]
[0m10:56:21.343090 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_ym_events
[0m10:56:21.343414 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m10:56:21.343800 [info ] [Thread-1 (]: 48 of 90 START sql table model test.combine_registry_utmhashregistry ........... [RUN]
[0m10:56:21.345641 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_registry_utmhashregistry'
[0m10:56:21.346317 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.346599 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_registry_utmhashregistry)
[0m10:56:21.348306 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_registry_appprofilematching"
[0m10:56:21.348910 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m10:56:21.354025 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_registry_utmhashregistry')        
...
[0m10:56:21.355679 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_registry_appprofilematching (compile): 2024-06-04 10:56:21.319141 => 2024-06-04 10:56:21.355460
[0m10:56:21.356197 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m10:56:21.362769 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

            

    
        create table test.combine_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_appmetrica_registry_appprofilematching
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_appmetrica_registry_appprofilematching
        )

        ) 


    )
        ...
[0m10:56:21.364298 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.368679 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'join_utmcraft_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.376167 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.378220 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_registry_utmhashregistry"
[0m10:56:21.378687 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_registry_utmhashregistry (compile): 2024-06-04 10:56:21.349551 => 2024-06-04 10:56:21.378609
[0m10:56:21.378932 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m10:56:21.383379 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

            

    
        create table test.combine_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_utmcraft_registry_utmhashregistry
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_utmcraft_registry_utmhashregistry
        )

        ) 


    )
        ...
[0m10:56:21.384399 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.389641 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

    select name, type from system.columns where table = 'combine_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.395555 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.397101 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_registry_appprofilematching"
[0m10:56:21.397845 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

  
    
    
        
        insert into test.combine_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_appmetrica_registry_appprofilematching
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_appmetrica_registry_appprofilematching
        )

        ) 


  ...
[0m10:56:21.407475 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.410378 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'combine_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.411154 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.413382 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */
EXCHANGE TABLES test.combine_registry_appprofilematching__dbt_backup AND test.combine_registry_appprofilematching 
  
  ...
[0m10:56:21.417750 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.421387 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */
drop table if exists test.combine_registry_appprofilematching__dbt_backup 
  ...
[0m10:56:21.422869 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.424545 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_registry_utmhashregistry"
[0m10:56:21.425135 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

  
    
    
        
        insert into test.combine_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_utmcraft_registry_utmhashregistry
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_utmcraft_registry_utmhashregistry
        )

        ) 


  ...
[0m10:56:21.428400 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.429811 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_registry_appprofilematching (execute): 2024-06-04 10:56:21.356318 => 2024-06-04 10:56:21.429747
[0m10:56:21.430370 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7905671c0>]}
[0m10:56:21.430722 [info ] [Thread-2 (]: 47 of 90 OK created sql table model test.combine_registry_appprofilematching ... [[32mOK[0m in 0.12s]
[0m10:56:21.431058 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m10:56:21.431347 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.combine_periodstat
[0m10:56:21.431628 [info ] [Thread-2 (]: 49 of 90 START sql incremental model test.combine_periodstat ................... [RUN]
[0m10:56:21.432269 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_periodstat'
[0m10:56:21.432459 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_periodstat)
[0m10:56:21.432710 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.combine_periodstat
[0m10:56:21.439347 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.439918 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_periodstat')        
...
[0m10:56:21.442211 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */
EXCHANGE TABLES test.combine_registry_utmhashregistry__dbt_backup AND test.combine_registry_utmhashregistry 
  
  ...
[0m10:56:21.447932 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.453119 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */
drop table if exists test.combine_registry_utmhashregistry__dbt_backup 
  ...
[0m10:56:21.454193 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.458899 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.459539 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.462356 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_registry_utmhashregistry (execute): 2024-06-04 10:56:21.379023 => 2024-06-04 10:56:21.462285
[0m10:56:21.463901 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a5689ff0>]}
[0m10:56:21.464993 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.467746 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_periodstat"
[0m10:56:21.465607 [info ] [Thread-1 (]: 48 of 90 OK created sql table model test.combine_registry_utmhashregistry ...... [[32mOK[0m in 0.12s]
[0m10:56:21.468783 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m10:56:21.469593 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.combine_datestat
[0m10:56:21.470283 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_periodstat (compile): 2024-06-04 10:56:21.433193 => 2024-06-04 10:56:21.470180
[0m10:56:21.471026 [info ] [Thread-1 (]: 50 of 90 START sql incremental model test.combine_datestat ..................... [RUN]
[0m10:56:21.472343 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.combine_periodstat
[0m10:56:21.474199 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_datestat'
[0m10:56:21.481206 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.481549 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_datestat)
[0m10:56:21.482837 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.combine_datestat
[0m10:56:21.488582 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_datestat')        
...
[0m10:56:21.490296 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.495650 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.496467 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.501737 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.503716 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.506388 [debug] [Thread-2 (]: 
    In test.combine_periodstat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:21.509204 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */
drop table if exists test.combine_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.510638 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.514621 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.515879 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.519978 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

            

    
        create table test.combine_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_sheets_periodstat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_sheets_periodstat
        )

        ) 


    )
        ...
[0m10:56:21.521980 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.527105 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.533158 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.537972 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_datestat"
[0m10:56:21.538561 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_datestat (compile): 2024-06-04 10:56:21.483060 => 2024-06-04 10:56:21.538481
[0m10:56:21.538752 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.combine_datestat
[0m10:56:21.545381 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'combine_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.546362 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:21.551381 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.554398 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.558010 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'combine_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.559316 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.561184 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_periodstat"
[0m10:56:21.562146 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

        
  
    
    
        
        insert into test.combine_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_sheets_periodstat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_sheets_periodstat
        )

        ) 


  
      ...
[0m10:56:21.563494 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.567098 [debug] [Thread-1 (]: 
    In test.combine_datestat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:21.570007 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */
drop table if exists test.combine_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.573707 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.575735 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

            

    
        create table test.combine_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_mt_datestat
-- depends_on: test.join_vkads_datestat
-- depends_on: test.join_yd_datestat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_mt_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString('') as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_vkads_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.join_yd_datestat
        )

        ) 


    )
        ...
[0m10:56:21.588385 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:21.589517 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

      delete from test.combine_periodstat where (__date, __table_name) in (select __date, __table_name
                                          from test.combine_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:21.596673 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.600480 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'combine_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.605795 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.607748 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_datestat"
[0m10:56:21.608282 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

        
  
    
    
        
        insert into test.combine_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId")
  -- depends_on: test.join_mt_datestat
-- depends_on: test.join_vkads_datestat
-- depends_on: test.join_yd_datestat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_mt_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString('') as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_vkads_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.join_yd_datestat
        )

        ) 


  
      ...
[0m10:56:21.627882 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:21.631101 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.636556 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.638201 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

        insert into test.combine_periodstat select "__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link" from test.combine_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:21.644344 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:21.645338 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

      delete from test.combine_datestat where (__date, __table_name) in (select __date, __table_name
                                          from test.combine_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:21.645989 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.650877 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */
drop table if exists test.combine_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.654253 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.657580 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */
drop table if exists test.combine_periodstat__dbt_distributed_new_data 
  ...
[0m10:56:21.660836 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.663034 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_periodstat (execute): 2024-06-04 10:56:21.474697 => 2024-06-04 10:56:21.662963
[0m10:56:21.663696 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7903cf5b0>]}
[0m10:56:21.664156 [info ] [Thread-2 (]: 49 of 90 OK created sql incremental model test.combine_periodstat .............. [[32mOK[0m in 0.23s]
[0m10:56:21.664554 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.combine_periodstat
[0m10:56:21.664872 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.combine_events
[0m10:56:21.665740 [info ] [Thread-2 (]: 51 of 90 START sql incremental model test.combine_events ....................... [RUN]
[0m10:56:21.667621 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_events'
[0m10:56:21.667880 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_events)
[0m10:56:21.668035 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.combine_events
[0m10:56:21.672280 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_events')        
...
[0m10:56:21.679747 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.683634 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.689032 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.693826 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'join_ym_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.699212 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.704662 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_events"
[0m10:56:21.705786 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m10:56:21.709174 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'combine_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.710436 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_events (compile): 2024-06-04 10:56:21.668125 => 2024-06-04 10:56:21.710283
[0m10:56:21.710996 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.combine_events
[0m10:56:21.800280 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'combine_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.801180 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.09 seconds
[0m10:56:21.804635 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

        insert into test.combine_datestat select "__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId" from test.combine_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:21.806353 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.809899 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'combine_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.815396 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.822894 [debug] [Thread-2 (]: 
    In test.combine_events:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:21.823618 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.826521 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */
drop table if exists test.combine_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.829875 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */
drop table if exists test.combine_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:21.833538 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.834188 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.836186 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

            

    
        create table test.combine_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_appmetrica_events
-- depends_on: test.join_ym_events
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt32(0) as pageViews 

            from test.join_appmetrica_events
        )

        union all
        

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime(0) as event_datetime ,
                            toString('') as accountName ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8(0) as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8(0) as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt8(0) as installApp ,
                            toUInt8(0) as installs ,
                            toString('') as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.join_ym_events
        )

        ) 


    )
        ...
[0m10:56:21.839956 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */
drop table if exists test.combine_datestat__dbt_distributed_new_data 
  ...
[0m10:56:21.843970 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.846174 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_datestat (execute): 2024-06-04 10:56:21.538841 => 2024-06-04 10:56:21.846094
[0m10:56:21.846800 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7901c7520>]}
[0m10:56:21.847164 [info ] [Thread-1 (]: 50 of 90 OK created sql incremental model test.combine_datestat ................ [[32mOK[0m in 0.37s]
[0m10:56:21.847507 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.combine_datestat
[0m10:56:21.847807 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m10:56:21.848790 [info ] [Thread-1 (]: 52 of 90 START sql table model test.hash_registry_appprofilematching ........... [RUN]
[0m10:56:21.850159 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_registry_appprofilematching'
[0m10:56:21.850462 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_registry_appprofilematching)
[0m10:56:21.850635 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m10:56:21.857121 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_registry_appprofilematching')        
...
[0m10:56:21.865575 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.870634 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

    select name, type from system.columns where table = 'combine_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.872295 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:21.875365 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'combine_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.876038 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.881989 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_registry_appprofilematching"
[0m10:56:21.883282 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.887540 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_events"
[0m10:56:21.888561 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

        
  
    
    
        
        insert into test.combine_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews")
  -- depends_on: test.join_appmetrica_events
-- depends_on: test.join_ym_events
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt32(0) as pageViews 

            from test.join_appmetrica_events
        )

        union all
        

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime(0) as event_datetime ,
                            toString('') as accountName ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8(0) as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8(0) as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt8(0) as installApp ,
                            toUInt8(0) as installs ,
                            toString('') as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.join_ym_events
        )

        ) 


  
      ...
[0m10:56:21.889217 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_registry_appprofilematching (compile): 2024-06-04 10:56:21.850725 => 2024-06-04 10:56:21.889010
[0m10:56:21.890930 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m10:56:21.896106 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

            

    
        create table test.hash_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_registry_appprofilematching
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AppProfileMatching' 
    THEN AppProfileMatchingHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'UtmHashRegistry' 
    
    THEN toDateTime(0) 
    
    WHEN __link = 'AppProfileMatching' 
    
    THEN toDateTime(0) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5('AppProfileMatching' || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as AppProfileMatchingHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash


FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_appprofilematching
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m10:56:21.920903 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.925343 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

    select name, type from system.columns where table = 'hash_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.930093 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.931747 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_registry_appprofilematching"
[0m10:56:21.932431 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:21.934004 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

      delete from test.combine_events where (__date, __table_name) in (select __date, __table_name
                                          from test.combine_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:21.935267 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

  
    
    
        
        insert into test.hash_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link", "AppProfileMatchingHash", "AppMetricaDeviceHash", "CrmUserHash", "__id", "__datetime")
  -- depends_on: test.combine_registry_appprofilematching
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AppProfileMatching' 
    THEN AppProfileMatchingHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'UtmHashRegistry' 
    
    THEN toDateTime(0) 
    
    WHEN __link = 'AppProfileMatching' 
    
    THEN toDateTime(0) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5('AppProfileMatching' || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as AppProfileMatchingHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash


FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_appprofilematching
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  ...
[0m10:56:21.952236 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:21.953636 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */
EXCHANGE TABLES test.hash_registry_appprofilematching__dbt_backup AND test.hash_registry_appprofilematching 
  
  ...
[0m10:56:21.958174 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.962629 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */
drop table if exists test.hash_registry_appprofilematching__dbt_backup 
  ...
[0m10:56:21.965964 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:21.967656 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_registry_appprofilematching (execute): 2024-06-04 10:56:21.891281 => 2024-06-04 10:56:21.967495
[0m10:56:21.968421 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79051dea0>]}
[0m10:56:21.968974 [info ] [Thread-1 (]: 52 of 90 OK created sql table model test.hash_registry_appprofilematching ...... [[32mOK[0m in 0.12s]
[0m10:56:21.969447 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m10:56:21.969971 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m10:56:21.970402 [info ] [Thread-1 (]: 53 of 90 START sql table model test.hash_registry_utmhashregistry .............. [RUN]
[0m10:56:21.971116 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_registry_utmhashregistry'
[0m10:56:21.972002 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_registry_utmhashregistry)
[0m10:56:21.972479 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m10:56:21.977042 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_registry_utmhashregistry')        
...
[0m10:56:21.983493 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:21.986984 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'combine_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.987838 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:21.991773 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'combine_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:21.996811 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.001966 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_registry_utmhashregistry"
[0m10:56:22.003761 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.006377 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

        insert into test.combine_events select "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews" from test.combine_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:22.006780 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_registry_utmhashregistry (compile): 2024-06-04 10:56:21.972702 => 2024-06-04 10:56:22.006695
[0m10:56:22.008524 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m10:56:22.015618 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

            

    
        create table test.hash_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_registry_utmhashregistry
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'UtmHashRegistry' 
    THEN UtmHashRegistryHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'UtmHashRegistry' 
    
    THEN toDateTime(0) 
    
    WHEN __link = 'AppProfileMatching' 
    
    THEN toDateTime(0) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5('UtmHashRegistry' || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashRegistryHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_utmhashregistry
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m10:56:22.023573 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:22.027096 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */
drop table if exists test.combine_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:22.030813 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.034658 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */
drop table if exists test.combine_events__dbt_distributed_new_data 
  ...
[0m10:56:22.038447 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.040487 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_events (execute): 2024-06-04 10:56:21.711293 => 2024-06-04 10:56:22.040426
[0m10:56:22.041350 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:22.042820 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791df33a0>]}
[0m10:56:22.045954 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'hash_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.046598 [info ] [Thread-2 (]: 51 of 90 OK created sql incremental model test.combine_events .................. [[32mOK[0m in 0.38s]
[0m10:56:22.048418 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.combine_events
[0m10:56:22.048885 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.hash_periodstat
[0m10:56:22.050408 [info ] [Thread-2 (]: 54 of 90 START sql incremental model test.hash_periodstat ...................... [RUN]
[0m10:56:22.052134 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_periodstat'
[0m10:56:22.053034 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_periodstat)
[0m10:56:22.053509 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.hash_periodstat
[0m10:56:22.057601 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_periodstat')        
...
[0m10:56:22.059168 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.061623 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_registry_utmhashregistry"
[0m10:56:22.062640 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

  
    
    
        
        insert into test.hash_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link", "UtmHashRegistryHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.combine_registry_utmhashregistry
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'UtmHashRegistry' 
    THEN UtmHashRegistryHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'UtmHashRegistry' 
    
    THEN toDateTime(0) 
    
    WHEN __link = 'AppProfileMatching' 
    
    THEN toDateTime(0) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5('UtmHashRegistry' || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashRegistryHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_utmhashregistry
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  ...
[0m10:56:22.064573 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.068626 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.074611 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.080743 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_periodstat"
[0m10:56:22.081835 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:22.083493 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */
EXCHANGE TABLES test.hash_registry_utmhashregistry__dbt_backup AND test.hash_registry_utmhashregistry 
  
  ...
[0m10:56:22.085018 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_periodstat (compile): 2024-06-04 10:56:22.053747 => 2024-06-04 10:56:22.084768
[0m10:56:22.085856 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.hash_periodstat
[0m10:56:22.092503 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.094202 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.098573 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */
drop table if exists test.hash_registry_utmhashregistry__dbt_backup 
  ...
[0m10:56:22.099486 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.105446 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.106104 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.108943 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_registry_utmhashregistry (execute): 2024-06-04 10:56:22.009195 => 2024-06-04 10:56:22.108871
[0m10:56:22.109963 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79051f400>]}
[0m10:56:22.110748 [info ] [Thread-1 (]: 53 of 90 OK created sql table model test.hash_registry_utmhashregistry ......... [[32mOK[0m in 0.14s]
[0m10:56:22.111240 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m10:56:22.111812 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.hash_datestat
[0m10:56:22.112351 [info ] [Thread-1 (]: 55 of 90 START sql incremental model test.hash_datestat ........................ [RUN]
[0m10:56:22.113453 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.114367 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_datestat'
[0m10:56:22.116984 [debug] [Thread-2 (]: 
    In test.hash_periodstat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:22.117601 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_datestat)
[0m10:56:22.122292 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */
drop table if exists test.hash_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:22.122930 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.hash_datestat
[0m10:56:22.127389 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_datestat')        
...
[0m10:56:22.130265 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.132625 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

            

    
        create table test.hash_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_periodstat
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'ManualAdCostStat' 
    THEN ManualAdCostStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'ManualAdCostStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') = '', null, hex(MD5('ManualAdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '')))))) as ManualAdCostStatHash


FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_periodstat
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m10:56:22.134427 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.138785 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'combine_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.144547 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.151361 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_datestat"
[0m10:56:22.152040 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_datestat (compile): 2024-06-04 10:56:22.123823 => 2024-06-04 10:56:22.151945
[0m10:56:22.152387 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.hash_datestat
[0m10:56:22.159202 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:22.160490 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'hash_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.164089 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.171389 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.172287 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.176718 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'hash_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.178692 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_periodstat"
[0m10:56:22.181254 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

        
  
    
    
        
        insert into test.hash_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime")
  -- depends_on: test.combine_periodstat
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'ManualAdCostStat' 
    THEN ManualAdCostStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'ManualAdCostStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') = '', null, hex(MD5('ManualAdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '')))))) as ManualAdCostStatHash


FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_periodstat
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  
      ...
[0m10:56:22.185985 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.190537 [debug] [Thread-1 (]: 
    In test.hash_datestat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:22.193587 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */
drop table if exists test.hash_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:22.196814 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.199225 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

            

    
        create table test.hash_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_datestat
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AdCostStat' 
    THEN AdCostStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'AdCostStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(reportType))), ''), '') = '', null, hex(MD5('AdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(reportType))), ''), '')))))) as AdCostStatHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.combine_datestat
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m10:56:22.211356 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:22.212454 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

      delete from test.hash_periodstat where (__date, __table_name) in (select __date, __table_name
                                          from test.hash_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:22.232768 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:22.236060 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'hash_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.240767 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.242610 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_datestat"
[0m10:56:22.243187 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

        
  
    
    
        
        insert into test.hash_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.combine_datestat
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AdCostStat' 
    THEN AdCostStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'AdCostStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(reportType))), ''), '') = '', null, hex(MD5('AdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(reportType))), ''), '')))))) as AdCostStatHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.combine_datestat
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  
      ...
[0m10:56:22.248045 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:22.251064 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.256273 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.257950 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

        insert into test.hash_periodstat select "__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime" from test.hash_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:22.264514 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.269655 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */
drop table if exists test.hash_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:22.273413 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.276696 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */
drop table if exists test.hash_periodstat__dbt_distributed_new_data 
  ...
[0m10:56:22.280053 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.281969 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_periodstat (execute): 2024-06-04 10:56:22.086123 => 2024-06-04 10:56:22.281903
[0m10:56:22.282528 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790500550>]}
[0m10:56:22.282929 [info ] [Thread-2 (]: 54 of 90 OK created sql incremental model test.hash_periodstat ................. [[32mOK[0m in 0.23s]
[0m10:56:22.283370 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.hash_periodstat
[0m10:56:22.283745 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m10:56:22.284369 [info ] [Thread-2 (]: 56 of 90 START sql table model test.link_registry_appprofilematching ........... [RUN]
[0m10:56:22.285904 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_registry_appprofilematching'
[0m10:56:22.286437 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_registry_appprofilematching)
[0m10:56:22.286697 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m10:56:22.291572 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

    select name, type from system.columns where table = 'hash_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.292421 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:22.295523 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

      delete from test.hash_datestat where (__date, __table_name) in (select __date, __table_name
                                          from test.hash_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:22.300207 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.302392 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_registry_appprofilematching"
[0m10:56:22.303089 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_registry_appprofilematching (compile): 2024-06-04 10:56:22.286828 => 2024-06-04 10:56:22.302952
[0m10:56:22.303451 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m10:56:22.309083 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

            

    
        create table test.link_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_registry_appprofilematching
SELECT appmetricaDeviceId,crmUserId,cityName,__emitted_at,__table_name,__link,AppProfileMatchingHash,AppMetricaDeviceHash,CrmUserHash,__id,__datetime 
FROM test.hash_registry_appprofilematching
GROUP BY appmetricaDeviceId, crmUserId, cityName, __emitted_at, __table_name, __link, AppProfileMatchingHash, AppMetricaDeviceHash, CrmUserHash, __id, __datetime


    )
        ...
[0m10:56:22.326596 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:22.329641 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

    select name, type from system.columns where table = 'link_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.335506 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.337791 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_registry_appprofilematching"
[0m10:56:22.338642 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

  
    
    
        
        insert into test.link_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link", "AppProfileMatchingHash", "AppMetricaDeviceHash", "CrmUserHash", "__id", "__datetime")
  -- depends_on: test.hash_registry_appprofilematching
SELECT appmetricaDeviceId,crmUserId,cityName,__emitted_at,__table_name,__link,AppProfileMatchingHash,AppMetricaDeviceHash,CrmUserHash,__id,__datetime 
FROM test.hash_registry_appprofilematching
GROUP BY appmetricaDeviceId, crmUserId, cityName, __emitted_at, __table_name, __link, AppProfileMatchingHash, AppMetricaDeviceHash, CrmUserHash, __id, __datetime


  ...
[0m10:56:22.341121 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:22.345004 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'hash_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:22.349894 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.351830 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */
EXCHANGE TABLES test.link_registry_appprofilematching__dbt_backup AND test.link_registry_appprofilematching 
  
  ...
[0m10:56:22.353664 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.357380 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

        insert into test.hash_datestat select "__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime" from test.hash_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:22.359215 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.363617 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */
drop table if exists test.link_registry_appprofilematching__dbt_backup 
  ...
[0m10:56:22.366410 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.369645 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */
drop table if exists test.hash_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:22.371040 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:22.372841 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_registry_appprofilematching (execute): 2024-06-04 10:56:22.303591 => 2024-06-04 10:56:22.372763
[0m10:56:22.373593 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7905701f0>]}
[0m10:56:22.374487 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.379471 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */
drop table if exists test.hash_datestat__dbt_distributed_new_data 
  ...
[0m10:56:22.382112 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:22.384705 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_datestat (execute): 2024-06-04 10:56:22.152496 => 2024-06-04 10:56:22.384638
[0m10:56:22.385355 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79051d600>]}
[0m10:56:23.249368 [info ] [Thread-2 (]: 56 of 90 OK created sql table model test.link_registry_appprofilematching ...... [[32mOK[0m in 0.09s]
[0m10:56:23.250343 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m10:56:23.250904 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.hash_events
[0m10:56:23.251771 [info ] [Thread-1 (]: 55 of 90 OK created sql incremental model test.hash_datestat ................... [[32mOK[0m in 0.27s]
[0m10:56:23.252837 [info ] [Thread-2 (]: 57 of 90 START sql incremental model test.hash_events .......................... [RUN]
[0m10:56:23.253653 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.hash_datestat
[0m10:56:23.254895 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_events'
[0m10:56:23.255474 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m10:56:23.255995 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_events)
[0m10:56:23.256868 [info ] [Thread-1 (]: 58 of 90 START sql table model test.link_registry_utmhashregistry .............. [RUN]
[0m10:56:23.257517 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.hash_events
[0m10:56:23.258504 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_registry_utmhashregistry'
[0m10:56:23.262975 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_events')        
...
[0m10:56:23.263691 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_registry_utmhashregistry)
[0m10:56:23.265415 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m10:56:23.274007 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'hash_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.275499 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.278746 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'combine_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.284492 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.287777 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_registry_utmhashregistry"
[0m10:56:23.288912 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.298960 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_events"
[0m10:56:23.299687 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_registry_utmhashregistry (compile): 2024-06-04 10:56:23.265779 => 2024-06-04 10:56:23.299510
[0m10:56:23.300352 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m10:56:23.305785 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

            

    
        create table test.link_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_registry_utmhashregistry
SELECT utmHash,utm_base_url,utm_utmSource,utm_utmMedium,utm_utmCampaign,utm_project,utm_utmContent,utm_strategy,utm_audience,__emitted_at,__table_name,__link,UtmHashRegistryHash,UtmHashHash,__id,__datetime 
FROM test.hash_registry_utmhashregistry
GROUP BY utmHash, utm_base_url, utm_utmSource, utm_utmMedium, utm_utmCampaign, utm_project, utm_utmContent, utm_strategy, utm_audience, __emitted_at, __table_name, __link, UtmHashRegistryHash, UtmHashHash, __id, __datetime


    )
        ...
[0m10:56:23.306214 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_events (compile): 2024-06-04 10:56:23.258963 => 2024-06-04 10:56:23.306083
[0m10:56:23.307221 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.hash_events
[0m10:56:23.314694 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'hash_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.322251 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.327118 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'hash_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.328684 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:23.331306 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'link_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.332293 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.339208 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.345444 [debug] [Thread-2 (]: 
    In test.hash_events:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:23.347598 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_registry_utmhashregistry"
[0m10:56:23.350947 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */
drop table if exists test.hash_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:23.352502 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

  
    
    
        
        insert into test.link_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link", "UtmHashRegistryHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.hash_registry_utmhashregistry
SELECT utmHash,utm_base_url,utm_utmSource,utm_utmMedium,utm_utmCampaign,utm_project,utm_utmContent,utm_strategy,utm_audience,__emitted_at,__table_name,__link,UtmHashRegistryHash,UtmHashHash,__id,__datetime 
FROM test.hash_registry_utmhashregistry
GROUP BY utmHash, utm_base_url, utm_utmSource, utm_utmMedium, utm_utmCampaign, utm_project, utm_utmContent, utm_strategy, utm_audience, __emitted_at, __table_name, __link, UtmHashRegistryHash, UtmHashHash, __id, __datetime


  ...
[0m10:56:23.354695 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.356762 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

            

    
        create table test.hash_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_events
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AppInstallStat' 
    THEN AppInstallStatHash 
  
    WHEN __link = 'AppEventStat' 
    THEN AppEventStatHash 
  
    WHEN __link = 'AppSessionStat' 
    THEN AppSessionStatHash 
  
    WHEN __link = 'AppDeeplinkStat' 
    THEN AppDeeplinkStatHash 
  
    WHEN __link = 'VisitStat' 
    THEN VisitStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'AppInstallStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppEventStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppSessionStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppDeeplinkStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'VisitStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppInstallStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppInstallStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppEventStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppEventStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppSessionStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppSessionStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppDeeplinkStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppDeeplinkStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('VisitStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as VisitStatHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(clientId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(clientId))), ''), '')))))) as YmClientHash


FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.combine_events
        )

        ) 
WHERE 

    True AND 
    True AND 
    True AND 
    True AND 
    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m10:56:23.364726 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.366048 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */
EXCHANGE TABLES test.link_registry_utmhashregistry__dbt_backup AND test.link_registry_utmhashregistry 
  
  ...
[0m10:56:23.371220 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.375248 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */
drop table if exists test.link_registry_utmhashregistry__dbt_backup 
  ...
[0m10:56:23.378830 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.380205 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_registry_utmhashregistry (execute): 2024-06-04 10:56:23.300831 => 2024-06-04 10:56:23.380128
[0m10:56:23.380977 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7902ccb20>]}
[0m10:56:23.381503 [info ] [Thread-1 (]: 58 of 90 OK created sql table model test.link_registry_utmhashregistry ......... [[32mOK[0m in 0.12s]
[0m10:56:23.381897 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m10:56:23.382224 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_periodstat
[0m10:56:23.383108 [info ] [Thread-1 (]: 59 of 90 START sql table model test.link_periodstat ............................ [RUN]
[0m10:56:23.383936 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_periodstat'
[0m10:56:23.384237 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_periodstat)
[0m10:56:23.384422 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_periodstat
[0m10:56:23.389330 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.394702 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.399006 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_periodstat"
[0m10:56:23.399448 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_periodstat (compile): 2024-06-04 10:56:23.384519 => 2024-06-04 10:56:23.399385
[0m10:56:23.399782 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_periodstat
[0m10:56:23.406018 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

            

    
        create table test.link_periodstat__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_periodstat
SELECT __date,campaign,SUM(cost) AS cost,periodStart,periodEnd,__emitted_at,__table_name,__link,ManualAdCostStatHash,__id,__datetime 
FROM test.hash_periodstat
GROUP BY __date, campaign, periodStart, periodEnd, __emitted_at, __table_name, __link, ManualAdCostStatHash, __id, __datetime


    )
        ...
[0m10:56:23.424067 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:23.426939 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

    select name, type from system.columns where table = 'link_periodstat__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.432647 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.434759 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_periodstat"
[0m10:56:23.435266 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

  
    
    
        
        insert into test.link_periodstat__dbt_backup ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime")
  -- depends_on: test.hash_periodstat
SELECT __date,campaign,SUM(cost) AS cost,periodStart,periodEnd,__emitted_at,__table_name,__link,ManualAdCostStatHash,__id,__datetime 
FROM test.hash_periodstat
GROUP BY __date, campaign, periodStart, periodEnd, __emitted_at, __table_name, __link, ManualAdCostStatHash, __id, __datetime


  ...
[0m10:56:23.455382 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:23.456859 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */
EXCHANGE TABLES test.link_periodstat__dbt_backup AND test.link_periodstat 
  
  ...
[0m10:56:23.462309 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.466549 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */
drop table if exists test.link_periodstat__dbt_backup 
  ...
[0m10:56:23.472633 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.474128 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_periodstat (execute): 2024-06-04 10:56:23.399925 => 2024-06-04 10:56:23.474065
[0m10:56:23.474756 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7902a0160>]}
[0m10:56:23.475166 [info ] [Thread-1 (]: 59 of 90 OK created sql table model test.link_periodstat ....................... [[32mOK[0m in 0.09s]
[0m10:56:23.475523 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_periodstat
[0m10:56:23.475833 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_datestat
[0m10:56:23.476925 [info ] [Thread-1 (]: 60 of 90 START sql table model test.link_datestat .............................. [RUN]
[0m10:56:23.478635 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_datestat'
[0m10:56:23.478910 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_datestat)
[0m10:56:23.479075 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_datestat
[0m10:56:23.485674 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

    select name, type from system.columns where table = 'hash_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.491984 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.494282 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_datestat"
[0m10:56:23.494777 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_datestat (compile): 2024-06-04 10:56:23.479173 => 2024-06-04 10:56:23.494697
[0m10:56:23.495008 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_datestat
[0m10:56:23.501917 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

            

    
        create table test.link_datestat__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_datestat
SELECT __date,reportType,accountName,__table_name,adSourceDirty,adCampaignName,adId,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,utmHash,adTitle1,adText,SUM(adCost) AS adCost,SUM(impressions) AS impressions,SUM(clicks) AS clicks,__emitted_at,__link,adGroupName,adPhraseId,AdCostStatHash,UtmHashHash,__id,__datetime 
FROM test.hash_datestat
GROUP BY __date, reportType, accountName, __table_name, adSourceDirty, adCampaignName, adId, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, utmHash, adTitle1, adText, __emitted_at, __link, adGroupName, adPhraseId, AdCostStatHash, UtmHashHash, __id, __datetime


    )
        ...
[0m10:56:23.503762 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.15 seconds
[0m10:56:23.507794 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'hash_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.513111 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.516172 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_events"
[0m10:56:23.517124 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

        
  
    
    
        
        insert into test.hash_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime")
  -- depends_on: test.combine_events
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AppInstallStat' 
    THEN AppInstallStatHash 
  
    WHEN __link = 'AppEventStat' 
    THEN AppEventStatHash 
  
    WHEN __link = 'AppSessionStat' 
    THEN AppSessionStatHash 
  
    WHEN __link = 'AppDeeplinkStat' 
    THEN AppDeeplinkStatHash 
  
    WHEN __link = 'VisitStat' 
    THEN VisitStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'AppInstallStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppEventStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppSessionStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppDeeplinkStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'VisitStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppInstallStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppInstallStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppEventStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppEventStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppSessionStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppSessionStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppDeeplinkStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppDeeplinkStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('VisitStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as VisitStatHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(clientId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(clientId))), ''), '')))))) as YmClientHash


FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.combine_events
        )

        ) 
WHERE 

    True AND 
    True AND 
    True AND 
    True AND 
    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  
      ...
[0m10:56:23.526820 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:23.530355 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

    select name, type from system.columns where table = 'link_datestat__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.541286 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.543979 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_datestat"
[0m10:56:23.544744 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

  
    
    
        
        insert into test.link_datestat__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.hash_datestat
SELECT __date,reportType,accountName,__table_name,adSourceDirty,adCampaignName,adId,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,utmHash,adTitle1,adText,SUM(adCost) AS adCost,SUM(impressions) AS impressions,SUM(clicks) AS clicks,__emitted_at,__link,adGroupName,adPhraseId,AdCostStatHash,UtmHashHash,__id,__datetime 
FROM test.hash_datestat
GROUP BY __date, reportType, accountName, __table_name, adSourceDirty, adCampaignName, adId, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, utmHash, adTitle1, adText, __emitted_at, __link, adGroupName, adPhraseId, AdCostStatHash, UtmHashHash, __id, __datetime


  ...
[0m10:56:23.571235 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:23.573290 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */
EXCHANGE TABLES test.link_datestat__dbt_backup AND test.link_datestat 
  
  ...
[0m10:56:23.579400 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.585175 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */
drop table if exists test.link_datestat__dbt_backup 
  ...
[0m10:56:23.589763 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.592097 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_datestat (execute): 2024-06-04 10:56:23.495127 => 2024-06-04 10:56:23.592008
[0m10:56:23.593312 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79051f610>]}
[0m10:56:23.594299 [info ] [Thread-1 (]: 60 of 90 OK created sql table model test.link_datestat ......................... [[32mOK[0m in 0.11s]
[0m10:56:23.595129 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_datestat
[0m10:56:23.595719 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.full_periodstat
[0m10:56:23.597074 [info ] [Thread-1 (]: 61 of 90 START sql incremental model test.full_periodstat ...................... [RUN]
[0m10:56:23.598128 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_periodstat'
[0m10:56:23.598684 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_periodstat)
[0m10:56:23.598983 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.full_periodstat
[0m10:56:23.607334 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m10:56:23.614870 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.618235 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m10:56:23.625611 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.628175 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m10:56:23.636939 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.638802 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m10:56:23.645497 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.647123 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m10:56:23.655267 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.656918 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m10:56:23.661129 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.14 seconds
[0m10:56:23.662488 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

      delete from test.hash_events where (__date, __table_name) in (select __date, __table_name
                                          from test.hash_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:23.663287 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.666182 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m10:56:23.677703 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.679661 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m10:56:23.685611 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.687284 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m10:56:23.692745 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.695182 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m10:56:23.700669 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.705108 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'link_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.711992 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.714286 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_periodstat"
[0m10:56:23.714948 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.full_periodstat (compile): 2024-06-04 10:56:23.599132 => 2024-06-04 10:56:23.714828
[0m10:56:23.715303 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.full_periodstat
[0m10:56:23.722598 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'full_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.728565 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.732983 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'full_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.734811 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m10:56:23.738822 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'hash_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.741177 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.744959 [debug] [Thread-1 (]: 
    In test.full_periodstat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:23.752385 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */
drop table if exists test.full_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:23.754312 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.756665 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

        insert into test.hash_events select "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime" from test.hash_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:23.759312 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.761687 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

            

    
        create table test.full_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
-- depends_on: test.link_periodstat


WITH unnest_dates AS ( 
SELECT *, 
    dateAdd(periodStart, arrayJoin(range( 0, 1 + toUInt16(date_diff('day', periodStart, periodEnd))))) AS period_date
	, COUNT(*) OVER(PARTITION BY 
__date
,
campaign
,
periodStart
,
periodEnd
,
__emitted_at
,
__table_name
,
__link
,
ManualAdCostStatHash
,
__id
,
__datetime

 
    ) AS divide_by_days 
FROM test.link_periodstat
)
, t0 AS (
SELECT period_date, 
__date, 
campaign, 
periodStart, 
periodEnd, 
__emitted_at, 
__table_name, 
__link, 
ManualAdCostStatHash, 
__id, 
__datetime, 
   
cost/divide_by_days AS cost_per_day 
   
 
FROM unnest_dates
)
, t1 AS ( 
SELECT * 
FROM t0
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m10:56:23.769939 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.774375 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */
drop table if exists test.hash_events__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:23.779836 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.784830 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */
drop table if exists test.hash_events__dbt_distributed_new_data 
  ...
[0m10:56:23.787627 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:23.790896 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'full_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.792421 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.795316 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_events (execute): 2024-06-04 10:56:23.307453 => 2024-06-04 10:56:23.795220
[0m10:56:23.797246 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790573040>]}
[0m10:56:23.798387 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.799228 [info ] [Thread-2 (]: 57 of 90 OK created sql incremental model test.hash_events ..................... [[32mOK[0m in 0.54s]
[0m10:56:23.801935 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_periodstat"
[0m10:56:23.802489 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.hash_events
[0m10:56:23.803592 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.full_datestat
[0m10:56:23.805861 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

        
  
    
    
        
        insert into test.full_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("period_date", "__date", "campaign", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime", "cost_per_day")
  -- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
-- depends_on: test.link_periodstat


WITH unnest_dates AS ( 
SELECT *, 
    dateAdd(periodStart, arrayJoin(range( 0, 1 + toUInt16(date_diff('day', periodStart, periodEnd))))) AS period_date
	, COUNT(*) OVER(PARTITION BY 
__date
,
campaign
,
periodStart
,
periodEnd
,
__emitted_at
,
__table_name
,
__link
,
ManualAdCostStatHash
,
__id
,
__datetime

 
    ) AS divide_by_days 
FROM test.link_periodstat
)
, t0 AS (
SELECT period_date, 
__date, 
campaign, 
periodStart, 
periodEnd, 
__emitted_at, 
__table_name, 
__link, 
ManualAdCostStatHash, 
__id, 
__datetime, 
   
cost/divide_by_days AS cost_per_day 
   
 
FROM unnest_dates
)
, t1 AS ( 
SELECT * 
FROM t0
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  
      ...
[0m10:56:23.805286 [info ] [Thread-2 (]: 62 of 90 START sql incremental model test.full_datestat ........................ [RUN]
[0m10:56:23.813688 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_datestat'
[0m10:56:23.814068 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_datestat)
[0m10:56:23.814403 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.full_datestat
[0m10:56:23.820924 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m10:56:23.825809 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.827319 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m10:56:23.832831 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.834728 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m10:56:23.836545 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:23.837853 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

      delete from test.full_periodstat where (__date, __table_name) in (select __date, __table_name
                                          from test.full_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:23.839741 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.841260 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m10:56:23.845741 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:23.847134 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m10:56:23.853198 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.854889 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m10:56:23.860863 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.862285 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m10:56:23.872502 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.874372 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m10:56:23.875854 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:23.982336 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.11 seconds
[0m10:56:23.984590 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'full_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:23.986375 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m10:56:23.992067 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.993867 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

        insert into test.full_periodstat select "period_date", "__date", "campaign", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime", "cost_per_day" from test.full_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:23.994969 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:23.997640 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m10:56:24.003297 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.005212 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_datestat"
[0m10:56:24.006435 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.011051 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */
drop table if exists test.full_periodstat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:24.011494 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_datestat (compile): 2024-06-04 10:56:23.814615 => 2024-06-04 10:56:24.011371
[0m10:56:24.014240 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.full_datestat
[0m10:56:24.021160 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.022556 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.026321 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */
drop table if exists test.full_periodstat__dbt_distributed_new_data 
  ...
[0m10:56:24.030085 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.032391 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.full_periodstat (execute): 2024-06-04 10:56:23.715451 => 2024-06-04 10:56:24.032306
[0m10:56:24.033317 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.034403 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79033b550>]}
[0m10:56:24.038097 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.038981 [info ] [Thread-1 (]: 61 of 90 OK created sql incremental model test.full_periodstat ................. [[32mOK[0m in 0.44s]
[0m10:56:24.041485 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.full_periodstat
[0m10:56:24.042264 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_events
[0m10:56:24.043197 [info ] [Thread-1 (]: 63 of 90 START sql table model test.link_events ................................ [RUN]
[0m10:56:24.044439 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_events'
[0m10:56:24.044729 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_events)
[0m10:56:24.044891 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_events
[0m10:56:24.051581 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

    select name, type from system.columns where table = 'hash_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.053110 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.059848 [debug] [Thread-2 (]: 
    In test.full_datestat:
        Schema changed: False
        Source columns not in target: []
        Target columns not in source: []
        New column types: []
  
[0m10:56:24.060906 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.064469 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */
drop table if exists test.full_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:24.067769 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_events"
[0m10:56:24.070375 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_events (compile): 2024-06-04 10:56:24.044984 => 2024-06-04 10:56:24.070151
[0m10:56:24.070881 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_events
[0m10:56:24.076582 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

            

    
        create table test.link_events__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_events
SELECT __date,__table_name,event_datetime,accountName,appmetricaDeviceId,mobileAdsId,crmUserId,promoCode,osName,cityName,adSourceDirty,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,transactionId,utmHash,SUM(sessions) AS sessions,SUM(addToCartSessions) AS addToCartSessions,SUM(cartViewSessions) AS cartViewSessions,SUM(checkoutSessions) AS checkoutSessions,SUM(webSalesSessions) AS webSalesSessions,SUM(sales) AS sales,SUM(amountSales) AS amountSales,SUM(registrationCardSessions) AS registrationCardSessions,SUM(registrationButtonClick) AS registrationButtonClick,SUM(linkingCardToPhoneNumberSessions) AS linkingCardToPhoneNumberSessions,SUM(registrationLendingPromotionsSessions) AS registrationLendingPromotionsSessions,SUM(registrationCashbackSessions) AS registrationCashbackSessions,SUM(instantDiscountActivationSessions) AS instantDiscountActivationSessions,SUM(couponActivationSessions) AS couponActivationSessions,SUM(participationInLotterySessions) AS participationInLotterySessions,SUM(pagesViews) AS pagesViews,SUM(screenView) AS screenView,SUM(installApp) AS installApp,SUM(installs) AS installs,installationDeviceId,__emitted_at,__link,visitId,clientId,cityCode,SUM(pageViews) AS pageViews,AppInstallStatHash,AppEventStatHash,AppSessionStatHash,AppDeeplinkStatHash,VisitStatHash,AppMetricaDeviceHash,CrmUserHash,UtmHashHash,YmClientHash,__id,__datetime 
FROM test.hash_events
GROUP BY __date, __table_name, event_datetime, accountName, appmetricaDeviceId, mobileAdsId, crmUserId, promoCode, osName, cityName, adSourceDirty, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, transactionId, utmHash, installationDeviceId, __emitted_at, __link, visitId, clientId, cityCode, AppInstallStatHash, AppEventStatHash, AppSessionStatHash, AppDeeplinkStatHash, VisitStatHash, AppMetricaDeviceHash, CrmUserHash, UtmHashHash, YmClientHash, __id, __datetime


    )
        ...
[0m10:56:24.077596 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.081494 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

            

    
        create table test.full_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.link_datestat
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
 
WITH t0 AS (
SELECT * FROM test.link_datestat
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m10:56:24.108202 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.111906 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

    select name, type from system.columns where table = 'link_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.113524 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.120313 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    select name, type from system.columns where table = 'full_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.122243 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.124603 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_events"
[0m10:56:24.125197 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

  
    
    
        
        insert into test.link_events__dbt_backup ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime")
  -- depends_on: test.hash_events
SELECT __date,__table_name,event_datetime,accountName,appmetricaDeviceId,mobileAdsId,crmUserId,promoCode,osName,cityName,adSourceDirty,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,transactionId,utmHash,SUM(sessions) AS sessions,SUM(addToCartSessions) AS addToCartSessions,SUM(cartViewSessions) AS cartViewSessions,SUM(checkoutSessions) AS checkoutSessions,SUM(webSalesSessions) AS webSalesSessions,SUM(sales) AS sales,SUM(amountSales) AS amountSales,SUM(registrationCardSessions) AS registrationCardSessions,SUM(registrationButtonClick) AS registrationButtonClick,SUM(linkingCardToPhoneNumberSessions) AS linkingCardToPhoneNumberSessions,SUM(registrationLendingPromotionsSessions) AS registrationLendingPromotionsSessions,SUM(registrationCashbackSessions) AS registrationCashbackSessions,SUM(instantDiscountActivationSessions) AS instantDiscountActivationSessions,SUM(couponActivationSessions) AS couponActivationSessions,SUM(participationInLotterySessions) AS participationInLotterySessions,SUM(pagesViews) AS pagesViews,SUM(screenView) AS screenView,SUM(installApp) AS installApp,SUM(installs) AS installs,installationDeviceId,__emitted_at,__link,visitId,clientId,cityCode,SUM(pageViews) AS pageViews,AppInstallStatHash,AppEventStatHash,AppSessionStatHash,AppDeeplinkStatHash,VisitStatHash,AppMetricaDeviceHash,CrmUserHash,UtmHashHash,YmClientHash,__id,__datetime 
FROM test.hash_events
GROUP BY __date, __table_name, event_datetime, accountName, appmetricaDeviceId, mobileAdsId, crmUserId, promoCode, osName, cityName, adSourceDirty, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, transactionId, utmHash, installationDeviceId, __emitted_at, __link, visitId, clientId, cityCode, AppInstallStatHash, AppEventStatHash, AppSessionStatHash, AppDeeplinkStatHash, VisitStatHash, AppMetricaDeviceHash, CrmUserHash, UtmHashHash, YmClientHash, __id, __datetime


  ...
[0m10:56:24.129694 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.131632 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_datestat"
[0m10:56:24.132200 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

        
  
    
    
        
        insert into test.full_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash")
  -- depends_on: test.link_datestat
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
 
WITH t0 AS (
SELECT * FROM test.link_datestat
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  
      ...
[0m10:56:24.158565 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.159763 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

      delete from test.full_datestat where (__date, __table_name) in (select __date, __table_name
                                          from test.full_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b);
    ...
[0m10:56:24.167798 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:24.169209 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */
EXCHANGE TABLES test.link_events__dbt_backup AND test.link_events 
  
  ...
[0m10:56:24.173828 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.178072 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */
drop table if exists test.link_events__dbt_backup 
  ...
[0m10:56:24.181934 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.183624 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_events (execute): 2024-06-04 10:56:24.071011 => 2024-06-04 10:56:24.183538
[0m10:56:24.184313 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790379720>]}
[0m10:56:24.184861 [info ] [Thread-1 (]: 63 of 90 OK created sql table model test.link_events ........................... [[32mOK[0m in 0.14s]
[0m10:56:24.185277 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_events
[0m10:56:24.186160 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_tuples
[0m10:56:24.186759 [info ] [Thread-1 (]: 64 of 90 START sql table model test.graph_tuples ............................... [RUN]
[0m10:56:24.187630 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_tuples'
[0m10:56:24.187967 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_tuples)
[0m10:56:24.188162 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_tuples
[0m10:56:24.194240 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_tuples"
[0m10:56:24.194933 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_tuples (compile): 2024-06-04 10:56:24.188394 => 2024-06-04 10:56:24.194817
[0m10:56:24.195281 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_tuples
[0m10:56:24.201498 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

            

    
        create table test.graph_tuples__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.link_events

    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_events
            where nullIf(CrmUserHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('YmClientHash'), toDateTime(0),  YmClientHash) as node_left
            from test.hash_events
            where nullIf(YmClientHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_events
            where nullIf(AppMetricaDeviceHash, '') is not null
    
        union all
    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(AppMetricaDeviceHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(CrmUserHash, '') is not null



    )
        ...
[0m10:56:24.213623 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:24.220578 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.226886 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.229214 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

        insert into test.full_datestat select "__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash" from test.full_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b
    ...
[0m10:56:24.230238 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.237553 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

    select name, type from system.columns where table = 'graph_tuples__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.243785 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.245982 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_tuples"
[0m10:56:24.247170 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.250944 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */
drop table if exists test.full_datestat__dbt_new_data_dd0d5b65_f7d9_4a8d_b2dd_47c481a6cc3b 
  ...
[0m10:56:24.253487 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

  
    
    
        
        insert into test.graph_tuples__dbt_backup ("hash", "node_left")
  -- depends_on: test.link_events

    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_events
            where nullIf(CrmUserHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('YmClientHash'), toDateTime(0),  YmClientHash) as node_left
            from test.hash_events
            where nullIf(YmClientHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_events
            where nullIf(AppMetricaDeviceHash, '') is not null
    
        union all
    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(AppMetricaDeviceHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(CrmUserHash, '') is not null



  ...
[0m10:56:24.255829 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.259522 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */
drop table if exists test.full_datestat__dbt_distributed_new_data 
  ...
[0m10:56:24.263215 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.265803 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_datestat (execute): 2024-06-04 10:56:24.014530 => 2024-06-04 10:56:24.265714
[0m10:56:24.267131 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7902deef0>]}
[0m10:56:24.268206 [info ] [Thread-2 (]: 62 of 90 OK created sql incremental model test.full_datestat ................... [[32mOK[0m in 0.45s]
[0m10:56:24.269447 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.full_datestat
[0m10:56:24.278742 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.280005 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */
EXCHANGE TABLES test.graph_tuples__dbt_backup AND test.graph_tuples 
  
  ...
[0m10:56:24.286639 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.291204 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */
drop table if exists test.graph_tuples__dbt_backup 
  ...
[0m10:56:24.295489 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.296934 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_tuples (execute): 2024-06-04 10:56:24.195410 => 2024-06-04 10:56:24.296818
[0m10:56:24.297608 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790282890>]}
[0m10:56:24.298053 [info ] [Thread-1 (]: 64 of 90 OK created sql table model test.graph_tuples .......................... [[32mOK[0m in 0.11s]
[0m10:56:24.298414 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_tuples
[0m10:56:24.299647 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.graph_lookup
[0m10:56:24.301190 [info ] [Thread-2 (]: 65 of 90 START sql table model test.graph_lookup ............................... [RUN]
[0m10:56:24.302485 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_lookup'
[0m10:56:24.303162 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_lookup)
[0m10:56:24.303437 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.graph_lookup
[0m10:56:24.306489 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_lookup"
[0m10:56:24.307106 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_lookup (compile): 2024-06-04 10:56:24.303550 => 2024-06-04 10:56:24.307019
[0m10:56:24.307464 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.graph_lookup
[0m10:56:24.313859 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

            

    
        create table test.graph_lookup__dbt_backup
        
  
        
  engine = MergeTree()
        order by (key_number)
        
        
        
        empty
    as (
        -- depends_on: test.graph_tuples




with all_keys as
(
    
    select distinct hash as key_hash from test.graph_tuples
    union distinct select distinct node_left as key_hash from test.graph_tuples
)


select *, row_number() over() as key_number from all_keys





    )
        ...
[0m10:56:24.331400 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.334686 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

    select name, type from system.columns where table = 'graph_lookup__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.340677 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.342170 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_lookup"
[0m10:56:24.343386 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

  
    
    
        
        insert into test.graph_lookup__dbt_backup ("key_hash", "key_number")
  -- depends_on: test.graph_tuples




with all_keys as
(
    
    select distinct hash as key_hash from test.graph_tuples
    union distinct select distinct node_left as key_hash from test.graph_tuples
)


select *, row_number() over() as key_number from all_keys





  ...
[0m10:56:24.359879 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.361046 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */
EXCHANGE TABLES test.graph_lookup__dbt_backup AND test.graph_lookup 
  
  ...
[0m10:56:24.365827 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.371001 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */
drop table if exists test.graph_lookup__dbt_backup 
  ...
[0m10:56:24.375006 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.376464 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_lookup (execute): 2024-06-04 10:56:24.307817 => 2024-06-04 10:56:24.376375
[0m10:56:24.377145 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79051f460>]}
[0m10:56:24.377486 [info ] [Thread-2 (]: 65 of 90 OK created sql table model test.graph_lookup .......................... [[32mOK[0m in 0.08s]
[0m10:56:24.377812 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.graph_lookup
[0m10:56:24.379402 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_unique
[0m10:56:24.379825 [info ] [Thread-1 (]: 66 of 90 START sql table model test.graph_unique ............................... [RUN]
[0m10:56:24.380426 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_unique'
[0m10:56:24.380653 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_unique)
[0m10:56:24.380829 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_unique
[0m10:56:24.384271 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_unique"
[0m10:56:24.385010 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_unique (compile): 2024-06-04 10:56:24.380942 => 2024-06-04 10:56:24.384922
[0m10:56:24.385230 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_unique
[0m10:56:24.390029 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

            

    
        create table test.graph_unique__dbt_backup
        
  
        
  engine = MergeTree()
        order by (key_hash)
        
        
        
        empty
    as (
        -- depends_on: test.graph_lookup




select * from test.graph_lookup





    )
        ...
[0m10:56:24.407893 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.410733 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

    select name, type from system.columns where table = 'graph_unique__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.415509 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.417369 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_unique"
[0m10:56:24.418573 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

  
    
    
        
        insert into test.graph_unique__dbt_backup ("key_hash", "key_number")
  -- depends_on: test.graph_lookup




select * from test.graph_lookup





  ...
[0m10:56:24.426618 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.428688 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */
EXCHANGE TABLES test.graph_unique__dbt_backup AND test.graph_unique 
  
  ...
[0m10:56:24.433957 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.442430 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */
drop table if exists test.graph_unique__dbt_backup 
  ...
[0m10:56:24.445992 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.447500 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_unique (execute): 2024-06-04 10:56:24.385318 => 2024-06-04 10:56:24.447427
[0m10:56:24.448390 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a580dd80>]}
[0m10:56:24.448978 [info ] [Thread-1 (]: 66 of 90 OK created sql table model test.graph_unique .......................... [[32mOK[0m in 0.07s]
[0m10:56:24.449370 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_unique
[0m10:56:24.451141 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.graph_edge
[0m10:56:24.452959 [info ] [Thread-2 (]: 67 of 90 START sql table model test.graph_edge ................................. [RUN]
[0m10:56:24.454736 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_edge'
[0m10:56:24.455111 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_edge)
[0m10:56:24.455315 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.graph_edge
[0m10:56:24.459409 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_edge"
[0m10:56:24.459893 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_edge (compile): 2024-06-04 10:56:24.455418 => 2024-06-04 10:56:24.459818
[0m10:56:24.460088 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.graph_edge
[0m10:56:24.464414 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

            

    
        create table test.graph_edge__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.graph_unique
-- depends_on: test.graph_tuples




with join_left as (
    select key_number as node_id_left, node_left
    from test.graph_tuples x
    join test.graph_unique  y on x.hash = y.key_hash
)


select node_id_left, key_number as node_id_right, node_id_left as group_id, 1 as has_changed 
from join_left x
join test.graph_unique  y on x.node_left = y.key_hash





    )
        ...
[0m10:56:24.483129 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.487005 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

    select name, type from system.columns where table = 'graph_edge__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.492492 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.494216 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_edge"
[0m10:56:24.495193 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

  
    
    
        
        insert into test.graph_edge__dbt_backup ("node_id_left", "node_id_right", "group_id", "has_changed")
  -- depends_on: test.graph_unique
-- depends_on: test.graph_tuples




with join_left as (
    select key_number as node_id_left, node_left
    from test.graph_tuples x
    join test.graph_unique  y on x.hash = y.key_hash
)


select node_id_left, key_number as node_id_right, node_id_left as group_id, 1 as has_changed 
from join_left x
join test.graph_unique  y on x.node_left = y.key_hash





  ...
[0m10:56:24.506045 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.507427 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */
EXCHANGE TABLES test.graph_edge__dbt_backup AND test.graph_edge 
  
  ...
[0m10:56:24.513912 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.517347 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

        insert into test.graph_edge(node_id_left, node_id_right, group_id, has_changed)
                    select
                        node_id_right,
                        node_id_left,
                        group_id,
                        has_changed
                    from test.graph_edge;
      ...
[0m10:56:24.523742 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.526774 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */
drop table if exists test.graph_edge__dbt_backup 
  ...
[0m10:56:24.529887 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.531189 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_edge (execute): 2024-06-04 10:56:24.460179 => 2024-06-04 10:56:24.531127
[0m10:56:24.531732 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a580d360>]}
[0m10:56:24.532083 [info ] [Thread-2 (]: 67 of 90 OK created sql table model test.graph_edge ............................ [[32mOK[0m in 0.08s]
[0m10:56:24.532417 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.graph_edge
[0m10:56:24.534262 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_glue
[0m10:56:24.535256 [info ] [Thread-1 (]: 68 of 90 START sql table model test.graph_glue ................................. [RUN]
[0m10:56:24.536331 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_glue'
[0m10:56:24.536615 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_glue)
[0m10:56:24.536812 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_glue
[0m10:56:24.539807 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_glue"
[0m10:56:24.540258 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_glue (compile): 2024-06-04 10:56:24.536913 => 2024-06-04 10:56:24.540191
[0m10:56:24.540441 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_glue
[0m10:56:24.547358 [debug] [Thread-1 (]: Running iteration 0
[0m10:56:24.548295 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m10:56:24.595861 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:24.597841 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m10:56:24.630483 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.632027 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m10:56:24.639534 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.641012 [debug] [Thread-1 (]: VALUE: 1
[0m10:56:24.641328 [debug] [Thread-1 (]: Running iteration 1
[0m10:56:24.641742 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m10:56:24.668312 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.669974 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m10:56:24.701155 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.702447 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m10:56:24.711693 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.713213 [debug] [Thread-1 (]: VALUE: 0
[0m10:56:24.713487 [debug] [Thread-1 (]: Running iteration 2
[0m10:56:24.713605 [debug] [Thread-1 (]: Running iteration 3
[0m10:56:24.713703 [debug] [Thread-1 (]: Running iteration 4
[0m10:56:24.713800 [debug] [Thread-1 (]: Running iteration 5
[0m10:56:24.713893 [debug] [Thread-1 (]: Running iteration 6
[0m10:56:24.713985 [debug] [Thread-1 (]: Running iteration 7
[0m10:56:24.714077 [debug] [Thread-1 (]: Running iteration 8
[0m10:56:24.714169 [debug] [Thread-1 (]: Running iteration 9
[0m10:56:24.714264 [debug] [Thread-1 (]: Running iteration 10
[0m10:56:24.714356 [debug] [Thread-1 (]: Running iteration 11
[0m10:56:24.714446 [debug] [Thread-1 (]: Running iteration 12
[0m10:56:24.714537 [debug] [Thread-1 (]: Running iteration 13
[0m10:56:24.715883 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

            

    
        create table test.graph_glue__dbt_backup
        
  
        
  engine = MergeTree()
        order by (node_id_left)
        
        
        
        empty
    as (
        -- depends_on: test.graph_edge




select 
    node_id_left,
    min(group_id) as qid
from test.graph_edge
group by node_id_left





    )
        ...
[0m10:56:24.734331 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.737584 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    select name, type from system.columns where table = 'graph_glue__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.745012 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.746541 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_glue"
[0m10:56:24.747342 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

  
    
    
        
        insert into test.graph_glue__dbt_backup ("node_id_left", "qid")
  -- depends_on: test.graph_edge




select 
    node_id_left,
    min(group_id) as qid
from test.graph_edge
group by node_id_left





  ...
[0m10:56:24.764724 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.766068 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */
EXCHANGE TABLES test.graph_glue__dbt_backup AND test.graph_glue 
  
  ...
[0m10:56:24.771266 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.776312 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */
drop table if exists test.graph_glue__dbt_backup 
  ...
[0m10:56:24.780273 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.781551 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_glue (execute): 2024-06-04 10:56:24.540537 => 2024-06-04 10:56:24.781496
[0m10:56:24.782060 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7903ad5d0>]}
[0m10:56:24.782375 [info ] [Thread-1 (]: 68 of 90 OK created sql table model test.graph_glue ............................ [[32mOK[0m in 0.25s]
[0m10:56:24.782780 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_glue
[0m10:56:24.784292 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.graph_qid
[0m10:56:24.785262 [info ] [Thread-2 (]: 69 of 90 START sql table model test.graph_qid .................................. [RUN]
[0m10:56:24.786368 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_qid'
[0m10:56:24.786862 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_qid)
[0m10:56:24.787342 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.graph_qid
[0m10:56:24.791577 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_qid"
[0m10:56:24.792376 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_qid (compile): 2024-06-04 10:56:24.787632 => 2024-06-04 10:56:24.792217
[0m10:56:24.792882 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.graph_qid
[0m10:56:24.799339 [debug] [Thread-2 (]: Running iteration 0
[0m10:56:24.800264 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m10:56:24.831495 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.833640 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m10:56:24.864656 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:24.866103 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m10:56:24.875864 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.877023 [debug] [Thread-2 (]: VALUE: 0
[0m10:56:24.877319 [debug] [Thread-2 (]: Running iteration 1
[0m10:56:24.877451 [debug] [Thread-2 (]: Running iteration 2
[0m10:56:24.877552 [debug] [Thread-2 (]: Running iteration 3
[0m10:56:24.877648 [debug] [Thread-2 (]: Running iteration 4
[0m10:56:24.877743 [debug] [Thread-2 (]: Running iteration 5
[0m10:56:24.877914 [debug] [Thread-2 (]: Running iteration 6
[0m10:56:24.878027 [debug] [Thread-2 (]: Running iteration 7
[0m10:56:24.878125 [debug] [Thread-2 (]: Running iteration 8
[0m10:56:24.878220 [debug] [Thread-2 (]: Running iteration 9
[0m10:56:24.878313 [debug] [Thread-2 (]: Running iteration 10
[0m10:56:24.878407 [debug] [Thread-2 (]: Running iteration 11
[0m10:56:24.878500 [debug] [Thread-2 (]: Running iteration 12
[0m10:56:24.878594 [debug] [Thread-2 (]: Running iteration 13
[0m10:56:24.879944 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

            

    
        create table test.graph_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.graph_lookup
-- depends_on: test.graph_glue




select  
    toLowCardinality(
        tupleElement(key_hash, 1)
    ) as __link,
    tupleElement(key_hash, 2) as __datetime,
    tupleElement(key_hash, 3) as __id,
    qid
from test.graph_glue  -- Объединение с таблицей graph_glue
join test.graph_lookup on key_number = node_id_left  -- Соединение с таблицей graph_lookup





    )
        ...
[0m10:56:24.900877 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:24.905524 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    select name, type from system.columns where table = 'graph_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:24.910463 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.912039 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_qid"
[0m10:56:24.912952 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

  
    
    
        
        insert into test.graph_qid__dbt_backup ("__link", "__datetime", "__id", "qid")
  -- depends_on: test.graph_lookup
-- depends_on: test.graph_glue




select  
    toLowCardinality(
        tupleElement(key_hash, 1)
    ) as __link,
    tupleElement(key_hash, 2) as __datetime,
    tupleElement(key_hash, 3) as __id,
    qid
from test.graph_glue  -- Объединение с таблицей graph_glue
join test.graph_lookup on key_number = node_id_left  -- Соединение с таблицей graph_lookup





  ...
[0m10:56:24.924723 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.926354 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */
EXCHANGE TABLES test.graph_qid__dbt_backup AND test.graph_qid 
  
  ...
[0m10:56:24.930224 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.934091 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */
drop table if exists test.graph_qid__dbt_backup 
  ...
[0m10:56:24.937012 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.938362 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_qid (execute): 2024-06-04 10:56:24.793052 => 2024-06-04 10:56:24.938302
[0m10:56:24.938903 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7900bb640>]}
[0m10:56:24.939233 [info ] [Thread-2 (]: 69 of 90 OK created sql table model test.graph_qid ............................. [[32mOK[0m in 0.15s]
[0m10:56:24.939542 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.graph_qid
[0m10:56:24.941069 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.full_events
[0m10:56:24.941797 [info ] [Thread-1 (]: 70 of 90 START sql table model test.full_events ................................ [RUN]
[0m10:56:24.942485 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_events'
[0m10:56:24.942758 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_events)
[0m10:56:24.942986 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.full_events
[0m10:56:24.948925 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m10:56:24.954045 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.955638 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m10:56:24.961355 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.962901 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m10:56:24.968015 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.969726 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m10:56:24.974096 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.975350 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m10:56:24.979885 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.981139 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m10:56:24.987197 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:24.989094 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m10:56:24.994076 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:24.995572 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m10:56:25.001550 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.003444 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m10:56:25.008008 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.009347 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m10:56:25.016546 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.019054 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_events"
[0m10:56:25.019717 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.full_events (compile): 2024-06-04 10:56:24.943098 => 2024-06-04 10:56:25.019611
[0m10:56:25.020055 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.full_events
[0m10:56:25.024519 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

            

    
        create table test.full_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.graph_qid
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry

WITH t0 AS (
SELECT * FROM test.link_events
LEFT JOIN test.graph_qid USING (__id, __link, __datetime)
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT t1.*, link_registry_appprofilematching.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t1 
LEFT JOIN link_registry_appprofilematching USING (AppMetricaDeviceHash,CrmUserHash) 
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m10:56:25.075353 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m10:56:25.078692 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    select name, type from system.columns where table = 'full_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.083942 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.086294 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_events"
[0m10:56:25.086849 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

  
    
    
        
        insert into test.full_events__dbt_backup ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "qid", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.graph_qid
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry

WITH t0 AS (
SELECT * FROM test.link_events
LEFT JOIN test.graph_qid USING (__id, __link, __datetime)
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT t1.*, link_registry_appprofilematching.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t1 
LEFT JOIN link_registry_appprofilematching USING (AppMetricaDeviceHash,CrmUserHash) 
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  ...
[0m10:56:25.169807 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m10:56:25.171107 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */
EXCHANGE TABLES test.full_events__dbt_backup AND test.full_events 
  
  ...
[0m10:56:25.176922 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.180483 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */
drop table if exists test.full_events__dbt_backup 
  ...
[0m10:56:25.185016 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.186343 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.full_events (execute): 2024-06-04 10:56:25.020184 => 2024-06-04 10:56:25.186287
[0m10:56:25.186881 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7903ae200>]}
[0m10:56:25.187295 [info ] [Thread-1 (]: 70 of 90 OK created sql table model test.full_events ........................... [[32mOK[0m in 0.24s]
[0m10:56:25.187608 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.full_events
[0m10:56:25.189123 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m10:56:25.189577 [info ] [Thread-2 (]: 71 of 90 START sql table model test.attr_myfirstfunnel_prepare_with_qid ........ [RUN]
[0m10:56:25.190068 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m10:56:25.190942 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid'
[0m10:56:25.191570 [info ] [Thread-1 (]: 72 of 90 START sql table model test.attr_mysecondfunnel_prepare_with_qid ....... [RUN]
[0m10:56:25.191977 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid)
[0m10:56:25.192603 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid'
[0m10:56:25.193184 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m10:56:25.193595 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid)
[0m10:56:25.197575 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"
[0m10:56:25.198081 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m10:56:25.202007 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"
[0m10:56:25.203000 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid (compile): 2024-06-04 10:56:25.193954 => 2024-06-04 10:56:25.202833
[0m10:56:25.203435 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m10:56:25.207748 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

            

    
        create table test.attr_myfirstfunnel_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



    )
        ...
[0m10:56:25.208907 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid (compile): 2024-06-04 10:56:25.198515 => 2024-06-04 10:56:25.208766
[0m10:56:25.209427 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m10:56:25.214834 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

            

    
        create table test.attr_mysecondfunnel_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



    )
        ...
[0m10:56:25.231269 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.238134 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.241151 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:25.244314 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.245170 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.248374 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"
[0m10:56:25.249404 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_prepare_with_qid__dbt_backup ("qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



  ...
[0m10:56:25.256276 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.259024 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"
[0m10:56:25.259491 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_prepare_with_qid__dbt_backup ("qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



  ...
[0m10:56:25.267954 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.269570 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */
EXCHANGE TABLES test.attr_myfirstfunnel_prepare_with_qid__dbt_backup AND test.attr_myfirstfunnel_prepare_with_qid 
  
  ...
[0m10:56:25.274494 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.278535 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */
drop table if exists test.attr_myfirstfunnel_prepare_with_qid__dbt_backup 
  ...
[0m10:56:25.282400 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.284266 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid (execute): 2024-06-04 10:56:25.203598 => 2024-06-04 10:56:25.284169
[0m10:56:25.285224 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791dbc880>]}
[0m10:56:25.285777 [info ] [Thread-2 (]: 71 of 90 OK created sql table model test.attr_myfirstfunnel_prepare_with_qid ... [[32mOK[0m in 0.09s]
[0m10:56:25.286388 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m10:56:25.287425 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m10:56:25.287881 [info ] [Thread-2 (]: 73 of 90 START sql table model test.attr_myfirstfunnel_create_events ........... [RUN]
[0m10:56:25.288648 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_create_events'
[0m10:56:25.288955 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_create_events)
[0m10:56:25.289233 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m10:56:25.294349 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"
[0m10:56:25.295326 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:25.297361 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */
EXCHANGE TABLES test.attr_mysecondfunnel_prepare_with_qid__dbt_backup AND test.attr_mysecondfunnel_prepare_with_qid 
  
  ...
[0m10:56:25.298363 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_events (compile): 2024-06-04 10:56:25.289368 => 2024-06-04 10:56:25.298253
[0m10:56:25.298866 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m10:56:25.305876 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

            

    
        create table test.attr_myfirstfunnel_create_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'VisitStat'  and osName = 'web'  THEN  1
        
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  2
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  3
        WHEN __link = 'AppDeeplinkStat'  THEN  3
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  4
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'VisitStat' THEN 'visits_step'
        
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_myfirstfunnel_prepare_with_qid





    )
        ...
[0m10:56:25.307633 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.312569 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */
drop table if exists test.attr_mysecondfunnel_prepare_with_qid__dbt_backup 
  ...
[0m10:56:25.316478 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.318339 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid (execute): 2024-06-04 10:56:25.209750 => 2024-06-04 10:56:25.318224
[0m10:56:25.319785 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7903eb820>]}
[0m10:56:25.320407 [info ] [Thread-1 (]: 72 of 90 OK created sql table model test.attr_mysecondfunnel_prepare_with_qid .. [[32mOK[0m in 0.13s]
[0m10:56:25.322183 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m10:56:25.323537 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m10:56:25.324280 [info ] [Thread-1 (]: 74 of 90 START sql table model test.attr_mysecondfunnel_create_events .......... [RUN]
[0m10:56:25.325117 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_create_events'
[0m10:56:25.325370 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_create_events)
[0m10:56:25.325546 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m10:56:25.331563 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"
[0m10:56:25.332524 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:25.337845 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_create_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.340109 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_events (compile): 2024-06-04 10:56:25.325647 => 2024-06-04 10:56:25.339802
[0m10:56:25.340652 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m10:56:25.346465 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

            

    
        create table test.attr_mysecondfunnel_create_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  1
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  2
        WHEN __link = 'AppDeeplinkStat'  THEN  2
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  3
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_mysecondfunnel_prepare_with_qid





    )
        ...
[0m10:56:25.347534 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.351996 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"
[0m10:56:25.353195 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_create_events__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step")
  -- depends_on: test.attr_myfirstfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'VisitStat'  and osName = 'web'  THEN  1
        
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  2
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  3
        WHEN __link = 'AppDeeplinkStat'  THEN  3
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  4
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'VisitStat' THEN 'visits_step'
        
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_myfirstfunnel_prepare_with_qid





  ...
[0m10:56:25.363579 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.365482 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */
EXCHANGE TABLES test.attr_myfirstfunnel_create_events__dbt_backup AND test.attr_myfirstfunnel_create_events 
  
  ...
[0m10:56:25.369873 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.374393 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_create_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.375408 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.381084 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */
drop table if exists test.attr_myfirstfunnel_create_events__dbt_backup 
  ...
[0m10:56:25.382161 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.386647 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"
[0m10:56:25.387770 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.389379 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_events (execute): 2024-06-04 10:56:25.299333 => 2024-06-04 10:56:25.389306
[0m10:56:25.390378 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791dbdba0>]}
[0m10:56:25.391627 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_create_events__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step")
  -- depends_on: test.attr_mysecondfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  1
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  2
        WHEN __link = 'AppDeeplinkStat'  THEN  2
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  3
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_mysecondfunnel_prepare_with_qid





  ...
[0m10:56:25.391178 [info ] [Thread-2 (]: 73 of 90 OK created sql table model test.attr_myfirstfunnel_create_events ...... [[32mOK[0m in 0.10s]
[0m10:56:25.393912 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m10:56:25.394921 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m10:56:25.395404 [info ] [Thread-2 (]: 75 of 90 START sql table model test.attr_myfirstfunnel_add_row_number .......... [RUN]
[0m10:56:25.396315 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number'
[0m10:56:25.396697 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number)
[0m10:56:25.396888 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m10:56:25.401860 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"
[0m10:56:25.402947 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number (compile): 2024-06-04 10:56:25.396993 => 2024-06-04 10:56:25.402802
[0m10:56:25.403416 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m10:56:25.408212 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

            

    
        create table test.attr_myfirstfunnel_add_row_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_myfirstfunnel_create_events





    )
        ...
[0m10:56:25.409062 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.411622 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */
EXCHANGE TABLES test.attr_mysecondfunnel_create_events__dbt_backup AND test.attr_mysecondfunnel_create_events 
  
  ...
[0m10:56:25.415792 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.421127 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */
drop table if exists test.attr_mysecondfunnel_create_events__dbt_backup 
  ...
[0m10:56:25.424721 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.426036 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_events (execute): 2024-06-04 10:56:25.340804 => 2024-06-04 10:56:25.425976
[0m10:56:25.426563 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.427679 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7903e9cc0>]}
[0m10:56:25.432733 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_add_row_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.434274 [info ] [Thread-1 (]: 74 of 90 OK created sql table model test.attr_mysecondfunnel_create_events ..... [[32mOK[0m in 0.10s]
[0m10:56:25.436688 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m10:56:25.438167 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m10:56:25.438787 [info ] [Thread-1 (]: 76 of 90 START sql table model test.attr_mysecondfunnel_add_row_number ......... [RUN]
[0m10:56:25.439635 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number'
[0m10:56:25.439975 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number)
[0m10:56:25.440181 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m10:56:25.443499 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"
[0m10:56:25.444388 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.446889 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"
[0m10:56:25.447789 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number (compile): 2024-06-04 10:56:25.440304 => 2024-06-04 10:56:25.447660
[0m10:56:25.448163 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m10:56:25.453734 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

            

    
        create table test.attr_mysecondfunnel_add_row_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_mysecondfunnel_create_events





    )
        ...
[0m10:56:25.455515 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_add_row_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step", "__rn")
  -- depends_on: test.attr_myfirstfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_myfirstfunnel_create_events





  ...
[0m10:56:25.467216 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.468746 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */
EXCHANGE TABLES test.attr_myfirstfunnel_add_row_number__dbt_backup AND test.attr_myfirstfunnel_add_row_number 
  
  ...
[0m10:56:25.470178 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.474076 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_add_row_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.475373 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.481576 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.480905 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */
drop table if exists test.attr_myfirstfunnel_add_row_number__dbt_backup 
  ...
[0m10:56:25.483109 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"
[0m10:56:25.485813 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_add_row_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step", "__rn")
  -- depends_on: test.attr_mysecondfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_mysecondfunnel_create_events





  ...
[0m10:56:25.488172 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.489479 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number (execute): 2024-06-04 10:56:25.403585 => 2024-06-04 10:56:25.489419
[0m10:56:25.490061 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791dbc820>]}
[0m10:56:25.490422 [info ] [Thread-2 (]: 75 of 90 OK created sql table model test.attr_myfirstfunnel_add_row_number ..... [[32mOK[0m in 0.09s]
[0m10:56:25.490760 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m10:56:25.491680 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m10:56:25.492111 [info ] [Thread-2 (]: 77 of 90 START sql table model test.attr_myfirstfunnel_find_new_period ......... [RUN]
[0m10:56:25.492769 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period'
[0m10:56:25.493177 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period)
[0m10:56:25.493544 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m10:56:25.494147 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.588399 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"
[0m10:56:25.590252 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */
EXCHANGE TABLES test.attr_mysecondfunnel_add_row_number__dbt_backup AND test.attr_mysecondfunnel_add_row_number 
  
  ...
[0m10:56:25.592361 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period (compile): 2024-06-04 10:56:25.494422 => 2024-06-04 10:56:25.592176
[0m10:56:25.593111 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m10:56:25.597612 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

            

    
        create table test.attr_myfirstfunnel_find_new_period__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3, 4] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_myfirstfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'VisitStat' and toDate(__datetime) - toDate(prep_new_period) < 
             90  THEN false
        
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





    )
        ...
[0m10:56:25.598980 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.604693 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */
drop table if exists test.attr_mysecondfunnel_add_row_number__dbt_backup 
  ...
[0m10:56:25.608928 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.610730 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number (execute): 2024-06-04 10:56:25.448340 => 2024-06-04 10:56:25.610661
[0m10:56:25.611393 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790420400>]}
[0m10:56:25.611835 [info ] [Thread-1 (]: 76 of 90 OK created sql table model test.attr_mysecondfunnel_add_row_number .... [[32mOK[0m in 0.17s]
[0m10:56:25.612217 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m10:56:25.613678 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m10:56:25.614070 [info ] [Thread-1 (]: 78 of 90 START sql table model test.attr_mysecondfunnel_find_new_period ........ [RUN]
[0m10:56:25.614900 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period'
[0m10:56:25.615189 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period)
[0m10:56:25.615408 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m10:56:25.621322 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"
[0m10:56:25.621890 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period (compile): 2024-06-04 10:56:25.615514 => 2024-06-04 10:56:25.621799
[0m10:56:25.622167 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m10:56:25.626899 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

            

    
        create table test.attr_mysecondfunnel_find_new_period__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_mysecondfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





    )
        ...
[0m10:56:25.627745 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:25.632832 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_find_new_period__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.638342 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.640002 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"
[0m10:56:25.640776 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_find_new_period__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period")
  -- depends_on: test.attr_myfirstfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3, 4] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_myfirstfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'VisitStat' and toDate(__datetime) - toDate(prep_new_period) < 
             90  THEN false
        
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





  ...
[0m10:56:25.647245 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.650397 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_find_new_period__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.655179 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.656461 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */
EXCHANGE TABLES test.attr_myfirstfunnel_find_new_period__dbt_backup AND test.attr_myfirstfunnel_find_new_period 
  
  ...
[0m10:56:25.657666 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.659413 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"
[0m10:56:25.660203 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_find_new_period__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period")
  -- depends_on: test.attr_mysecondfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_mysecondfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





  ...
[0m10:56:25.661683 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.666037 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */
drop table if exists test.attr_myfirstfunnel_find_new_period__dbt_backup 
  ...
[0m10:56:25.670386 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.671884 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period (execute): 2024-06-04 10:56:25.593311 => 2024-06-04 10:56:25.671803
[0m10:56:25.672591 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7902320e0>]}
[0m10:56:25.673180 [info ] [Thread-2 (]: 77 of 90 OK created sql table model test.attr_myfirstfunnel_find_new_period .... [[32mOK[0m in 0.18s]
[0m10:56:25.673587 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m10:56:25.674529 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.675906 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */
EXCHANGE TABLES test.attr_mysecondfunnel_find_new_period__dbt_backup AND test.attr_mysecondfunnel_find_new_period 
  
  ...
[0m10:56:25.677198 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m10:56:25.678104 [info ] [Thread-2 (]: 79 of 90 START sql table model test.attr_myfirstfunnel_calculate_period_number . [RUN]
[0m10:56:25.678994 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number'
[0m10:56:25.679174 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number)
[0m10:56:25.679334 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m10:56:25.682428 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"
[0m10:56:25.683322 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.687947 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */
drop table if exists test.attr_mysecondfunnel_find_new_period__dbt_backup 
  ...
[0m10:56:25.689186 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number (compile): 2024-06-04 10:56:25.679423 => 2024-06-04 10:56:25.689036
[0m10:56:25.689553 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m10:56:25.695235 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

            

    
        create table test.attr_myfirstfunnel_calculate_period_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_myfirstfunnel_find_new_period





    )
        ...
[0m10:56:25.696076 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.698323 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period (execute): 2024-06-04 10:56:25.622300 => 2024-06-04 10:56:25.698251
[0m10:56:25.699194 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790298640>]}
[0m10:56:25.700078 [info ] [Thread-1 (]: 78 of 90 OK created sql table model test.attr_mysecondfunnel_find_new_period ... [[32mOK[0m in 0.08s]
[0m10:56:25.700756 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m10:56:25.702639 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m10:56:25.703604 [info ] [Thread-1 (]: 80 of 90 START sql table model test.attr_mysecondfunnel_calculate_period_number  [RUN]
[0m10:56:25.704234 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number'
[0m10:56:25.704358 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number)
[0m10:56:25.704515 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m10:56:25.707758 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"
[0m10:56:25.708224 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number (compile): 2024-06-04 10:56:25.704617 => 2024-06-04 10:56:25.708157
[0m10:56:25.708410 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m10:56:25.712963 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

            

    
        create table test.attr_mysecondfunnel_calculate_period_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_mysecondfunnel_find_new_period





    )
        ...
[0m10:56:25.713954 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.717544 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_calculate_period_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.724333 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.726716 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"
[0m10:56:25.727559 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_calculate_period_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period", "__period_number")
  -- depends_on: test.attr_myfirstfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_myfirstfunnel_find_new_period





  ...
[0m10:56:25.731078 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.734691 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_calculate_period_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.735788 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.738846 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */
EXCHANGE TABLES test.attr_myfirstfunnel_calculate_period_number__dbt_backup AND test.attr_myfirstfunnel_calculate_period_number 
  
  ...
[0m10:56:25.741205 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.742951 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"
[0m10:56:25.743426 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_calculate_period_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period", "__period_number")
  -- depends_on: test.attr_mysecondfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_mysecondfunnel_find_new_period





  ...
[0m10:56:25.744481 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.751949 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */
drop table if exists test.attr_myfirstfunnel_calculate_period_number__dbt_backup 
  ...
[0m10:56:25.753675 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.755272 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */
EXCHANGE TABLES test.attr_mysecondfunnel_calculate_period_number__dbt_backup AND test.attr_mysecondfunnel_calculate_period_number 
  
  ...
[0m10:56:25.757161 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.758639 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number (execute): 2024-06-04 10:56:25.689655 => 2024-06-04 10:56:25.758558
[0m10:56:25.759371 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79028ce20>]}
[0m10:56:25.760003 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.760502 [info ] [Thread-2 (]: 79 of 90 OK created sql table model test.attr_myfirstfunnel_calculate_period_number  [[32mOK[0m in 0.08s]
[0m10:56:25.764802 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */
drop table if exists test.attr_mysecondfunnel_calculate_period_number__dbt_backup 
  ...
[0m10:56:25.765311 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m10:56:25.766998 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m10:56:25.767831 [info ] [Thread-2 (]: 81 of 90 START sql table model test.attr_myfirstfunnel_create_missed_steps ..... [RUN]
[0m10:56:25.769655 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps'
[0m10:56:25.770723 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.771122 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps)
[0m10:56:25.772744 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number (execute): 2024-06-04 10:56:25.708510 => 2024-06-04 10:56:25.772613
[0m10:56:25.773257 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m10:56:25.774406 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790423910>]}
[0m10:56:25.777996 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"
[0m10:56:25.778954 [info ] [Thread-1 (]: 80 of 90 OK created sql table model test.attr_mysecondfunnel_calculate_period_number  [[32mOK[0m in 0.07s]
[0m10:56:25.779743 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m10:56:25.781140 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps (compile): 2024-06-04 10:56:25.774876 => 2024-06-04 10:56:25.780883
[0m10:56:25.781826 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m10:56:25.782300 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m10:56:25.782783 [info ] [Thread-1 (]: 82 of 90 START sql table model test.attr_mysecondfunnel_create_missed_steps .... [RUN]
[0m10:56:25.789028 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps'
[0m10:56:25.789634 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

            

    
        create table test.attr_myfirstfunnel_create_missed_steps__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_myfirstfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





    )
        ...
[0m10:56:25.789890 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps)
[0m10:56:25.791059 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m10:56:25.794499 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"
[0m10:56:25.795474 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps (compile): 2024-06-04 10:56:25.791311 => 2024-06-04 10:56:25.795307
[0m10:56:25.796234 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m10:56:25.803994 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

            

    
        create table test.attr_mysecondfunnel_create_missed_steps__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_mysecondfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





    )
        ...
[0m10:56:25.825244 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:25.829259 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_create_missed_steps__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.830121 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:25.834627 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_create_missed_steps__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.839227 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.839933 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.842052 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"
[0m10:56:25.844298 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"
[0m10:56:25.845864 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_create_missed_steps__dbt_backup ("qid", "__link", "__id", "__priority", "__datetime", "__period_number", "__if_missed", "__step", "__rn")
  -- depends_on: test.attr_mysecondfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_mysecondfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





  ...
[0m10:56:25.846760 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_create_missed_steps__dbt_backup ("qid", "__link", "__id", "__priority", "__datetime", "__period_number", "__if_missed", "__step", "__rn")
  -- depends_on: test.attr_myfirstfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_myfirstfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





  ...
[0m10:56:25.867316 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.869705 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */
EXCHANGE TABLES test.attr_mysecondfunnel_create_missed_steps__dbt_backup AND test.attr_mysecondfunnel_create_missed_steps 
  
  ...
[0m10:56:25.870487 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.872897 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */
EXCHANGE TABLES test.attr_myfirstfunnel_create_missed_steps__dbt_backup AND test.attr_myfirstfunnel_create_missed_steps 
  
  ...
[0m10:56:25.875966 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.879926 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */
drop table if exists test.attr_mysecondfunnel_create_missed_steps__dbt_backup 
  ...
[0m10:56:25.881344 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.886141 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */
drop table if exists test.attr_myfirstfunnel_create_missed_steps__dbt_backup 
  ...
[0m10:56:25.887010 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.889788 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps (execute): 2024-06-04 10:56:25.796492 => 2024-06-04 10:56:25.889721
[0m10:56:25.890452 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79052d510>]}
[0m10:56:25.890868 [info ] [Thread-1 (]: 82 of 90 OK created sql table model test.attr_mysecondfunnel_create_missed_steps  [[32mOK[0m in 0.10s]
[0m10:56:25.891248 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m10:56:25.892469 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m10:56:25.893036 [info ] [Thread-1 (]: 83 of 90 START sql table model test.attr_mysecondfunnel_join_to_attr_prepare_with_qid  [RUN]
[0m10:56:25.894252 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid'
[0m10:56:25.895085 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.895371 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid)
[0m10:56:25.896666 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps (execute): 2024-06-04 10:56:25.783205 => 2024-06-04 10:56:25.896606
[0m10:56:25.897028 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m10:56:25.897680 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79028e9e0>]}
[0m10:56:25.905840 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"
[0m10:56:25.906751 [info ] [Thread-2 (]: 81 of 90 OK created sql table model test.attr_myfirstfunnel_create_missed_steps  [[32mOK[0m in 0.13s]
[0m10:56:25.907652 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m10:56:25.909015 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m10:56:25.910090 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid (compile): 2024-06-04 10:56:25.898014 => 2024-06-04 10:56:25.909987
[0m10:56:25.909686 [info ] [Thread-2 (]: 84 of 90 START sql table model test.attr_myfirstfunnel_join_to_attr_prepare_with_qid  [RUN]
[0m10:56:25.910770 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m10:56:25.911397 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid'
[0m10:56:25.915823 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

            

    
        create table test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__period_number,__datetime,__priority,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_prepare_with_qid
-- depends_on: test.attr_mysecondfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 3 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_mysecondfunnel_prepare_with_qid AS x
join test.attr_mysecondfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





    )
        ...
[0m10:56:25.916368 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid)
[0m10:56:25.918153 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m10:56:25.924871 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"
[0m10:56:25.925380 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid (compile): 2024-06-04 10:56:25.918882 => 2024-06-04 10:56:25.925301
[0m10:56:25.925677 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m10:56:25.929995 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

            

    
        create table test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__period_number,__datetime,__priority,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_prepare_with_qid
-- depends_on: test.attr_myfirstfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,

    CASE
    WHEN __priority = 3 and not __if_missed = 1 THEN 1
    WHEN __priority = 2 and not __if_missed = 1 THEN 2
    WHEN __priority = 1 and not __if_missed = 1 THEN 3
    
    ELSE 0
    END as __first_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без веб сессии]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 4 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_myfirstfunnel_prepare_with_qid AS x
join test.attr_myfirstfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





    )
        ...
[0m10:56:25.940579 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.945000 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.950458 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.953431 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"
[0m10:56:25.954352 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "adSourceDirty")
  -- depends_on: test.attr_mysecondfunnel_prepare_with_qid
-- depends_on: test.attr_mysecondfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 3 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_mysecondfunnel_prepare_with_qid AS x
join test.attr_mysecondfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





  ...
[0m10:56:25.961193 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:25.964730 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:25.970954 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.973857 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"
[0m10:56:25.974582 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m10:56:25.976004 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */
EXCHANGE TABLES test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup AND test.attr_mysecondfunnel_join_to_attr_prepare_with_qid 
  
  ...
[0m10:56:25.976958 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_prepare_with_qid
-- depends_on: test.attr_myfirstfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,

    CASE
    WHEN __priority = 3 and not __if_missed = 1 THEN 1
    WHEN __priority = 2 and not __if_missed = 1 THEN 2
    WHEN __priority = 1 and not __if_missed = 1 THEN 3
    
    ELSE 0
    END as __first_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без веб сессии]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 4 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_myfirstfunnel_prepare_with_qid AS x
join test.attr_myfirstfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





  ...
[0m10:56:25.981749 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:25.986630 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */
drop table if exists test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup 
  ...
[0m10:56:25.990806 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:25.992408 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid (execute): 2024-06-04 10:56:25.911740 => 2024-06-04 10:56:25.992322
[0m10:56:25.993327 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa79041c640>]}
[0m10:56:25.993885 [info ] [Thread-1 (]: 83 of 90 OK created sql table model test.attr_mysecondfunnel_join_to_attr_prepare_with_qid  [[32mOK[0m in 0.10s]
[0m10:56:25.994357 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m10:56:26.010644 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:26.011802 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */
EXCHANGE TABLES test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup AND test.attr_myfirstfunnel_join_to_attr_prepare_with_qid 
  
  ...
[0m10:56:26.016262 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.021032 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */
drop table if exists test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup 
  ...
[0m10:56:26.025301 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.026507 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid (execute): 2024-06-04 10:56:25.925776 => 2024-06-04 10:56:26.026452
[0m10:56:26.027011 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790240df0>]}
[0m10:56:26.027503 [info ] [Thread-2 (]: 84 of 90 OK created sql table model test.attr_myfirstfunnel_join_to_attr_prepare_with_qid  [[32mOK[0m in 0.12s]
[0m10:56:26.027825 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m10:56:26.029355 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m10:56:26.029993 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m10:56:26.030313 [info ] [Thread-1 (]: 85 of 90 START sql table model test.attr_myfirstfunnel_model ................... [RUN]
[0m10:56:26.031112 [info ] [Thread-2 (]: 86 of 90 START sql table model test.attr_mysecondfunnel_model .................. [RUN]
[0m10:56:26.032064 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_model'
[0m10:56:26.032894 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_model'
[0m10:56:26.033455 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_model)
[0m10:56:26.034121 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_model)
[0m10:56:26.034614 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m10:56:26.035090 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m10:56:26.043856 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_model"
[0m10:56:26.049244 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_model"
[0m10:56:26.050814 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_model (compile): 2024-06-04 10:56:26.035525 => 2024-06-04 10:56:26.050551
[0m10:56:26.051362 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m10:56:26.057315 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_model (compile): 2024-06-04 10:56:26.044271 => 2024-06-04 10:56:26.057081
[0m10:56:26.058303 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

            

    
        create table test.attr_myfirstfunnel_model__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

        ,max(__first_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_first_click_rank

     from test.attr_myfirstfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

         ,__first_click_rank = __max_first_click_rank as  __first_click__rank_condition
         ,sum(case when __first_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __first_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_adSourceDirty
        
     

    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_adSourceDirty
        
     


 FROM target_count



    )
        ...
[0m10:56:26.059117 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m10:56:26.064816 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

            

    
        create table test.attr_mysecondfunnel_model__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

     from test.attr_mysecondfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_adSourceDirty
        
     


 FROM target_count



    )
        ...
[0m10:56:26.090623 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:26.093671 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_model__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:26.096348 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m10:56:26.099356 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_model__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:26.100894 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.104469 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_model"
[0m10:56:26.105422 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_model__dbt_backup ("qid", "__datetime", "__id", "__priority", "__if_missed", "__link", "__period_number", "__mysecondfunnel_last_click_utmSource", "__mysecondfunnel_last_click_utmMedium", "__mysecondfunnel_last_click_utmCampaign", "__mysecondfunnel_last_click_utmTerm", "__mysecondfunnel_last_click_utmContent", "__mysecondfunnel_last_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

     from test.attr_mysecondfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_adSourceDirty
        
     


 FROM target_count



  ...
[0m10:56:26.106560 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.108350 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_model"
[0m10:56:26.109346 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_model__dbt_backup ("qid", "__datetime", "__id", "__priority", "__if_missed", "__link", "__period_number", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

        ,max(__first_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_first_click_rank

     from test.attr_myfirstfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

         ,__first_click_rank = __max_first_click_rank as  __first_click__rank_condition
         ,sum(case when __first_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __first_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_adSourceDirty
        
     

    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_adSourceDirty
        
     


 FROM target_count



  ...
[0m10:56:26.131149 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:26.132398 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */
EXCHANGE TABLES test.attr_mysecondfunnel_model__dbt_backup AND test.attr_mysecondfunnel_model 
  
  ...
[0m10:56:26.139387 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.143522 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */
drop table if exists test.attr_mysecondfunnel_model__dbt_backup 
  ...
[0m10:56:26.144669 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:26.146046 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */
EXCHANGE TABLES test.attr_myfirstfunnel_model__dbt_backup AND test.attr_myfirstfunnel_model 
  
  ...
[0m10:56:26.148942 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.150830 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_model (execute): 2024-06-04 10:56:26.060512 => 2024-06-04 10:56:26.150755
[0m10:56:26.151562 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e5d6c0>]}
[0m10:56:26.152190 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.158179 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */
drop table if exists test.attr_myfirstfunnel_model__dbt_backup 
  ...
[0m10:56:26.162609 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.163990 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_model (execute): 2024-06-04 10:56:26.051799 => 2024-06-04 10:56:26.163918
[0m10:56:26.164893 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7900d3160>]}
[0m10:56:26.804854 [info ] [Thread-2 (]: 86 of 90 OK created sql table model test.attr_mysecondfunnel_model ............. [[32mOK[0m in 0.12s]
[0m10:56:26.806632 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m10:56:26.805986 [info ] [Thread-1 (]: 85 of 90 OK created sql table model test.attr_myfirstfunnel_model .............. [[32mOK[0m in 0.13s]
[0m10:56:26.807979 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m10:56:26.808344 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m10:56:26.808858 [info ] [Thread-2 (]: 87 of 90 START sql table model test.attr_mysecondfunnel_final_table ............ [RUN]
[0m10:56:26.811059 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_final_table'
[0m10:56:26.811468 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m10:56:26.811811 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_final_table)
[0m10:56:26.812314 [info ] [Thread-1 (]: 88 of 90 START sql table model test.attr_myfirstfunnel_final_table ............. [RUN]
[0m10:56:26.812808 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m10:56:26.813633 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_final_table'
[0m10:56:26.818042 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"
[0m10:56:26.818788 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_final_table)
[0m10:56:26.819994 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_final_table (compile): 2024-06-04 10:56:26.814149 => 2024-06-04 10:56:26.819766
[0m10:56:26.820605 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m10:56:26.821201 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m10:56:26.824587 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"
[0m10:56:26.830331 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

            

    
        create table test.attr_mysecondfunnel_final_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_mysecondfunnel_join_to_attr_prepare_with_qid
        join  test.attr_mysecondfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



    )
        ...
[0m10:56:26.832488 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_final_table (compile): 2024-06-04 10:56:26.821664 => 2024-06-04 10:56:26.832278
[0m10:56:26.833279 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m10:56:26.839200 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

            

    
        create table test.attr_myfirstfunnel_final_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_myfirstfunnel_join_to_attr_prepare_with_qid
        join  test.attr_myfirstfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



    )
        ...
[0m10:56:26.859141 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:26.862227 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_final_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:26.867871 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.871306 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"
[0m10:56:26.872089 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_final_table__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "adSourceDirty", "__mysecondfunnel_last_click_utmSource", "__mysecondfunnel_last_click_utmMedium", "__mysecondfunnel_last_click_utmCampaign", "__mysecondfunnel_last_click_utmTerm", "__mysecondfunnel_last_click_utmContent", "__mysecondfunnel_last_click_adSourceDirty")
  -- depends_on: test.attr_mysecondfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_mysecondfunnel_join_to_attr_prepare_with_qid
        join  test.attr_mysecondfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



  ...
[0m10:56:26.873711 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:26.876902 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_final_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:26.882005 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.885664 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"
[0m10:56:26.886554 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_final_table__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "adSourceDirty", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_myfirstfunnel_join_to_attr_prepare_with_qid
        join  test.attr_myfirstfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



  ...
[0m10:56:26.901893 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:26.903411 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */
EXCHANGE TABLES test.attr_mysecondfunnel_final_table__dbt_backup AND test.attr_mysecondfunnel_final_table 
  
  ...
[0m10:56:26.908637 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.913444 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */
drop table if exists test.attr_mysecondfunnel_final_table__dbt_backup 
  ...
[0m10:56:26.917060 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.917772 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m10:56:26.919203 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_final_table (execute): 2024-06-04 10:56:26.825057 => 2024-06-04 10:56:26.919142
[0m10:56:26.920368 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */
EXCHANGE TABLES test.attr_myfirstfunnel_final_table__dbt_backup AND test.attr_myfirstfunnel_final_table 
  
  ...
[0m10:56:26.921509 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e5b6a0>]}
[0m10:56:26.923142 [info ] [Thread-2 (]: 87 of 90 OK created sql table model test.attr_mysecondfunnel_final_table ....... [[32mOK[0m in 0.11s]
[0m10:56:26.923588 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m10:56:26.927326 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.931350 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */
drop table if exists test.attr_myfirstfunnel_final_table__dbt_backup 
  ...
[0m10:56:26.935004 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.936289 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_final_table (execute): 2024-06-04 10:56:26.833602 => 2024-06-04 10:56:26.936231
[0m10:56:26.936850 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7901c7070>]}
[0m10:56:26.937182 [info ] [Thread-1 (]: 88 of 90 OK created sql table model test.attr_myfirstfunnel_final_table ........ [[32mOK[0m in 0.12s]
[0m10:56:26.937505 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m10:56:26.939174 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.dataset_event_table
[0m10:56:26.939955 [info ] [Thread-2 (]: 89 of 90 START sql table model test.dataset_event_table ........................ [RUN]
[0m10:56:26.940518 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.dataset_event_table2
[0m10:56:26.941776 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.dataset_event_table'
[0m10:56:26.942614 [info ] [Thread-1 (]: 90 of 90 START sql table model test.dataset_event_table2 ....................... [RUN]
[0m10:56:26.943269 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.dataset_event_table)
[0m10:56:26.944345 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.dataset_event_table2'
[0m10:56:26.944917 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.dataset_event_table
[0m10:56:26.945215 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.dataset_event_table2)
[0m10:56:26.954383 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:26.955348 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.dataset_event_table2
[0m10:56:26.963835 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:26.966901 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.972093 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_final_table'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:26.973180 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.978229 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'full_events'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:26.983061 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:26.983963 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:26.991840 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.dataset_event_table2"
[0m10:56:27.001479 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.dataset_event_table"
[0m10:56:27.003916 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table2 (compile): 2024-06-04 10:56:26.957421 => 2024-06-04 10:56:27.003734
[0m10:56:27.004308 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.dataset_event_table2
[0m10:56:27.010095 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table (compile): 2024-06-04 10:56:26.945396 => 2024-06-04 10:56:27.009950
[0m10:56:27.010657 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.dataset_event_table
[0m10:56:27.011311 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

            

    
        create table test.dataset_event_table2__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table


   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
    )
        ...
[0m10:56:27.024584 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

            

    
        create table test.dataset_event_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table



   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
    )
        ...
[0m10:56:27.097008 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m10:56:27.100101 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'dataset_event_table2__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:27.105553 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:27.108484 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.dataset_event_table2"
[0m10:56:27.109430 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

  
    
    
        
        insert into test.dataset_event_table2__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "event_datetime", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "transactionId", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "YmClientHash", "qid", "AppProfileMatchingHash")
  -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table


   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
  ...
[0m10:56:27.141321 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.11 seconds
[0m10:56:27.144586 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'dataset_event_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m10:56:27.150061 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:27.153355 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.dataset_event_table"
[0m10:56:27.153964 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

  
    
    
        
        insert into test.dataset_event_table__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "__period_number", "__if_missed", "__priority", "__step", "qid", "event_datetime", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "transactionId", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "YmClientHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table



   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
  ...
[0m10:56:27.224230 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.11 seconds
[0m10:56:27.225509 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */
EXCHANGE TABLES test.dataset_event_table2__dbt_backup AND test.dataset_event_table2 
  
  ...
[0m10:56:27.230465 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:27.234921 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */
drop table if exists test.dataset_event_table2__dbt_backup 
  ...
[0m10:56:27.238582 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:27.239965 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table2 (execute): 2024-06-04 10:56:27.004568 => 2024-06-04 10:56:27.239901
[0m10:56:27.240617 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa790343100>]}
[0m10:56:27.241062 [info ] [Thread-1 (]: 90 of 90 OK created sql table model test.dataset_event_table2 .................. [[32mOK[0m in 0.30s]
[0m10:56:27.241493 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.dataset_event_table2
[0m10:56:27.361924 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.21 seconds
[0m10:56:27.363216 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */
EXCHANGE TABLES test.dataset_event_table__dbt_backup AND test.dataset_event_table 
  
  ...
[0m10:56:27.369432 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m10:56:27.374379 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */
drop table if exists test.dataset_event_table__dbt_backup 
  ...
[0m10:56:27.377987 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m10:56:27.379317 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table (execute): 2024-06-04 10:56:27.011583 => 2024-06-04 10:56:27.379260
[0m10:56:27.379840 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'dd0d5b65-f7d9-4a8d-b2dd-47c481a6cc3b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa791e5e980>]}
[0m10:56:27.380355 [info ] [Thread-2 (]: 89 of 90 OK created sql table model test.dataset_event_table ................... [[32mOK[0m in 0.44s]
[0m10:56:27.380656 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.dataset_event_table
[0m10:56:27.383451 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
[0m10:56:27.384052 [debug] [MainThread]: Connection 'master' was properly closed.
[0m10:56:27.384193 [debug] [MainThread]: Connection 'model.etlcraft_integration_tests.dataset_event_table2' was left open.
[0m10:56:27.384320 [debug] [MainThread]: On model.etlcraft_integration_tests.dataset_event_table2: Close
[0m10:56:27.384413 [debug] [MainThread]: Connection 'model.etlcraft_integration_tests.dataset_event_table' was left open.
[0m10:56:27.384512 [debug] [MainThread]: On model.etlcraft_integration_tests.dataset_event_table: Close
[0m10:56:27.384965 [info ] [MainThread]: 
[0m10:56:27.385222 [info ] [MainThread]: Finished running 19 view models, 27 incremental models, 44 table models in 0 hours 0 minutes and 15.09 seconds (15.09s).
[0m10:56:27.388018 [debug] [MainThread]: Command end result
[0m10:56:27.461470 [info ] [MainThread]: 
[0m10:56:27.462061 [info ] [MainThread]: [32mCompleted successfully[0m
[0m10:56:27.462458 [info ] [MainThread]: 
[0m10:56:27.462808 [info ] [MainThread]: Done. PASS=90 WARN=0 ERROR=0 SKIP=0 TOTAL=90
[0m10:56:27.463415 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a5674730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a5677520>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fa7a56d34f0>]}
[0m10:56:27.463851 [debug] [MainThread]: Flushing usage events


============================== 2024-06-06 11:34:08.690603 | ba012d5d-a239-4b84-a0c3-73f61e0299c9 ==============================
[0m11:34:08.690603 [info ] [MainThread]: Running with dbt=1.4.7
[0m11:34:08.693178 [debug] [MainThread]: running dbt with arguments {'write_json': True, 'use_colors': True, 'printer_width': 80, 'version_check': True, 'partial_parse': True, 'static_parser': True, 'profiles_dir': '/home/natalia/.dbt', 'send_anonymous_usage_stats': True, 'quiet': False, 'no_print': False, 'cache_selected_only': False, 'select': ['models/1_silos/1_normalize/+'], 'full_refresh': True, 'which': 'run', 'rpc_method': 'run', 'indirect_selection': 'eager'}
[0m11:34:08.693634 [debug] [MainThread]: Tracking: tracking
[0m11:34:08.701167 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd453ed4e80>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd453986620>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd4539865c0>]}
[0m11:34:08.736602 [debug] [MainThread]: checksum: f4f4cdde9b257b3a8e3791263c44f34b0bd0facc33ef1ba84a563bd63785ce73, vars: {}, profile: None, target: None, version: 1.4.7
[0m11:34:08.959005 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 3 files changed.
[0m11:34:08.961298 [debug] [MainThread]: Partial parsing: updated file: etlcraft://macros/other/zero_date.sql
[0m11:34:08.963398 [debug] [MainThread]: Partial parsing: updated file: etlcraft://macros/normalize/normalize.sql
[0m11:34:08.963982 [debug] [MainThread]: Partial parsing: updated file: etlcraft://macros/metadata/metadata.sql
[0m11:34:09.069655 [debug] [MainThread]: 1603: static parser failed on 7_dataset/dataset_event_table.sql
[0m11:34:09.097289 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 7_dataset/dataset_event_table.sql
[0m11:34:09.098598 [debug] [MainThread]: 1603: static parser failed on 7_dataset/dataset_event_table2.sql
[0m11:34:09.104062 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 7_dataset/dataset_event_table2.sql
[0m11:34:09.105130 [debug] [MainThread]: 1603: static parser failed on 5_full/full_datestat.sql
[0m11:34:09.135451 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 5_full/full_datestat.sql
[0m11:34:09.136525 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_datestat.sql
[0m11:34:09.149539 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_datestat.sql
[0m11:34:09.150675 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_datestat.sql
[0m11:34:09.197684 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_datestat.sql
[0m11:34:09.198756 [debug] [MainThread]: 1603: static parser failed on 6_attribution/9_final_table/attr_myfirstfunnel_final_table.sql
[0m11:34:09.205979 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/9_final_table/attr_myfirstfunnel_final_table.sql
[0m11:34:09.207040 [debug] [MainThread]: 1603: static parser failed on 6_attribution/8_model/attr_myfirstfunnel_model.sql
[0m11:34:09.220521 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/8_model/attr_myfirstfunnel_model.sql
[0m11:34:09.221632 [debug] [MainThread]: 1603: static parser failed on 6_attribution/9_final_table/attr_mysecondfunnel_final_table.sql
[0m11:34:09.225558 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/9_final_table/attr_mysecondfunnel_final_table.sql
[0m11:34:09.226800 [debug] [MainThread]: 1603: static parser failed on 6_attribution/8_model/attr_mysecondfunnel_model.sql
[0m11:34:09.232460 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/8_model/attr_mysecondfunnel_model.sql
[0m11:34:09.233506 [debug] [MainThread]: 1603: static parser failed on 6_attribution/7_join_to_attr_prepare_with_qid/attr_myfirstfunnel_join_to_attr_prepare_with_qid.sql
[0m11:34:09.245650 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/7_join_to_attr_prepare_with_qid/attr_myfirstfunnel_join_to_attr_prepare_with_qid.sql
[0m11:34:09.246731 [debug] [MainThread]: 1603: static parser failed on 6_attribution/6_create_missed_steps/attr_myfirstfunnel_create_missed_steps.sql
[0m11:34:09.252169 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/6_create_missed_steps/attr_myfirstfunnel_create_missed_steps.sql
[0m11:34:09.253202 [debug] [MainThread]: 1603: static parser failed on 6_attribution/5_calculate_period_number/attr_myfirstfunnel_calculate_period_number.sql
[0m11:34:09.258462 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/5_calculate_period_number/attr_myfirstfunnel_calculate_period_number.sql
[0m11:34:09.259552 [debug] [MainThread]: 1603: static parser failed on 6_attribution/4_find_new_period/attr_myfirstfunnel_find_new_period.sql
[0m11:34:09.269266 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/4_find_new_period/attr_myfirstfunnel_find_new_period.sql
[0m11:34:09.270324 [debug] [MainThread]: 1603: static parser failed on 6_attribution/3_add_row_number/attr_myfirstfunnel_add_row_number.sql
[0m11:34:09.276350 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/3_add_row_number/attr_myfirstfunnel_add_row_number.sql
[0m11:34:09.277400 [debug] [MainThread]: 1603: static parser failed on 6_attribution/2_create_events/attr_myfirstfunnel_create_events.sql
[0m11:34:09.287268 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/2_create_events/attr_myfirstfunnel_create_events.sql
[0m11:34:09.288406 [debug] [MainThread]: 1603: static parser failed on 6_attribution/1_prepare/attr_myfirstfunnel_prepare_with_qid.sql
[0m11:34:09.294014 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/1_prepare/attr_myfirstfunnel_prepare_with_qid.sql
[0m11:34:09.295124 [debug] [MainThread]: 1603: static parser failed on 6_attribution/7_join_to_attr_prepare_with_qid/attr_mysecondfunnel_join_to_attr_prepare_with_qid.sql
[0m11:34:09.301952 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/7_join_to_attr_prepare_with_qid/attr_mysecondfunnel_join_to_attr_prepare_with_qid.sql
[0m11:34:09.303018 [debug] [MainThread]: 1603: static parser failed on 6_attribution/6_create_missed_steps/attr_mysecondfunnel_create_missed_steps.sql
[0m11:34:09.306908 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/6_create_missed_steps/attr_mysecondfunnel_create_missed_steps.sql
[0m11:34:09.307978 [debug] [MainThread]: 1603: static parser failed on 6_attribution/5_calculate_period_number/attr_mysecondfunnel_calculate_period_number.sql
[0m11:34:09.311657 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/5_calculate_period_number/attr_mysecondfunnel_calculate_period_number.sql
[0m11:34:09.312735 [debug] [MainThread]: 1603: static parser failed on 6_attribution/4_find_new_period/attr_mysecondfunnel_find_new_period.sql
[0m11:34:09.318462 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/4_find_new_period/attr_mysecondfunnel_find_new_period.sql
[0m11:34:09.319620 [debug] [MainThread]: 1603: static parser failed on 6_attribution/3_add_row_number/attr_mysecondfunnel_add_row_number.sql
[0m11:34:09.325195 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/3_add_row_number/attr_mysecondfunnel_add_row_number.sql
[0m11:34:09.326423 [debug] [MainThread]: 1603: static parser failed on 6_attribution/2_create_events/attr_mysecondfunnel_create_events.sql
[0m11:34:09.384267 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/2_create_events/attr_mysecondfunnel_create_events.sql
[0m11:34:09.385887 [debug] [MainThread]: 1603: static parser failed on 6_attribution/1_prepare/attr_mysecondfunnel_prepare_with_qid.sql
[0m11:34:09.392185 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 6_attribution/1_prepare/attr_mysecondfunnel_prepare_with_qid.sql
[0m11:34:09.393749 [debug] [MainThread]: 1603: static parser failed on 5_full/full_events.sql
[0m11:34:09.405865 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 5_full/full_events.sql
[0m11:34:09.407512 [debug] [MainThread]: 1603: static parser failed on 4_graph/6_qid/graph_qid.sql
[0m11:34:09.427658 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/6_qid/graph_qid.sql
[0m11:34:09.429471 [debug] [MainThread]: 1603: static parser failed on 4_graph/5_glue/graph_glue.sql
[0m11:34:09.439318 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/5_glue/graph_glue.sql
[0m11:34:09.441092 [debug] [MainThread]: 1603: static parser failed on 4_graph/4_edge/graph_edge.sql
[0m11:34:09.451270 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/4_edge/graph_edge.sql
[0m11:34:09.452939 [debug] [MainThread]: 1603: static parser failed on 4_graph/3_unique/graph_unique.sql
[0m11:34:09.461093 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/3_unique/graph_unique.sql
[0m11:34:09.462849 [debug] [MainThread]: 1603: static parser failed on 4_graph/2_lookup/graph_lookup.sql
[0m11:34:09.471204 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/2_lookup/graph_lookup.sql
[0m11:34:09.472738 [debug] [MainThread]: 1603: static parser failed on 4_graph/1_tuples/graph_tuples.sql
[0m11:34:09.490746 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 4_graph/1_tuples/graph_tuples.sql
[0m11:34:09.492417 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_events.sql
[0m11:34:09.498394 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_events.sql
[0m11:34:09.499534 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_events.sql
[0m11:34:09.509610 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_events.sql
[0m11:34:09.510922 [debug] [MainThread]: 1603: static parser failed on 5_full/full_periodstat.sql
[0m11:34:09.518762 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 5_full/full_periodstat.sql
[0m11:34:09.519943 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_periodstat.sql
[0m11:34:09.524121 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_periodstat.sql
[0m11:34:09.525197 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_periodstat.sql
[0m11:34:09.532697 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_periodstat.sql
[0m11:34:09.533793 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_registry_appprofilematching.sql
[0m11:34:09.537831 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_registry_appprofilematching.sql
[0m11:34:09.538902 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_registry_appprofilematching.sql
[0m11:34:09.547355 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_registry_appprofilematching.sql
[0m11:34:09.548619 [debug] [MainThread]: 1603: static parser failed on 3_raw/link_registry_utmhashregistry.sql
[0m11:34:09.552563 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 3_raw/link_registry_utmhashregistry.sql
[0m11:34:09.553637 [debug] [MainThread]: 1603: static parser failed on 2_staging/3_hash/hash_registry_utmhashregistry.sql
[0m11:34:09.561180 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/3_hash/hash_registry_utmhashregistry.sql
[0m11:34:09.562347 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/adjust/incremental_adjust_events_default_cohorts.sql
[0m11:34:09.585246 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/adjust/incremental_adjust_events_default_cohorts.sql
[0m11:34:09.586334 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/adjust/normalize_adjust_events_default_cohorts.sql
[0m11:34:09.601425 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/adjust/normalize_adjust_events_default_cohorts.sql
[0m11:34:09.602514 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/adjust/incremental_adjust_events_default_event_metrics.sql
[0m11:34:09.607311 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/adjust/incremental_adjust_events_default_event_metrics.sql
[0m11:34:09.608860 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/adjust/normalize_adjust_events_default_event_metrics.sql
[0m11:34:09.613767 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/adjust/normalize_adjust_events_default_event_metrics.sql
[0m11:34:09.614840 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/adjust/incremental_adjust_events_default_network.sql
[0m11:34:09.619656 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/adjust/incremental_adjust_events_default_network.sql
[0m11:34:09.620836 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/adjust/normalize_adjust_events_default_network.sql
[0m11:34:09.625212 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/adjust/normalize_adjust_events_default_network.sql
[0m11:34:09.626322 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/adjust/incremental_adjust_registry_default_events.sql
[0m11:34:09.630781 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/adjust/incremental_adjust_registry_default_events.sql
[0m11:34:09.632023 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/adjust/normalize_adjust_registry_default_events.sql
[0m11:34:09.636266 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/adjust/normalize_adjust_registry_default_events.sql
[0m11:34:09.637350 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_events.sql
[0m11:34:09.647690 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_events.sql
[0m11:34:09.648917 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_appmetrica_events.sql
[0m11:34:09.701808 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_appmetrica_events.sql
[0m11:34:09.702936 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_deeplinks.sql
[0m11:34:09.708223 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_deeplinks.sql
[0m11:34:09.708523 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'experimental_parser', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd452bc33a0>]}
[0m11:34:09.710032 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_deeplinks.sql
[0m11:34:09.714545 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_deeplinks.sql
[0m11:34:09.715678 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_events.sql
[0m11:34:09.720443 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_events.sql
[0m11:34:09.721568 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/manual/normalize_appmetrica_events_default_events.sql
[0m11:34:09.727209 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/manual/normalize_appmetrica_events_default_events.sql
[0m11:34:09.728374 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_installations.sql
[0m11:34:09.733125 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_installations.sql
[0m11:34:09.734270 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_installations.sql
[0m11:34:09.738893 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_installations.sql
[0m11:34:09.739980 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_screen_view.sql
[0m11:34:09.744993 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_screen_view.sql
[0m11:34:09.746151 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/manual/normalize_appmetrica_events_default_screen_view.sql
[0m11:34:09.750921 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/manual/normalize_appmetrica_events_default_screen_view.sql
[0m11:34:09.752004 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_sessions_starts.sql
[0m11:34:09.758104 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_events_default_sessions_starts.sql
[0m11:34:09.759288 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_sessions_starts.sql
[0m11:34:09.763762 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/normalize_appmetrica_events_default_sessions_starts.sql
[0m11:34:09.765149 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_registry_appprofilematching.sql
[0m11:34:09.770509 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_registry_appprofilematching.sql
[0m11:34:09.771718 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_appmetrica_registry_appprofilematching.sql
[0m11:34:09.779156 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_appmetrica_registry_appprofilematching.sql
[0m11:34:09.780241 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/appmetrica/incremental_appmetrica_registry_default_profiles.sql
[0m11:34:09.784660 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/appmetrica/incremental_appmetrica_registry_default_profiles.sql
[0m11:34:09.785715 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/appmetrica/normalize_appmetrica_registry_default_profiles.sql
[0m11:34:09.790051 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/appmetrica/normalize_appmetrica_registry_default_profiles.sql
[0m11:34:09.791180 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_datestat.sql
[0m11:34:09.796556 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_datestat.sql
[0m11:34:09.797706 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_mt_datestat.sql
[0m11:34:09.810560 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_mt_datestat.sql
[0m11:34:09.811637 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/mytarget/incremental_mt_datestat_default_banners_statistics.sql
[0m11:34:09.816461 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/mytarget/incremental_mt_datestat_default_banners_statistics.sql
[0m11:34:09.817744 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/mytarget/normalize_mt_datestat_default_banners_statistics.sql
[0m11:34:09.822078 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/mytarget/normalize_mt_datestat_default_banners_statistics.sql
[0m11:34:09.823103 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/mytarget/incremental_mt_registry_default_banners.sql
[0m11:34:09.827303 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/mytarget/incremental_mt_registry_default_banners.sql
[0m11:34:09.828501 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/mytarget/normalize_mt_registry_default_banners.sql
[0m11:34:09.833437 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/mytarget/normalize_mt_registry_default_banners.sql
[0m11:34:09.834500 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/mytarget/incremental_mt_registry_default_campaigns.sql
[0m11:34:09.839061 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/mytarget/incremental_mt_registry_default_campaigns.sql
[0m11:34:09.840119 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/mytarget/normalize_mt_registry_default_campaigns.sql
[0m11:34:09.844077 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/mytarget/normalize_mt_registry_default_campaigns.sql
[0m11:34:09.845229 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_periodstat.sql
[0m11:34:09.849259 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_periodstat.sql
[0m11:34:09.850290 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_sheets_periodstat.sql
[0m11:34:09.858123 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_sheets_periodstat.sql
[0m11:34:09.859185 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/sheets/incremental_sheets_periodstat_default_planCosts.sql
[0m11:34:09.864826 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/sheets/incremental_sheets_periodstat_default_planCosts.sql
[0m11:34:09.865887 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/sheets/normalize_sheets_periodstat_default_planCosts.sql
[0m11:34:09.869914 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/sheets/normalize_sheets_periodstat_default_planCosts.sql
[0m11:34:09.870982 [debug] [MainThread]: 1603: static parser failed on 2_staging/2_combine/combine_registry_utmhashregistry.sql
[0m11:34:09.874906 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/2_combine/combine_registry_utmhashregistry.sql
[0m11:34:09.875987 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_utmcraft_registry_utmhashregistry.sql
[0m11:34:09.883515 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_utmcraft_registry_utmhashregistry.sql
[0m11:34:09.884689 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/utmcraft/incremental_utmcraft_registry_default_utmresult.sql
[0m11:34:09.889085 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/utmcraft/incremental_utmcraft_registry_default_utmresult.sql
[0m11:34:09.890142 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/utmcraft/normalize_utmcraft_registry_default_utmresult.sql
[0m11:34:09.894145 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/utmcraft/normalize_utmcraft_registry_default_utmresult.sql
[0m11:34:09.895195 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_vkads_datestat.sql
[0m11:34:09.906028 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_vkads_datestat.sql
[0m11:34:09.907116 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/vk_ads/incremental_vkads_datestat_default_ad_plans_statistics.sql
[0m11:34:09.911820 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/vk_ads/incremental_vkads_datestat_default_ad_plans_statistics.sql
[0m11:34:09.913023 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/vk_ads/normalize_vkads_datestat_default_ad_plans_statistics.sql
[0m11:34:09.917501 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/vk_ads/normalize_vkads_datestat_default_ad_plans_statistics.sql
[0m11:34:09.918776 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/vk_ads/incremental_vkads_periodstat_default_ad_plans.sql
[0m11:34:09.923186 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/vk_ads/incremental_vkads_periodstat_default_ad_plans.sql
[0m11:34:09.924318 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/vk_ads/normalize_vkads_periodstat_default_ad_plans.sql
[0m11:34:09.928646 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/vk_ads/normalize_vkads_periodstat_default_ad_plans.sql
[0m11:34:09.929699 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_yd_datestat.sql
[0m11:34:09.938780 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_yd_datestat.sql
[0m11:34:09.939901 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/yandex_direct/incremental_yd_datestat_default_custom_report.sql
[0m11:34:09.944772 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/yandex_direct/incremental_yd_datestat_default_custom_report.sql
[0m11:34:09.945912 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/yandex_direct/normalize_yd_datestat_default_custom_report.sql
[0m11:34:09.950345 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/yandex_direct/normalize_yd_datestat_default_custom_report.sql
[0m11:34:09.951454 [debug] [MainThread]: 1603: static parser failed on 2_staging/1_join/join_ym_events.sql
[0m11:34:09.960940 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 2_staging/1_join/join_ym_events.sql
[0m11:34:09.962102 [debug] [MainThread]: 1603: static parser failed on 1_silos/2_incremental/ym/incremental_ym_events_default_yandex_metrika_stream.sql
[0m11:34:09.967047 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/2_incremental/ym/incremental_ym_events_default_yandex_metrika_stream.sql
[0m11:34:09.968211 [debug] [MainThread]: 1603: static parser failed on 1_silos/1_normalize/ym/normalize_ym_events_default_yandex_metrika_stream.sql
[0m11:34:09.973592 [debug] [MainThread]: 1602: parser fallback to jinja rendering on 1_silos/1_normalize/ym/normalize_ym_events_default_yandex_metrika_stream.sql
[0m11:34:10.063925 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd452924e50>]}
[0m11:34:10.086390 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd454710310>]}
[0m11:34:10.086817 [info ] [MainThread]: Found 90 models, 8 tests, 0 snapshots, 0 analyses, 535 macros, 0 operations, 24 seed files, 0 sources, 0 exposures, 0 metrics
[0m11:34:10.087078 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd4531864d0>]}
[0m11:34:10.093272 [info ] [MainThread]: 
[0m11:34:10.094956 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
[0m11:34:10.099182 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_schemas'
[0m11:34:10.104389 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m11:34:11.292399 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_schemas: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "connection_name": "list_schemas"} */

    select name from system.databases
  ...
[0m11:34:11.296787 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.304075 [debug] [ThreadPool]: Acquiring new clickhouse connection 'list_None_test'
[0m11:34:11.304559 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_None_test)
[0m11:34:11.310599 [debug] [ThreadPool]: dbt_clickhouse adapter: On list_None_test: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "connection_name": "list_None_test"} */
select
      t.name as name,
      t.database as schema,
      if(engine not in ('MaterializedView', 'View'), 'table', 'view') as type,
      db.engine as db_engine
    from system.tables as t JOIN system.databases as db on t.database = db.name
    where schema = 'test'
  ...
[0m11:34:11.350522 [debug] [ThreadPool]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:11.360425 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd452aaca60>]}
[0m11:34:11.361315 [info ] [MainThread]: Concurrency: 2 threads (target='dev')
[0m11:34:11.361612 [info ] [MainThread]: 
[0m11:34:11.372352 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts
[0m11:34:11.372820 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics
[0m11:34:11.373467 [info ] [Thread-1 (]: 1 of 90 START sql view model test.normalize_adjust_events_default_cohorts ...... [RUN]
[0m11:34:11.376318 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts'
[0m11:34:11.376790 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts)
[0m11:34:11.377014 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts
[0m11:34:11.374882 [info ] [Thread-2 (]: 2 of 90 START sql view model test.normalize_adjust_events_default_event_metrics  [RUN]
[0m11:34:11.383598 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics'
[0m11:34:11.387065 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_adjust_default_cohorts$')        
...
[0m11:34:11.387390 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics
[0m11:34:11.395611 [debug] [Thread-2 (]: Opening a new connection, currently in state init
[0m11:34:11.434048 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m11:34:11.464519 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_adjust_default_cohorts'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:11.475812 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.497629 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"
[0m11:34:11.499887 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts (compile): 2024-06-06 11:34:11.377115 => 2024-06-06 11:34:11.499749
[0m11:34:11.500276 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts
[0m11:34:11.535017 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"
[0m11:34:11.540717 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */


  create view test.normalize_adjust_events_default_cohorts__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'country') AS country, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'event_name') AS event_name, 
        JSONExtractString(_airbyte_data, 'event_token') AS event_token, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'network') AS network, 
        JSONExtractString(_airbyte_data, 'period') AS period, 
        JSONExtractString(_airbyte_data, 'tracker_token') AS tracker_token,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_adjust_default_cohorts') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_adjust_default_cohorts
)

)
  )...
[0m11:34:11.560279 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:11.567954 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    drop table if exists test.normalize_adjust_events_default_cohorts__dbt_backup 
  
  ...
[0m11:34:11.571047 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.572258 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    rename table test.normalize_adjust_events_default_cohorts to test.normalize_adjust_events_default_cohorts__dbt_backup 
  
  ...
[0m11:34:11.573098 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_adjust_default_event_metrics$')        
...
[0m11:34:11.577627 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.580980 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    drop table if exists test.normalize_adjust_events_default_cohorts 
  
  ...
[0m11:34:11.583833 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.584924 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */

    rename table test.normalize_adjust_events_default_cohorts__dbt_tmp to test.normalize_adjust_events_default_cohorts 
  
  ...
[0m11:34:11.586050 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.590037 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_adjust_default_event_metrics'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:11.590818 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.606379 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:11.626549 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"
[0m11:34:11.627288 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts"} */
drop table if exists test.normalize_adjust_events_default_cohorts__dbt_backup 
  ...
[0m11:34:11.628708 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics (compile): 2024-06-06 11:34:11.389208 => 2024-06-06 11:34:11.628601
[0m11:34:11.629065 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics
[0m11:34:11.634085 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"
[0m11:34:11.635486 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.638014 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts (execute): 2024-06-06 11:34:11.500440 => 2024-06-06 11:34:11.637951
[0m11:34:11.638500 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */


  create view test.normalize_adjust_events_default_event_metrics__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'country') AS country, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'event_name') AS event_name, 
        JSONExtractString(_airbyte_data, 'event_token') AS event_token, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'network') AS network, 
        JSONExtractString(_airbyte_data, 'tracker_token') AS tracker_token,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_adjust_default_event_metrics') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_adjust_default_event_metrics
)

)
  )...
[0m11:34:11.639718 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f4f7820>]}
[0m11:34:11.641705 [info ] [Thread-1 (]: 1 of 90 OK created sql view model test.normalize_adjust_events_default_cohorts . [[32mOK[0m in 0.26s]
[0m11:34:11.643687 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_adjust_events_default_cohorts
[0m11:34:11.644159 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_adjust_events_default_network
[0m11:34:11.645097 [info ] [Thread-1 (]: 3 of 90 START sql view model test.normalize_adjust_events_default_network ...... [RUN]
[0m11:34:11.646311 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_adjust_events_default_network'
[0m11:34:11.646630 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_adjust_events_default_network)
[0m11:34:11.646878 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_adjust_events_default_network
[0m11:34:11.652796 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_adjust_default_network$')        
...
[0m11:34:11.654504 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.659270 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    drop table if exists test.normalize_adjust_events_default_event_metrics__dbt_backup 
  
  ...
[0m11:34:11.663151 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.664976 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    rename table test.normalize_adjust_events_default_event_metrics to test.normalize_adjust_events_default_event_metrics__dbt_backup 
  
  ...
[0m11:34:11.667467 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.668247 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.671704 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_adjust_default_network'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:11.676780 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    drop table if exists test.normalize_adjust_events_default_event_metrics 
  
  ...
[0m11:34:11.682637 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.683838 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */

    rename table test.normalize_adjust_events_default_event_metrics__dbt_tmp to test.normalize_adjust_events_default_event_metrics 
  
  ...
[0m11:34:11.685250 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.698852 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_adjust_events_default_network"
[0m11:34:11.699454 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:11.704082 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics"} */
drop table if exists test.normalize_adjust_events_default_event_metrics__dbt_backup 
  ...
[0m11:34:11.705382 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_network (compile): 2024-06-06 11:34:11.647050 => 2024-06-06 11:34:11.705211
[0m11:34:11.705756 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_adjust_events_default_network
[0m11:34:11.711202 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_adjust_events_default_network"
[0m11:34:11.712610 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.713870 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics (execute): 2024-06-06 11:34:11.629218 => 2024-06-06 11:34:11.713817
[0m11:34:11.714457 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */


  create view test.normalize_adjust_events_default_network__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'clicks') AS clicks, 
        JSONExtractString(_airbyte_data, 'country') AS country, 
        JSONExtractString(_airbyte_data, 'country_code') AS country_code, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'impressions') AS impressions, 
        JSONExtractString(_airbyte_data, 'installs') AS installs, 
        JSONExtractString(_airbyte_data, 'network') AS network, 
        JSONExtractString(_airbyte_data, 'rejected_installs') AS rejected_installs, 
        JSONExtractString(_airbyte_data, 'sessions') AS sessions,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_adjust_default_network') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_adjust_default_network
)

)
  )...
[0m11:34:11.715118 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f4f68c0>]}
[0m11:34:11.717043 [info ] [Thread-2 (]: 2 of 90 OK created sql view model test.normalize_adjust_events_default_event_metrics  [[32mOK[0m in 0.33s]
[0m11:34:11.718068 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_adjust_events_default_event_metrics
[0m11:34:11.718521 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_adjust_registry_default_events
[0m11:34:11.719015 [info ] [Thread-2 (]: 4 of 90 START sql view model test.normalize_adjust_registry_default_events ..... [RUN]
[0m11:34:11.720304 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_adjust_registry_default_events'
[0m11:34:11.720604 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_adjust_registry_default_events)
[0m11:34:11.720767 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_adjust_registry_default_events
[0m11:34:11.725810 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_adjust_default_events$')        
...
[0m11:34:11.729074 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.732377 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    drop table if exists test.normalize_adjust_events_default_network__dbt_backup 
  
  ...
[0m11:34:11.734298 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.739109 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_adjust_default_events'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:11.739944 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.743364 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    rename table test.normalize_adjust_events_default_network to test.normalize_adjust_events_default_network__dbt_backup 
  
  ...
[0m11:34:11.746748 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.750162 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    drop table if exists test.normalize_adjust_events_default_network 
  
  ...
[0m11:34:11.751375 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.762427 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"
[0m11:34:11.763559 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.765202 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */

    rename table test.normalize_adjust_events_default_network__dbt_tmp to test.normalize_adjust_events_default_network 
  
  ...
[0m11:34:11.766234 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_registry_default_events (compile): 2024-06-06 11:34:11.720859 => 2024-06-06 11:34:11.766068
[0m11:34:11.766862 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_adjust_registry_default_events
[0m11:34:11.771535 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"
[0m11:34:11.772754 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.777277 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_events_default_network"} */
drop table if exists test.normalize_adjust_events_default_network__dbt_backup 
  ...
[0m11:34:11.779350 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */


  create view test.normalize_adjust_registry_default_events__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'app_token') AS app_token, 
        JSONExtractString(_airbyte_data, 'description') AS description, 
        JSONExtractString(_airbyte_data, 'formatting') AS formatting, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'is_skad_event') AS is_skad_event, 
        JSONExtractString(_airbyte_data, 'name') AS name, 
        JSONExtractString(_airbyte_data, 'section') AS section, 
        JSONExtractString(_airbyte_data, 'short_name') AS short_name, 
        JSONExtractString(_airbyte_data, 'tokens') AS tokens,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_adjust_default_events') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_adjust_default_events
)

)
  )...
[0m11:34:11.783719 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.785121 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_events_default_network (execute): 2024-06-06 11:34:11.705898 => 2024-06-06 11:34:11.785036
[0m11:34:11.785965 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f4f6d10>]}
[0m11:34:11.786699 [info ] [Thread-1 (]: 3 of 90 OK created sql view model test.normalize_adjust_events_default_network . [[32mOK[0m in 0.14s]
[0m11:34:11.787315 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_adjust_events_default_network
[0m11:34:11.787913 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks
[0m11:34:11.789275 [info ] [Thread-1 (]: 5 of 90 START sql view model test.normalize_appmetrica_events_default_deeplinks  [RUN]
[0m11:34:11.790169 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks'
[0m11:34:11.790339 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks)
[0m11:34:11.790494 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks
[0m11:34:11.795190 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_deeplinks$')        
...
[0m11:34:11.796192 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:11.800966 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    drop table if exists test.normalize_adjust_registry_default_events__dbt_backup 
  
  ...
[0m11:34:11.805918 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.807022 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    rename table test.normalize_adjust_registry_default_events to test.normalize_adjust_registry_default_events__dbt_backup 
  
  ...
[0m11:34:11.808909 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.813069 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_deeplinks'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:11.813976 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.820192 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    drop table if exists test.normalize_adjust_registry_default_events 
  
  ...
[0m11:34:11.821659 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.833399 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.835621 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"
[0m11:34:11.837424 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */

    rename table test.normalize_adjust_registry_default_events__dbt_tmp to test.normalize_adjust_registry_default_events 
  
  ...
[0m11:34:11.839637 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks (compile): 2024-06-06 11:34:11.790588 => 2024-06-06 11:34:11.839470
[0m11:34:11.840023 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks
[0m11:34:11.846928 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"
[0m11:34:11.847855 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.852441 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_adjust_registry_default_events"} */
drop table if exists test.normalize_adjust_registry_default_events__dbt_backup 
  ...
[0m11:34:11.853729 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */


  create view test.normalize_appmetrica_events_default_deeplinks__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'deeplink_url_parameters') AS deeplink_url_parameters, 
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS event_receive_datetime, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'publisher_name') AS publisher_name,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_deeplinks') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_deeplinks
)

)
  )...
[0m11:34:11.856736 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.858930 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_adjust_registry_default_events (execute): 2024-06-06 11:34:11.767083 => 2024-06-06 11:34:11.858834
[0m11:34:11.859966 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d17bdc0>]}
[0m11:34:11.860692 [info ] [Thread-2 (]: 4 of 90 OK created sql view model test.normalize_adjust_registry_default_events  [[32mOK[0m in 0.14s]
[0m11:34:11.861309 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_adjust_registry_default_events
[0m11:34:11.861672 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_events
[0m11:34:11.862841 [info ] [Thread-2 (]: 6 of 90 START sql view model test.normalize_appmetrica_events_default_events ... [RUN]
[0m11:34:11.864174 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_events'
[0m11:34:11.864551 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_events)
[0m11:34:11.864948 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_events
[0m11:34:11.869289 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_events$')        
...
[0m11:34:11.870793 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:11.875685 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    drop table if exists test.normalize_appmetrica_events_default_deeplinks__dbt_backup 
  
  ...
[0m11:34:11.877965 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.881373 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_events'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:11.882165 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.884495 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    rename table test.normalize_appmetrica_events_default_deeplinks to test.normalize_appmetrica_events_default_deeplinks__dbt_backup 
  
  ...
[0m11:34:11.887996 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.890988 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    drop table if exists test.normalize_appmetrica_events_default_deeplinks 
  
  ...
[0m11:34:11.892105 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.904305 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.911380 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */

    rename table test.normalize_appmetrica_events_default_deeplinks__dbt_tmp to test.normalize_appmetrica_events_default_deeplinks 
  
  ...
[0m11:34:11.912451 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"
[0m11:34:11.914930 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_events (compile): 2024-06-06 11:34:11.865094 => 2024-06-06 11:34:11.914755
[0m11:34:11.915354 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_events
[0m11:34:11.920435 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"
[0m11:34:11.921314 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.925650 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks"} */
drop table if exists test.normalize_appmetrica_events_default_deeplinks__dbt_backup 
  ...
[0m11:34:11.927207 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */


  create view test.normalize_appmetrica_events_default_events__dbt_tmp 
  
  as (
    SELECT * FROM (
SELECT
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'app_version_name') AS app_version_name, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'event_json') AS event_json, 
        JSONExtractString(_airbyte_data, 'event_name') AS event_name, 
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS event_receive_datetime, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'installation_id') AS installation_id, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'session_id') AS session_id,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_events') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_events
)

)
)
WHERE event_name != 'screen_view'
  )...
[0m11:34:11.931106 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.932746 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks (execute): 2024-06-06 11:34:11.840133 => 2024-06-06 11:34:11.932641
[0m11:34:11.933904 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0de3e0>]}
[0m11:34:11.934430 [info ] [Thread-1 (]: 5 of 90 OK created sql view model test.normalize_appmetrica_events_default_deeplinks  [[32mOK[0m in 0.14s]
[0m11:34:11.934902 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_deeplinks
[0m11:34:11.935282 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations
[0m11:34:11.936294 [info ] [Thread-1 (]: 7 of 90 START sql view model test.normalize_appmetrica_events_default_installations  [RUN]
[0m11:34:11.937415 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations'
[0m11:34:11.937862 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations)
[0m11:34:11.938087 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations
[0m11:34:11.942521 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_installations$')        
...
[0m11:34:11.953038 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.953612 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:11.958163 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_installations'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:11.961549 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    drop table if exists test.normalize_appmetrica_events_default_events__dbt_backup 
  
  ...
[0m11:34:11.967293 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:11.968687 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    rename table test.normalize_appmetrica_events_default_events to test.normalize_appmetrica_events_default_events__dbt_backup 
  
  ...
[0m11:34:11.970479 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.976716 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.985266 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    drop table if exists test.normalize_appmetrica_events_default_events 
  
  ...
[0m11:34:11.990435 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"
[0m11:34:11.991329 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations (compile): 2024-06-06 11:34:11.938192 => 2024-06-06 11:34:11.991183
[0m11:34:11.991788 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations
[0m11:34:11.997023 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"
[0m11:34:11.998230 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:11.999436 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */

    rename table test.normalize_appmetrica_events_default_events__dbt_tmp to test.normalize_appmetrica_events_default_events 
  
  ...
[0m11:34:12.000859 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */


  create view test.normalize_appmetrica_events_default_installations__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'install_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'click_datetime') AS click_datetime, 
        JSONExtractString(_airbyte_data, 'click_url_parameters') AS click_url_parameters, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'install_receive_datetime') AS install_receive_datetime, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'is_reinstallation') AS is_reinstallation, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'publisher_name') AS publisher_name,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_installations') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_installations
)

)
  )...
[0m11:34:12.003709 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.007951 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_events"} */
drop table if exists test.normalize_appmetrica_events_default_events__dbt_backup 
  ...
[0m11:34:12.012279 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.013876 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_events (execute): 2024-06-06 11:34:11.915562 => 2024-06-06 11:34:12.013809
[0m11:34:12.014661 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d117a00>]}
[0m11:34:12.015257 [info ] [Thread-2 (]: 6 of 90 OK created sql view model test.normalize_appmetrica_events_default_events  [[32mOK[0m in 0.15s]
[0m11:34:12.015618 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_events
[0m11:34:12.015971 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view
[0m11:34:12.017774 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:12.016961 [info ] [Thread-2 (]: 8 of 90 START sql view model test.normalize_appmetrica_events_default_screen_view  [RUN]
[0m11:34:12.022543 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    drop table if exists test.normalize_appmetrica_events_default_installations__dbt_backup 
  
  ...
[0m11:34:12.023370 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view'
[0m11:34:12.024653 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view)
[0m11:34:12.025439 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view
[0m11:34:12.031078 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_events$')        
...
[0m11:34:12.031997 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.034339 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    rename table test.normalize_appmetrica_events_default_installations to test.normalize_appmetrica_events_default_installations__dbt_backup 
  
  ...
[0m11:34:12.037158 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.040431 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    drop table if exists test.normalize_appmetrica_events_default_installations 
  
  ...
[0m11:34:12.045395 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.047007 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */

    rename table test.normalize_appmetrica_events_default_installations__dbt_tmp to test.normalize_appmetrica_events_default_installations 
  
  ...
[0m11:34:12.048773 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:12.053069 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_events'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.053772 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.059552 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations"} */
drop table if exists test.normalize_appmetrica_events_default_installations__dbt_backup 
  ...
[0m11:34:12.060852 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.072965 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.079922 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"
[0m11:34:12.081648 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view (compile): 2024-06-06 11:34:12.025718 => 2024-06-06 11:34:12.081594
[0m11:34:12.081160 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations (execute): 2024-06-06 11:34:11.992029 => 2024-06-06 11:34:12.081102
[0m11:34:12.081881 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view
[0m11:34:12.082993 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cec7f40>]}
[0m11:34:12.087789 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"
[0m11:34:12.088810 [info ] [Thread-1 (]: 7 of 90 OK created sql view model test.normalize_appmetrica_events_default_installations  [[32mOK[0m in 0.15s]
[0m11:34:12.089898 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_installations
[0m11:34:12.090305 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts
[0m11:34:12.091553 [info ] [Thread-1 (]: 9 of 90 START sql view model test.normalize_appmetrica_events_default_sessions_starts  [RUN]
[0m11:34:12.092209 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */


  create view test.normalize_appmetrica_events_default_screen_view__dbt_tmp 
  
  as (
    WITH events_are_screen_view AS (SELECT *, 1 AS screen_view FROM (
SELECT
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'app_version_name') AS app_version_name, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'event_json') AS event_json, 
        JSONExtractString(_airbyte_data, 'event_name') AS event_name, 
        JSONExtractString(_airbyte_data, 'event_receive_datetime') AS event_receive_datetime, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'installation_id') AS installation_id, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'session_id') AS session_id,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_events') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_events
)

)
)
WHERE event_name = 'screen_view')


SELECT
    toDate(__date) AS __date,
    toDateTime(event_receive_datetime) AS event_receive_datetime,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    '3101143' AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    city AS cityName,
    os_name AS osName,
    profile_id AS crmUserId,
    __table_name,
    __emitted_at,
    session_id,
    sum(screen_view) AS screen_view
FROM events_are_screen_view
GROUP BY 
    __date,
    event_receive_datetime,
    mobileAdsId,
    accountName,
    appmetricaDeviceId,
    cityName,
    osName,
    crmUserId,
    __table_name,
    __emitted_at,
    session_id
  )...
[0m11:34:12.093460 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts'
[0m11:34:12.095185 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts)
[0m11:34:12.095610 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts
[0m11:34:12.174569 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m11:34:12.177490 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_sessions_starts$')        
...
[0m11:34:12.181245 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    drop table if exists test.normalize_appmetrica_events_default_screen_view__dbt_backup 
  
  ...
[0m11:34:12.185684 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.186755 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    rename table test.normalize_appmetrica_events_default_screen_view to test.normalize_appmetrica_events_default_screen_view__dbt_backup 
  
  ...
[0m11:34:12.189097 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.192445 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_sessions_starts'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.193710 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.196663 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    drop table if exists test.normalize_appmetrica_events_default_screen_view 
  
  ...
[0m11:34:12.199682 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.201014 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */

    rename table test.normalize_appmetrica_events_default_screen_view__dbt_tmp to test.normalize_appmetrica_events_default_screen_view 
  
  ...
[0m11:34:12.202141 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.208527 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.214285 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"
[0m11:34:12.219086 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view"} */
drop table if exists test.normalize_appmetrica_events_default_screen_view__dbt_backup 
  ...
[0m11:34:12.221821 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts (compile): 2024-06-06 11:34:12.095784 => 2024-06-06 11:34:12.221654
[0m11:34:12.222351 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts
[0m11:34:12.228899 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"
[0m11:34:12.229653 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.231522 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view (execute): 2024-06-06 11:34:12.083435 => 2024-06-06 11:34:12.231448
[0m11:34:12.232375 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d13b730>]}
[0m11:34:12.233787 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */


  create view test.normalize_appmetrica_events_default_sessions_starts__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'session_start_receive_datetime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'google_aid') AS google_aid, 
        JSONExtractString(_airbyte_data, 'installation_id') AS installation_id, 
        JSONExtractString(_airbyte_data, 'ios_ifa') AS ios_ifa, 
        JSONExtractString(_airbyte_data, 'os_name') AS os_name, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id, 
        JSONExtractString(_airbyte_data, 'session_start_receive_datetime') AS session_start_receive_datetime,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_sessions_starts') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_sessions_starts
)

)
  )...
[0m11:34:12.233388 [info ] [Thread-2 (]: 8 of 90 OK created sql view model test.normalize_appmetrica_events_default_screen_view  [[32mOK[0m in 0.21s]
[0m11:34:12.235088 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_screen_view
[0m11:34:12.235553 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles
[0m11:34:12.236215 [info ] [Thread-2 (]: 10 of 90 START sql view model test.normalize_appmetrica_registry_default_profiles  [RUN]
[0m11:34:12.237122 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles'
[0m11:34:12.238128 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles)
[0m11:34:12.239045 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles
[0m11:34:12.244200 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_appmetrica_default_profiles$')        
...
[0m11:34:12.247272 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.250667 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    drop table if exists test.normalize_appmetrica_events_default_sessions_starts__dbt_backup 
  
  ...
[0m11:34:12.251359 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.255246 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_appmetrica_default_profiles'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.258586 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.260130 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    rename table test.normalize_appmetrica_events_default_sessions_starts to test.normalize_appmetrica_events_default_sessions_starts__dbt_backup 
  
  ...
[0m11:34:12.261567 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.267338 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"
[0m11:34:12.268667 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.272181 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    drop table if exists test.normalize_appmetrica_events_default_sessions_starts 
  
  ...
[0m11:34:12.273327 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles (compile): 2024-06-06 11:34:12.239383 => 2024-06-06 11:34:12.273169
[0m11:34:12.274032 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles
[0m11:34:12.279401 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"
[0m11:34:12.280387 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.282787 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */

    rename table test.normalize_appmetrica_events_default_sessions_starts__dbt_tmp to test.normalize_appmetrica_events_default_sessions_starts 
  
  ...
[0m11:34:12.284024 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */


  create view test.normalize_appmetrica_registry_default_profiles__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'appmetrica_device_id') AS appmetrica_device_id, 
        JSONExtractString(_airbyte_data, 'city') AS city, 
        JSONExtractString(_airbyte_data, 'profile_id') AS profile_id,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_appmetrica_default_profiles') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_appmetrica_default_profiles
)

)
  )...
[0m11:34:12.286788 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.292703 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts"} */
drop table if exists test.normalize_appmetrica_events_default_sessions_starts__dbt_backup 
  ...
[0m11:34:12.294739 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.298649 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    drop table if exists test.normalize_appmetrica_registry_default_profiles__dbt_backup 
  
  ...
[0m11:34:12.300025 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.301465 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts (execute): 2024-06-06 11:34:12.222615 => 2024-06-06 11:34:12.301402
[0m11:34:12.302223 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd452927c70>]}
[0m11:34:12.303687 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.302926 [info ] [Thread-1 (]: 9 of 90 OK created sql view model test.normalize_appmetrica_events_default_sessions_starts  [[32mOK[0m in 0.21s]
[0m11:34:12.305025 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    rename table test.normalize_appmetrica_registry_default_profiles to test.normalize_appmetrica_registry_default_profiles__dbt_backup 
  
  ...
[0m11:34:12.305605 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_events_default_sessions_starts
[0m11:34:12.307123 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics
[0m11:34:12.307493 [info ] [Thread-1 (]: 11 of 90 START sql view model test.normalize_mt_datestat_default_banners_statistics  [RUN]
[0m11:34:12.308193 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics'
[0m11:34:12.309667 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics)
[0m11:34:12.310275 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics
[0m11:34:12.314513 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_mt_default_banners_statistics$')        
...
[0m11:34:12.315562 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.320262 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    drop table if exists test.normalize_appmetrica_registry_default_profiles 
  
  ...
[0m11:34:12.323213 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.324777 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */

    rename table test.normalize_appmetrica_registry_default_profiles__dbt_tmp to test.normalize_appmetrica_registry_default_profiles 
  
  ...
[0m11:34:12.327484 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.331301 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_mt_default_banners_statistics'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.331980 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.336893 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles"} */
drop table if exists test.normalize_appmetrica_registry_default_profiles__dbt_backup 
  ...
[0m11:34:12.342811 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.344160 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles (execute): 2024-06-06 11:34:12.274801 => 2024-06-06 11:34:12.344102
[0m11:34:12.344942 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.346283 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d13b8b0>]}
[0m11:34:12.353687 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"
[0m11:34:12.354420 [info ] [Thread-2 (]: 10 of 90 OK created sql view model test.normalize_appmetrica_registry_default_profiles  [[32mOK[0m in 0.11s]
[0m11:34:12.355518 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_appmetrica_registry_default_profiles
[0m11:34:12.356251 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m11:34:12.357791 [info ] [Thread-2 (]: 12 of 90 START sql view model test.normalize_mt_registry_default_banners ....... [RUN]
[0m11:34:12.359301 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_mt_registry_default_banners'
[0m11:34:12.359740 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics (compile): 2024-06-06 11:34:12.310504 => 2024-06-06 11:34:12.359639
[0m11:34:12.360101 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_mt_registry_default_banners)
[0m11:34:12.360515 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics
[0m11:34:12.360879 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m11:34:12.369449 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"
[0m11:34:12.373203 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_mt_default_banners$')        
...
[0m11:34:12.376378 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */


  create view test.normalize_mt_datestat_default_banners_statistics__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'banner_id') AS banner_id, 
        JSONExtractString(_airbyte_data, 'base') AS base, 
        JSONExtractString(_airbyte_data, 'date') AS date,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_mt_default_banners_statistics') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_mt_default_banners_statistics
)

)
  )...
[0m11:34:12.388536 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.394385 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_mt_default_banners'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.395464 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:12.400557 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    drop table if exists test.normalize_mt_datestat_default_banners_statistics__dbt_backup 
  
  ...
[0m11:34:12.405183 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.405938 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.407143 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    rename table test.normalize_mt_datestat_default_banners_statistics to test.normalize_mt_datestat_default_banners_statistics__dbt_backup 
  
  ...
[0m11:34:12.418657 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"
[0m11:34:12.419384 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_banners (compile): 2024-06-06 11:34:12.369774 => 2024-06-06 11:34:12.419281
[0m11:34:12.419723 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m11:34:12.424192 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"
[0m11:34:12.425199 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.429088 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    drop table if exists test.normalize_mt_datestat_default_banners_statistics 
  
  ...
[0m11:34:12.430309 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */


  create view test.normalize_mt_registry_default_banners__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'campaign_id') AS campaign_id, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'textblocks') AS textblocks, 
        JSONExtractString(_airbyte_data, 'urls') AS urls,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_mt_default_banners') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_mt_default_banners
)

)
  )...
[0m11:34:12.433458 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.434859 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */

    rename table test.normalize_mt_datestat_default_banners_statistics__dbt_tmp to test.normalize_mt_datestat_default_banners_statistics 
  
  ...
[0m11:34:12.438866 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.445296 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics"} */
drop table if exists test.normalize_mt_datestat_default_banners_statistics__dbt_backup 
  ...
[0m11:34:12.446275 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.450301 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    drop table if exists test.normalize_mt_registry_default_banners__dbt_backup 
  
  ...
[0m11:34:12.454203 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.454756 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.456297 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics (execute): 2024-06-06 11:34:12.361084 => 2024-06-06 11:34:12.456241
[0m11:34:12.458333 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    rename table test.normalize_mt_registry_default_banners to test.normalize_mt_registry_default_banners__dbt_backup 
  
  ...
[0m11:34:12.459302 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd4538f0b20>]}
[0m11:34:12.460985 [info ] [Thread-1 (]: 11 of 90 OK created sql view model test.normalize_mt_datestat_default_banners_statistics  [[32mOK[0m in 0.15s]
[0m11:34:12.462283 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_mt_datestat_default_banners_statistics
[0m11:34:12.463367 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.463946 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m11:34:12.467192 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    drop table if exists test.normalize_mt_registry_default_banners 
  
  ...
[0m11:34:12.468102 [info ] [Thread-1 (]: 13 of 90 START sql view model test.normalize_mt_registry_default_campaigns ..... [RUN]
[0m11:34:12.470418 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns'
[0m11:34:12.471138 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns)
[0m11:34:12.471464 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m11:34:12.475451 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_mt_default_campaigns$')        
...
[0m11:34:12.476263 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.479282 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */

    rename table test.normalize_mt_registry_default_banners__dbt_tmp to test.normalize_mt_registry_default_banners 
  
  ...
[0m11:34:12.482604 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.487202 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_banners"} */
drop table if exists test.normalize_mt_registry_default_banners__dbt_backup 
  ...
[0m11:34:12.488975 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.493014 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_mt_default_campaigns'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.497179 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.498996 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_banners (execute): 2024-06-06 11:34:12.419882 => 2024-06-06 11:34:12.498905
[0m11:34:12.499865 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d1048b0>]}
[0m11:34:12.501690 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.500824 [info ] [Thread-2 (]: 12 of 90 OK created sql view model test.normalize_mt_registry_default_banners .. [[32mOK[0m in 0.14s]
[0m11:34:12.506828 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"
[0m11:34:12.507895 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_mt_registry_default_banners
[0m11:34:12.508926 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m11:34:12.510556 [info ] [Thread-2 (]: 14 of 90 START sql view model test.normalize_sheets_periodstat_default_planCosts  [RUN]
[0m11:34:12.511523 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns (compile): 2024-06-06 11:34:12.471625 => 2024-06-06 11:34:12.511371
[0m11:34:12.512315 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts'
[0m11:34:12.513226 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m11:34:12.513894 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts)
[0m11:34:12.521101 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"
[0m11:34:12.521712 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m11:34:12.526542 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_sheets_default_planCosts$')        
...
[0m11:34:12.528427 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */


  create view test.normalize_mt_registry_default_campaigns__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'name') AS name,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_mt_default_campaigns') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_mt_default_campaigns
)

)
  )...
[0m11:34:12.534081 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.537511 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_sheets_default_planCosts'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.541393 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.545921 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    drop table if exists test.normalize_mt_registry_default_campaigns__dbt_backup 
  
  ...
[0m11:34:12.547803 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.553733 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"
[0m11:34:12.554539 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.556684 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    rename table test.normalize_mt_registry_default_campaigns to test.normalize_mt_registry_default_campaigns__dbt_backup 
  
  ...
[0m11:34:12.558111 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts (compile): 2024-06-06 11:34:12.522201 => 2024-06-06 11:34:12.557836
[0m11:34:12.559345 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m11:34:12.565723 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"
[0m11:34:12.566507 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.571207 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    drop table if exists test.normalize_mt_registry_default_campaigns 
  
  ...
[0m11:34:12.572479 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */


  create view test.normalize_sheets_periodstat_default_planCosts__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'Period_start') AS __date, 
        JSONExtractString(_airbyte_data, 'Campaign') AS Campaign, 
        JSONExtractString(_airbyte_data, 'Cost') AS Cost, 
        JSONExtractString(_airbyte_data, 'Period_end') AS Period_end, 
        JSONExtractString(_airbyte_data, 'Period_start') AS Period_start,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_sheets_default_planCosts') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_sheets_default_planCosts
)

)
  )...
[0m11:34:12.576934 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.578181 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */

    rename table test.normalize_mt_registry_default_campaigns__dbt_tmp to test.normalize_mt_registry_default_campaigns 
  
  ...
[0m11:34:12.582732 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.586813 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns"} */
drop table if exists test.normalize_mt_registry_default_campaigns__dbt_backup 
  ...
[0m11:34:12.587492 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.592109 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    drop table if exists test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m11:34:12.594056 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.596179 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns (execute): 2024-06-06 11:34:12.514442 => 2024-06-06 11:34:12.596097
[0m11:34:12.597361 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.598404 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d120970>]}
[0m11:34:12.599482 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    rename table test.normalize_sheets_periodstat_default_planCosts to test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m11:34:12.600232 [info ] [Thread-1 (]: 13 of 90 OK created sql view model test.normalize_mt_registry_default_campaigns  [[32mOK[0m in 0.13s]
[0m11:34:12.602220 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_mt_registry_default_campaigns
[0m11:34:12.603639 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m11:34:12.604680 [info ] [Thread-1 (]: 15 of 90 START sql view model test.normalize_utmcraft_registry_default_utmresult  [RUN]
[0m11:34:12.605451 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult'
[0m11:34:12.606139 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.606382 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult)
[0m11:34:12.610048 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    drop table if exists test.normalize_sheets_periodstat_default_planCosts 
  
  ...
[0m11:34:12.610718 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m11:34:12.616917 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_utmcraft_default_utmresult$')        
...
[0m11:34:12.618492 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.619920 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */

    rename table test.normalize_sheets_periodstat_default_planCosts__dbt_tmp to test.normalize_sheets_periodstat_default_planCosts 
  
  ...
[0m11:34:12.622897 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.627939 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts"} */
drop table if exists test.normalize_sheets_periodstat_default_planCosts__dbt_backup 
  ...
[0m11:34:12.628733 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.634667 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_utmcraft_default_utmresult'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.638110 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.639858 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts (execute): 2024-06-06 11:34:12.560014 => 2024-06-06 11:34:12.639802
[0m11:34:12.640498 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d04e5c0>]}
[0m11:34:12.641220 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.642235 [info ] [Thread-2 (]: 14 of 90 OK created sql view model test.normalize_sheets_periodstat_default_planCosts  [[32mOK[0m in 0.13s]
[0m11:34:12.651967 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"
[0m11:34:12.653027 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_sheets_periodstat_default_planCosts
[0m11:34:12.653751 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m11:34:12.654699 [info ] [Thread-2 (]: 16 of 90 START sql view model test.normalize_vkads_datestat_default_ad_plans_statistics  [RUN]
[0m11:34:12.655571 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult (compile): 2024-06-06 11:34:12.612021 => 2024-06-06 11:34:12.655418
[0m11:34:12.656313 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics'
[0m11:34:12.657242 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m11:34:12.657919 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics)
[0m11:34:12.663713 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"
[0m11:34:12.664136 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m11:34:12.669309 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_vkads_default_ad_plans_statistics$')        
...
[0m11:34:12.670510 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */


  create view test.normalize_utmcraft_registry_default_utmresult__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'created_at') AS created_at, 
        JSONExtractString(_airbyte_data, 'created_by_id') AS created_by_id, 
        JSONExtractString(_airbyte_data, 'data') AS data, 
        JSONExtractString(_airbyte_data, 'form_id') AS form_id, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'updated_at') AS updated_at, 
        JSONExtractString(_airbyte_data, 'updated_by_id') AS updated_by_id, 
        JSONExtractString(_airbyte_data, 'utm_hashcode') AS utm_hashcode,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_utmcraft_default_utmresult') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_utmcraft_default_utmresult
)

)
  )...
[0m11:34:12.678856 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.683195 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_vkads_default_ad_plans_statistics'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.683981 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.688241 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    drop table if exists test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  
  ...
[0m11:34:12.691069 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.692439 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    rename table test.normalize_utmcraft_registry_default_utmresult to test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  
  ...
[0m11:34:12.693297 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.702141 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.712754 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"
[0m11:34:12.716415 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    drop table if exists test.normalize_utmcraft_registry_default_utmresult 
  
  ...
[0m11:34:12.718646 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics (compile): 2024-06-06 11:34:12.664545 => 2024-06-06 11:34:12.718404
[0m11:34:12.719243 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m11:34:12.724740 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"
[0m11:34:12.725668 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.727889 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */

    rename table test.normalize_utmcraft_registry_default_utmresult__dbt_tmp to test.normalize_utmcraft_registry_default_utmresult 
  
  ...
[0m11:34:12.729301 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */


  create view test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'date') AS __date, 
        JSONExtractString(_airbyte_data, 'ad_offers') AS ad_offers, 
        JSONExtractString(_airbyte_data, 'ad_plan_id') AS ad_plan_id, 
        JSONExtractString(_airbyte_data, 'base') AS base, 
        JSONExtractString(_airbyte_data, 'carousel') AS carousel, 
        JSONExtractString(_airbyte_data, 'date') AS date, 
        JSONExtractString(_airbyte_data, 'events') AS events, 
        JSONExtractString(_airbyte_data, 'moat') AS moat, 
        JSONExtractString(_airbyte_data, 'playable') AS playable, 
        JSONExtractString(_airbyte_data, 'romi') AS romi, 
        JSONExtractString(_airbyte_data, 'social_network') AS social_network, 
        JSONExtractString(_airbyte_data, 'tps') AS tps, 
        JSONExtractString(_airbyte_data, 'uniques') AS uniques, 
        JSONExtractString(_airbyte_data, 'uniques_video') AS uniques_video, 
        JSONExtractString(_airbyte_data, 'video') AS video,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_vkads_default_ad_plans_statistics') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_vkads_default_ad_plans_statistics
)

)
  )...
[0m11:34:12.731430 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.735525 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult"} */
drop table if exists test.normalize_utmcraft_registry_default_utmresult__dbt_backup 
  ...
[0m11:34:12.739090 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.740976 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult (execute): 2024-06-06 11:34:12.658392 => 2024-06-06 11:34:12.740839
[0m11:34:12.741946 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd452aad1e0>]}
[0m11:34:12.742518 [info ] [Thread-1 (]: 15 of 90 OK created sql view model test.normalize_utmcraft_registry_default_utmresult  [[32mOK[0m in 0.14s]
[0m11:34:12.742971 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_utmcraft_registry_default_utmresult
[0m11:34:12.743344 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m11:34:12.743760 [info ] [Thread-1 (]: 17 of 90 START sql view model test.normalize_vkads_periodstat_default_ad_plans . [RUN]
[0m11:34:12.744873 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans'
[0m11:34:12.745224 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans)
[0m11:34:12.745435 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m11:34:12.749871 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_vkads_default_ad_plans$')        
...
[0m11:34:12.750816 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:12.755449 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m11:34:12.759294 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.760599 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    rename table test.normalize_vkads_datestat_default_ad_plans_statistics to test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m11:34:12.761872 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.765705 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_vkads_default_ad_plans'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.766619 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.772000 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics 
  
  ...
[0m11:34:12.773971 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.780512 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.790480 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"
[0m11:34:12.792779 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */

    rename table test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_tmp to test.normalize_vkads_datestat_default_ad_plans_statistics 
  
  ...
[0m11:34:12.794381 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans (compile): 2024-06-06 11:34:12.745607 => 2024-06-06 11:34:12.794237
[0m11:34:12.794740 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m11:34:12.800105 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"
[0m11:34:12.800809 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.805717 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics"} */
drop table if exists test.normalize_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  ...
[0m11:34:12.806822 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */


  create view test.normalize_vkads_periodstat_default_ad_plans__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'ad_groups') AS ad_groups, 
        JSONExtractString(_airbyte_data, 'autobidding_mode') AS autobidding_mode, 
        JSONExtractString(_airbyte_data, 'budget_limit') AS budget_limit, 
        JSONExtractString(_airbyte_data, 'budget_limit_day') AS budget_limit_day, 
        JSONExtractString(_airbyte_data, 'created') AS created, 
        JSONExtractString(_airbyte_data, 'date_end') AS date_end, 
        JSONExtractString(_airbyte_data, 'date_start') AS date_start, 
        JSONExtractString(_airbyte_data, 'id') AS id, 
        JSONExtractString(_airbyte_data, 'max_price') AS max_price, 
        JSONExtractString(_airbyte_data, 'name') AS name, 
        JSONExtractString(_airbyte_data, 'objective') AS objective, 
        JSONExtractString(_airbyte_data, 'priced_goal') AS priced_goal, 
        JSONExtractString(_airbyte_data, 'pricelist_id') AS pricelist_id, 
        JSONExtractString(_airbyte_data, 'status') AS status, 
        JSONExtractString(_airbyte_data, 'updated') AS updated, 
        JSONExtractString(_airbyte_data, 'vkads_status') AS vkads_status,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_vkads_default_ad_plans') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_vkads_default_ad_plans
)

)
  )...
[0m11:34:12.810823 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.812977 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics (execute): 2024-06-06 11:34:12.719484 => 2024-06-06 11:34:12.812893
[0m11:34:12.814105 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d142650>]}
[0m11:34:12.815341 [info ] [Thread-2 (]: 16 of 90 OK created sql view model test.normalize_vkads_datestat_default_ad_plans_statistics  [[32mOK[0m in 0.16s]
[0m11:34:12.815913 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_vkads_datestat_default_ad_plans_statistics
[0m11:34:12.816374 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m11:34:12.816803 [info ] [Thread-2 (]: 18 of 90 START sql view model test.normalize_yd_datestat_default_custom_report . [RUN]
[0m11:34:12.818270 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report'
[0m11:34:12.818624 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report)
[0m11:34:12.818843 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m11:34:12.823640 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_yd_default_custom_report$')        
...
[0m11:34:12.825319 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:12.829864 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    drop table if exists test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  
  ...
[0m11:34:12.832904 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.833515 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.836919 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_yd_default_custom_report'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.838353 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    rename table test.normalize_vkads_periodstat_default_ad_plans to test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  
  ...
[0m11:34:12.843396 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.844282 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.849208 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    drop table if exists test.normalize_vkads_periodstat_default_ad_plans 
  
  ...
[0m11:34:12.861229 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"
[0m11:34:12.863965 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report (compile): 2024-06-06 11:34:12.819092 => 2024-06-06 11:34:12.863770
[0m11:34:12.864414 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m11:34:12.869024 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"
[0m11:34:12.869979 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.872418 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */

    rename table test.normalize_vkads_periodstat_default_ad_plans__dbt_tmp to test.normalize_vkads_periodstat_default_ad_plans 
  
  ...
[0m11:34:12.873578 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */


  create view test.normalize_yd_datestat_default_custom_report__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'Date') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'AdId') AS AdId, 
        JSONExtractString(_airbyte_data, 'CampaignId') AS CampaignId, 
        JSONExtractString(_airbyte_data, 'CampaignName') AS CampaignName, 
        JSONExtractString(_airbyte_data, 'CampaignType') AS CampaignType, 
        JSONExtractString(_airbyte_data, 'Clicks') AS Clicks, 
        JSONExtractString(_airbyte_data, 'Cost') AS Cost, 
        JSONExtractString(_airbyte_data, 'Date') AS Date, 
        JSONExtractString(_airbyte_data, 'Impressions') AS Impressions,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_yd_default_custom_report') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_yd_default_custom_report
)

)
  )...
[0m11:34:12.876184 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.881192 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans"} */
drop table if exists test.normalize_vkads_periodstat_default_ad_plans__dbt_backup 
  ...
[0m11:34:12.884356 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.885810 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans (execute): 2024-06-06 11:34:12.794894 => 2024-06-06 11:34:12.885731
[0m11:34:12.886677 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0849d0>]}
[0m11:34:12.887251 [info ] [Thread-1 (]: 17 of 90 OK created sql view model test.normalize_vkads_periodstat_default_ad_plans  [[32mOK[0m in 0.14s]
[0m11:34:12.887777 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_vkads_periodstat_default_ad_plans
[0m11:34:12.888149 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m11:34:12.888843 [info ] [Thread-1 (]: 19 of 90 START sql view model test.normalize_ym_events_default_yandex_metrika_stream  [RUN]
[0m11:34:12.890135 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream'
[0m11:34:12.890510 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream)
[0m11:34:12.890786 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m11:34:12.895561 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'airbyte_internal')
        and match(table_name, '[^_]+_[^_]+_raw__stream_ym_default_yandex_metrika_stream$')        
...
[0m11:34:12.896641 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:12.902519 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    drop table if exists test.normalize_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m11:34:12.905312 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.911414 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.911974 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'datacraft_clientname_raw__stream_ym_default_yandex_metrika_stream'
    
      and database = 'airbyte_internal'
    
    order by position
  ...
[0m11:34:12.913494 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    rename table test.normalize_yd_datestat_default_custom_report to test.normalize_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m11:34:12.917836 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:12.920671 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    drop table if exists test.normalize_yd_datestat_default_custom_report 
  
  ...
[0m11:34:12.921434 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.934342 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.935763 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */

    rename table test.normalize_yd_datestat_default_custom_report__dbt_tmp to test.normalize_yd_datestat_default_custom_report 
  
  ...
[0m11:34:12.953220 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"
[0m11:34:12.954266 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.958608 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report"} */
drop table if exists test.normalize_yd_datestat_default_custom_report__dbt_backup 
  ...
[0m11:34:12.960207 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream (compile): 2024-06-06 11:34:12.890928 => 2024-06-06 11:34:12.959979
[0m11:34:12.960964 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m11:34:12.966514 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"
[0m11:34:12.968034 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.969796 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report (execute): 2024-06-06 11:34:12.864542 => 2024-06-06 11:34:12.969739
[0m11:34:12.970401 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f4f77f0>]}
[0m11:34:12.970809 [info ] [Thread-2 (]: 18 of 90 OK created sql view model test.normalize_yd_datestat_default_custom_report  [[32mOK[0m in 0.15s]
[0m11:34:12.971185 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.normalize_yd_datestat_default_custom_report
[0m11:34:12.971450 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m11:34:12.972484 [info ] [Thread-2 (]: 20 of 90 START sql incremental model test.incremental_adjust_events_default_cohorts  [RUN]
[0m11:34:12.973136 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */


  create view test.normalize_ym_events_default_yandex_metrika_stream__dbt_tmp 
  
  as (
    SELECT
        JSONExtractString(_airbyte_data, 'ym:s:dateTime') AS __date, 
        JSONExtractString(_airbyte_data, '__clientName') AS __clientName, 
        JSONExtractString(_airbyte_data, '__productName') AS __productName, 
        JSONExtractString(_airbyte_data, 'ym:s:clientID') AS ymsclientID, 
        JSONExtractString(_airbyte_data, 'ym:s:dateTime') AS ymsdateTime, 
        JSONExtractString(_airbyte_data, 'ym:s:goalsID') AS ymsgoalsID, 
        JSONExtractString(_airbyte_data, 'ym:s:goalsOrder') AS ymsgoalsOrder, 
        JSONExtractString(_airbyte_data, 'ym:s:lastAdvEngine') AS ymslastAdvEngine, 
        JSONExtractString(_airbyte_data, 'ym:s:lastReferalSource') AS ymslastReferalSource, 
        JSONExtractString(_airbyte_data, 'ym:s:lastSearchEngine') AS ymslastSearchEngine, 
        JSONExtractString(_airbyte_data, 'ym:s:lastTrafficSource') AS ymslastTrafficSource, 
        JSONExtractString(_airbyte_data, 'ym:s:pageViews') AS ymspageViews, 
        JSONExtractString(_airbyte_data, 'ym:s:parsedParamsKey1') AS ymsparsedParamsKey1, 
        JSONExtractString(_airbyte_data, 'ym:s:parsedParamsKey2') AS ymsparsedParamsKey2, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseCoupon') AS ymspurchaseCoupon, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseID') AS ymspurchaseID, 
        JSONExtractString(_airbyte_data, 'ym:s:purchaseRevenue') AS ymspurchaseRevenue, 
        JSONExtractString(_airbyte_data, 'ym:s:regionCity') AS ymsregionCity, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMCampaign') AS ymsUTMCampaign, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMContent') AS ymsUTMContent, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMMedium') AS ymsUTMMedium, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMSource') AS ymsUTMSource, 
        JSONExtractString(_airbyte_data, 'ym:s:UTMTerm') AS ymsUTMTerm, 
        JSONExtractString(_airbyte_data, 'ym:s:visitID') AS ymsvisitID,
        toLowCardinality(_dbt_source_relation) AS __table_name,  
        toDateTime32(substring(toString(_airbyte_extracted_at), 1, 19)) AS __emitted_at, 
        NOW() AS __normalized_at
FROM (

(
SELECT
        toLowCardinality('datacraft_clientname_raw__stream_ym_default_yandex_metrika_stream') AS _dbt_source_relation,
        toString("_airbyte_raw_id") AS _airbyte_raw_id,
        toString("_airbyte_data") AS _airbyte_data,
        toString("_airbyte_extracted_at") AS _airbyte_extracted_at
FROM airbyte_internal.datacraft_clientname_raw__stream_ym_default_yandex_metrika_stream
)

)
  )...
[0m11:34:12.974511 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts'
[0m11:34:12.976495 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts)
[0m11:34:12.977425 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m11:34:12.981976 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_cohorts')        
...
[0m11:34:12.989084 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.989688 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:12.993658 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_cohorts'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.113569 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    drop table if exists test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m11:34:13.118536 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.120339 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    rename table test.normalize_ym_events_default_yandex_metrika_stream to test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m11:34:13.121768 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.125728 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"
[0m11:34:13.126833 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.131206 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    drop table if exists test.normalize_ym_events_default_yandex_metrika_stream 
  
  ...
[0m11:34:13.132860 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts (compile): 2024-06-06 11:34:12.977851 => 2024-06-06 11:34:13.132614
[0m11:34:13.133372 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m11:34:13.145462 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.152982 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */

    rename table test.normalize_ym_events_default_yandex_metrika_stream__dbt_tmp to test.normalize_ym_events_default_yandex_metrika_stream 
  
  ...
[0m11:34:13.161033 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.166188 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream"} */
drop table if exists test.normalize_ym_events_default_yandex_metrika_stream__dbt_backup 
  ...
[0m11:34:13.180676 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.182286 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream (execute): 2024-06-06 11:34:12.961265 => 2024-06-06 11:34:13.182209
[0m11:34:13.188628 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cdf6770>]}
[0m11:34:13.199631 [info ] [Thread-1 (]: 19 of 90 OK created sql view model test.normalize_ym_events_default_yandex_metrika_stream  [[32mOK[0m in 0.30s]
[0m11:34:13.211934 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.normalize_ym_events_default_yandex_metrika_stream
[0m11:34:13.213290 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

            

    
        create table test.incremental_adjust_events_default_cohorts__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_cohorts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("period") as period ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_cohorts
        )

        )

    )
        ...
[0m11:34:13.213848 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m11:34:13.215563 [info ] [Thread-1 (]: 21 of 90 START sql incremental model test.incremental_adjust_events_default_event_metrics  [RUN]
[0m11:34:13.217003 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics'
[0m11:34:13.217402 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics)
[0m11:34:13.218021 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m11:34:13.225198 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_event_metrics')        
...
[0m11:34:13.233250 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.237079 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_event_metrics'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.241644 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:13.246727 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_cohorts__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.247431 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.252122 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"
[0m11:34:13.252964 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics (compile): 2024-06-06 11:34:13.218240 => 2024-06-06 11:34:13.252765
[0m11:34:13.253562 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m11:34:13.259067 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

            

    
        create table test.incremental_adjust_events_default_event_metrics__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_event_metrics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_event_metrics
        )

        )

    )
        ...
[0m11:34:13.260970 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.262865 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"
[0m11:34:13.264834 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_cohorts__dbt_tmp ("__date", "country", "date", "event_name", "event_token", "events", "network", "period", "tracker_token", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_cohorts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("period") as period ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_cohorts
        )

        )

  
    ...
[0m11:34:13.283591 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:13.286518 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_event_metrics__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.291587 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.293321 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"
[0m11:34:13.293874 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_event_metrics__dbt_tmp ("__date", "country", "date", "event_name", "event_token", "events", "network", "tracker_token", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_event_metrics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("country") as country ,
                            toString("date") as date ,
                            toString("event_name") as event_name ,
                            toString("event_token") as event_token ,
                            toString("events") as events ,
                            toString("network") as network ,
                            toString("tracker_token") as tracker_token ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_event_metrics
        )

        )

  
    ...
[0m11:34:13.299066 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:13.302062 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    drop table if exists test.incremental_adjust_events_default_cohorts__dbt_backup 
  
  ...
[0m11:34:13.305034 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.306224 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */

    rename table test.incremental_adjust_events_default_cohorts__dbt_tmp to test.incremental_adjust_events_default_cohorts__dbt_backup 
  
  ...
[0m11:34:13.311278 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.315962 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */
EXCHANGE TABLES test.incremental_adjust_events_default_cohorts__dbt_backup AND test.incremental_adjust_events_default_cohorts 
  
  ...
[0m11:34:13.317731 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:13.321296 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    drop table if exists test.incremental_adjust_events_default_event_metrics__dbt_backup 
  
  ...
[0m11:34:13.322197 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.330699 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts"} */
drop table if exists test.incremental_adjust_events_default_cohorts__dbt_backup 
  ...
[0m11:34:13.332069 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.333497 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */

    rename table test.incremental_adjust_events_default_event_metrics__dbt_tmp to test.incremental_adjust_events_default_event_metrics__dbt_backup 
  
  ...
[0m11:34:13.336830 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.338306 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts (execute): 2024-06-06 11:34:13.133605 => 2024-06-06 11:34:13.338239
[0m11:34:13.338915 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.339563 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cdfcdf0>]}
[0m11:34:13.340967 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */
EXCHANGE TABLES test.incremental_adjust_events_default_event_metrics__dbt_backup AND test.incremental_adjust_events_default_event_metrics 
  
  ...
[0m11:34:13.341867 [info ] [Thread-2 (]: 20 of 90 OK created sql incremental model test.incremental_adjust_events_default_cohorts  [[32mOK[0m in 0.37s]
[0m11:34:13.343459 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_cohorts
[0m11:34:13.344659 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m11:34:13.345081 [info ] [Thread-2 (]: 22 of 90 START sql incremental model test.incremental_adjust_events_default_network  [RUN]
[0m11:34:13.346119 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_events_default_network'
[0m11:34:13.346451 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_events_default_network)
[0m11:34:13.346710 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m11:34:13.350659 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_events_default_network')        
...
[0m11:34:13.351487 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.357873 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics"} */
drop table if exists test.incremental_adjust_events_default_event_metrics__dbt_backup 
  ...
[0m11:34:13.358778 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.363757 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'normalize_adjust_events_default_network'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.365066 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.366672 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics (execute): 2024-06-06 11:34:13.253826 => 2024-06-06 11:34:13.366601
[0m11:34:13.367737 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cdf6da0>]}
[0m11:34:13.368366 [info ] [Thread-1 (]: 21 of 90 OK created sql incremental model test.incremental_adjust_events_default_event_metrics  [[32mOK[0m in 0.15s]
[0m11:34:13.368874 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_event_metrics
[0m11:34:13.369335 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m11:34:13.371270 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.370438 [info ] [Thread-1 (]: 23 of 90 START sql table model test.incremental_adjust_registry_default_events . [RUN]
[0m11:34:13.374015 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_events_default_network"
[0m11:34:13.375543 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_adjust_registry_default_events'
[0m11:34:13.376488 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_adjust_registry_default_events)
[0m11:34:13.377199 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m11:34:13.383121 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_network (compile): 2024-06-06 11:34:13.346843 => 2024-06-06 11:34:13.382972
[0m11:34:13.384813 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_adjust_registry_default_events')        
...
[0m11:34:13.385234 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m11:34:13.392664 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

            

    
        create table test.incremental_adjust_events_default_network__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_events_default_network

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("clicks") as clicks ,
                            toString("country") as country ,
                            toString("country_code") as country_code ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("impressions") as impressions ,
                            toString("installs") as installs ,
                            toString("network") as network ,
                            toString("rejected_installs") as rejected_installs ,
                            toString("sessions") as sessions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_network
        )

        )

    )
        ...
[0m11:34:13.398876 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.402372 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

    select name, type from system.columns where table = 'normalize_adjust_registry_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.409167 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.412200 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"
[0m11:34:13.413044 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_registry_default_events (compile): 2024-06-06 11:34:13.377651 => 2024-06-06 11:34:13.412867
[0m11:34:13.413503 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m11:34:13.428220 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

            

    
        create table test.incremental_adjust_registry_default_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_adjust_registry_default_events


SELECT *
FROM (

        (
            select
                            toString("app_token") as app_token ,
                            toString("description") as description ,
                            toString("formatting") as formatting ,
                            toString("id") as id ,
                            toString("is_skad_event") as is_skad_event ,
                            toString("name") as name ,
                            toString("section") as section ,
                            toString("short_name") as short_name ,
                            toString("tokens") as tokens ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_registry_default_events
        )

        )

    )
        ...
[0m11:34:13.430108 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:13.433610 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    select name, type from system.columns where table = 'incremental_adjust_events_default_network__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.441028 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.443378 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_events_default_network"
[0m11:34:13.444021 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

        
  
    
    
        
        insert into test.incremental_adjust_events_default_network__dbt_tmp ("__date", "clicks", "country", "country_code", "date", "events", "impressions", "installs", "network", "rejected_installs", "sessions", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_events_default_network

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("clicks") as clicks ,
                            toString("country") as country ,
                            toString("country_code") as country_code ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("impressions") as impressions ,
                            toString("installs") as installs ,
                            toString("network") as network ,
                            toString("rejected_installs") as rejected_installs ,
                            toString("sessions") as sessions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_events_default_network
        )

        )

  
    ...
[0m11:34:13.452385 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:13.455392 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

    select name, type from system.columns where table = 'incremental_adjust_registry_default_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.462421 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.465230 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"
[0m11:34:13.466161 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:13.470274 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    drop table if exists test.incremental_adjust_events_default_network__dbt_backup 
  
  ...
[0m11:34:13.471472 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */

  
    
    
        
        insert into test.incremental_adjust_registry_default_events__dbt_backup ("app_token", "description", "formatting", "id", "is_skad_event", "name", "section", "short_name", "tokens", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_adjust_registry_default_events


SELECT *
FROM (

        (
            select
                            toString("app_token") as app_token ,
                            toString("description") as description ,
                            toString("formatting") as formatting ,
                            toString("id") as id ,
                            toString("is_skad_event") as is_skad_event ,
                            toString("name") as name ,
                            toString("section") as section ,
                            toString("short_name") as short_name ,
                            toString("tokens") as tokens ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_adjust_registry_default_events
        )

        )

  ...
[0m11:34:13.474803 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.476046 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */

    rename table test.incremental_adjust_events_default_network__dbt_tmp to test.incremental_adjust_events_default_network__dbt_backup 
  
  ...
[0m11:34:13.480590 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.482084 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */
EXCHANGE TABLES test.incremental_adjust_events_default_network__dbt_backup AND test.incremental_adjust_events_default_network 
  
  ...
[0m11:34:13.483730 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.485047 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */
EXCHANGE TABLES test.incremental_adjust_registry_default_events__dbt_backup AND test.incremental_adjust_registry_default_events 
  
  ...
[0m11:34:13.486469 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.492053 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_events_default_network: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_events_default_network"} */
drop table if exists test.incremental_adjust_events_default_network__dbt_backup 
  ...
[0m11:34:13.492703 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.498182 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_adjust_registry_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_adjust_registry_default_events"} */
drop table if exists test.incremental_adjust_registry_default_events__dbt_backup 
  ...
[0m11:34:13.502311 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.502924 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.504100 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_events_default_network (execute): 2024-06-06 11:34:13.386600 => 2024-06-06 11:34:13.504040
[0m11:34:13.505379 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_adjust_registry_default_events (execute): 2024-06-06 11:34:13.413651 => 2024-06-06 11:34:13.505319
[0m11:34:13.506129 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d056950>]}
[0m11:34:13.506964 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cfc2170>]}
[0m11:34:13.508026 [info ] [Thread-2 (]: 22 of 90 OK created sql incremental model test.incremental_adjust_events_default_network  [[32mOK[0m in 0.16s]
[0m11:34:13.508794 [info ] [Thread-1 (]: 23 of 90 OK created sql table model test.incremental_adjust_registry_default_events  [[32mOK[0m in 0.13s]
[0m11:34:13.509527 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_events_default_network
[0m11:34:13.509942 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_adjust_registry_default_events
[0m11:34:13.510464 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m11:34:13.511235 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m11:34:13.512091 [info ] [Thread-2 (]: 24 of 90 START sql incremental model test.incremental_appmetrica_events_default_deeplinks  [RUN]
[0m11:34:13.512913 [info ] [Thread-1 (]: 25 of 90 START sql incremental model test.incremental_appmetrica_events_default_events  [RUN]
[0m11:34:13.513882 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks'
[0m11:34:13.514724 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_events'
[0m11:34:13.515104 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks)
[0m11:34:13.515353 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_events)
[0m11:34:13.515746 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m11:34:13.516233 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m11:34:13.520765 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_deeplinks')        
...
[0m11:34:13.525487 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_events')        
...
[0m11:34:13.532830 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.537495 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.538871 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.543475 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.544398 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.549538 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"
[0m11:34:13.550340 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.553210 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"
[0m11:34:13.553846 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_events (compile): 2024-06-06 11:34:13.521218 => 2024-06-06 11:34:13.553759
[0m11:34:13.554156 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m11:34:13.554420 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks (compile): 2024-06-06 11:34:13.516638 => 2024-06-06 11:34:13.554361
[0m11:34:13.560300 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

            

    
        create table test.incremental_appmetrica_events_default_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_events

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("app_version_name") as app_version_name ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("event_json") as event_json ,
                            toString("event_name") as event_name ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_id") as session_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_events
        )

        )

    )
        ...
[0m11:34:13.560717 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m11:34:13.566512 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

            

    
        create table test.incremental_appmetrica_events_default_deeplinks__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_deeplinks

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("deeplink_url_parameters") as deeplink_url_parameters ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_deeplinks
        )

        )

    )
        ...
[0m11:34:13.584721 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:13.587885 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.590918 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:13.594505 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:13.595259 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.598136 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"
[0m11:34:13.599444 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_deeplinks__dbt_tmp ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "deeplink_url_parameters", "event_receive_datetime", "google_aid", "ios_ifa", "os_name", "profile_id", "publisher_name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_deeplinks

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("deeplink_url_parameters") as deeplink_url_parameters ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_deeplinks
        )

        )

  
    ...
[0m11:34:13.601840 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.603468 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"
[0m11:34:13.604146 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_events__dbt_tmp ("__date", "__clientName", "__productName", "app_version_name", "appmetrica_device_id", "city", "event_json", "event_name", "event_receive_datetime", "google_aid", "installation_id", "ios_ifa", "os_name", "profile_id", "session_id", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_events

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("app_version_name") as app_version_name ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("event_json") as event_json ,
                            toString("event_name") as event_name ,
                            toString("event_receive_datetime") as event_receive_datetime ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_id") as session_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_events
        )

        )

  
    ...
[0m11:34:13.615160 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:13.619773 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    drop table if exists test.incremental_appmetrica_events_default_deeplinks__dbt_backup 
  
  ...
[0m11:34:13.622374 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.623604 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */

    rename table test.incremental_appmetrica_events_default_deeplinks__dbt_tmp to test.incremental_appmetrica_events_default_deeplinks__dbt_backup 
  
  ...
[0m11:34:13.627379 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.628657 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_deeplinks__dbt_backup AND test.incremental_appmetrica_events_default_deeplinks 
  
  ...
[0m11:34:13.632392 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.636797 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks"} */
drop table if exists test.incremental_appmetrica_events_default_deeplinks__dbt_backup 
  ...
[0m11:34:13.637833 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:13.641692 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    drop table if exists test.incremental_appmetrica_events_default_events__dbt_backup 
  
  ...
[0m11:34:13.645088 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:13.645833 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.647005 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks (execute): 2024-06-06 11:34:13.561508 => 2024-06-06 11:34:13.646946
[0m11:34:13.648789 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */

    rename table test.incremental_appmetrica_events_default_events__dbt_tmp to test.incremental_appmetrica_events_default_events__dbt_backup 
  
  ...
[0m11:34:13.649881 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d042590>]}
[0m11:34:13.655262 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.656598 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_events__dbt_backup AND test.incremental_appmetrica_events_default_events 
  
  ...
[0m11:34:13.661478 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.665498 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_events"} */
drop table if exists test.incremental_appmetrica_events_default_events__dbt_backup 
  ...
[0m11:34:13.669419 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:13.670892 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_events (execute): 2024-06-06 11:34:13.554638 => 2024-06-06 11:34:13.670838
[0m11:34:13.671382 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cfd65c0>]}
[0m11:34:14.528664 [info ] [Thread-2 (]: 24 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_deeplinks  [[32mOK[0m in 0.14s]
[0m11:34:14.529489 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_deeplinks
[0m11:34:14.530015 [info ] [Thread-1 (]: 25 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_events  [[32mOK[0m in 0.16s]
[0m11:34:14.530700 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m11:34:14.531482 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_events
[0m11:34:14.531931 [info ] [Thread-2 (]: 26 of 90 START sql incremental model test.incremental_appmetrica_events_default_installations  [RUN]
[0m11:34:14.532844 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m11:34:14.533708 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations'
[0m11:34:14.534378 [info ] [Thread-1 (]: 27 of 90 START sql incremental model test.incremental_appmetrica_events_default_screen_view  [RUN]
[0m11:34:14.534762 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations)
[0m11:34:14.535476 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view'
[0m11:34:14.536333 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m11:34:14.537244 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view)
[0m11:34:14.543379 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m11:34:14.544099 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_installations')        
...
[0m11:34:14.550575 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_screen_view')        
...
[0m11:34:14.558847 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.563484 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.568542 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.571419 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"
[0m11:34:14.572405 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:14.576625 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.578281 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations (compile): 2024-06-06 11:34:14.537924 => 2024-06-06 11:34:14.578140
[0m11:34:14.578668 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m11:34:14.584616 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

            

    
        create table test.incremental_appmetrica_events_default_installations__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_installations

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("click_datetime") as click_datetime ,
                            toString("click_url_parameters") as click_url_parameters ,
                            toString("google_aid") as google_aid ,
                            toString("install_receive_datetime") as install_receive_datetime ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("is_reinstallation") as is_reinstallation ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_installations
        )

        )

    )
        ...
[0m11:34:14.585458 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.588752 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"
[0m11:34:14.589581 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view (compile): 2024-06-06 11:34:14.544458 => 2024-06-06 11:34:14.589471
[0m11:34:14.589864 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m11:34:14.596067 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

            

    
        create table test.incremental_appmetrica_events_default_screen_view__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_screen_view

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toDateTime("event_receive_datetime") as event_receive_datetime ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("cityName") as cityName ,
                            toString("osName") as osName ,
                            toString("crmUserId") as crmUserId ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("session_id") as session_id ,
                            toUInt64("screen_view") as screen_view 

            from test.normalize_appmetrica_events_default_screen_view
        )

        )

    )
        ...
[0m11:34:14.608172 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:14.611463 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.616238 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.617950 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"
[0m11:34:14.618477 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_installations__dbt_tmp ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "click_datetime", "click_url_parameters", "google_aid", "install_receive_datetime", "ios_ifa", "is_reinstallation", "os_name", "profile_id", "publisher_name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_installations

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("click_datetime") as click_datetime ,
                            toString("click_url_parameters") as click_url_parameters ,
                            toString("google_aid") as google_aid ,
                            toString("install_receive_datetime") as install_receive_datetime ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("is_reinstallation") as is_reinstallation ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("publisher_name") as publisher_name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_installations
        )

        )

  
    ...
[0m11:34:14.625191 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:14.629332 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.631809 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.635132 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    drop table if exists test.incremental_appmetrica_events_default_installations__dbt_backup 
  
  ...
[0m11:34:14.636500 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.638117 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"
[0m11:34:14.639058 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_screen_view__dbt_tmp ("__date", "event_receive_datetime", "mobileAdsId", "accountName", "appmetricaDeviceId", "cityName", "osName", "crmUserId", "__table_name", "__emitted_at", "session_id", "screen_view")
  -- depends_on: test.normalize_appmetrica_events_default_screen_view

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toDateTime("event_receive_datetime") as event_receive_datetime ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("cityName") as cityName ,
                            toString("osName") as osName ,
                            toString("crmUserId") as crmUserId ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("session_id") as session_id ,
                            toUInt64("screen_view") as screen_view 

            from test.normalize_appmetrica_events_default_screen_view
        )

        )

  
    ...
[0m11:34:14.641090 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.642334 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */

    rename table test.incremental_appmetrica_events_default_installations__dbt_tmp to test.incremental_appmetrica_events_default_installations__dbt_backup 
  
  ...
[0m11:34:14.646232 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.647997 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_installations__dbt_backup AND test.incremental_appmetrica_events_default_installations 
  
  ...
[0m11:34:14.651998 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.656605 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations"} */
drop table if exists test.incremental_appmetrica_events_default_installations__dbt_backup 
  ...
[0m11:34:14.660382 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.661639 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations (execute): 2024-06-06 11:34:14.578865 => 2024-06-06 11:34:14.661580
[0m11:34:14.662208 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf2ab00>]}
[0m11:34:14.662616 [info ] [Thread-2 (]: 26 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_installations  [[32mOK[0m in 0.13s]
[0m11:34:14.662990 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_installations
[0m11:34:14.663346 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m11:34:14.663837 [info ] [Thread-2 (]: 28 of 90 START sql incremental model test.incremental_appmetrica_events_default_sessions_starts  [RUN]
[0m11:34:14.664603 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts'
[0m11:34:14.665153 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts)
[0m11:34:14.665487 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m11:34:14.670883 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_events_default_sessions_starts')        
...
[0m11:34:14.679363 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.682659 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'normalize_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.689160 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.692206 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"
[0m11:34:14.692943 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts (compile): 2024-06-06 11:34:14.665601 => 2024-06-06 11:34:14.692803
[0m11:34:14.693700 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m11:34:14.702411 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

            

    
        create table test.incremental_appmetrica_events_default_sessions_starts__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_events_default_sessions_starts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_start_receive_datetime") as session_start_receive_datetime ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_sessions_starts
        )

        )

    )
        ...
[0m11:34:14.704020 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m11:34:14.709315 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    drop table if exists test.incremental_appmetrica_events_default_screen_view__dbt_backup 
  
  ...
[0m11:34:14.714304 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.715912 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */

    rename table test.incremental_appmetrica_events_default_screen_view__dbt_tmp to test.incremental_appmetrica_events_default_screen_view__dbt_backup 
  
  ...
[0m11:34:14.719858 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.721073 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_screen_view__dbt_backup AND test.incremental_appmetrica_events_default_screen_view 
  
  ...
[0m11:34:14.726997 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.732874 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view"} */
drop table if exists test.incremental_appmetrica_events_default_screen_view__dbt_backup 
  ...
[0m11:34:14.734394 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:14.738775 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.739645 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.742546 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view (execute): 2024-06-06 11:34:14.589989 => 2024-06-06 11:34:14.742447
[0m11:34:14.744065 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d04fb80>]}
[0m11:34:14.744850 [info ] [Thread-1 (]: 27 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_screen_view  [[32mOK[0m in 0.21s]
[0m11:34:14.745210 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_screen_view
[0m11:34:14.745493 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m11:34:14.747026 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.746267 [info ] [Thread-1 (]: 29 of 90 START sql table model test.incremental_appmetrica_registry_default_profiles  [RUN]
[0m11:34:14.748924 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"
[0m11:34:14.749602 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles'
[0m11:34:14.750237 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles)
[0m11:34:14.750645 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m11:34:14.754524 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_appmetrica_registry_default_profiles')        
...
[0m11:34:14.754985 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

        
  
    
    
        
        insert into test.incremental_appmetrica_events_default_sessions_starts__dbt_tmp ("__date", "__clientName", "__productName", "appmetrica_device_id", "city", "google_aid", "installation_id", "ios_ifa", "os_name", "profile_id", "session_start_receive_datetime", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_events_default_sessions_starts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("google_aid") as google_aid ,
                            toString("installation_id") as installation_id ,
                            toString("ios_ifa") as ios_ifa ,
                            toString("os_name") as os_name ,
                            toString("profile_id") as profile_id ,
                            toString("session_start_receive_datetime") as session_start_receive_datetime ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_events_default_sessions_starts
        )

        )

  
    ...
[0m11:34:14.762340 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.766223 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

    select name, type from system.columns where table = 'normalize_appmetrica_registry_default_profiles'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.770912 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.771545 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:14.773301 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"
[0m11:34:14.777031 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    drop table if exists test.incremental_appmetrica_events_default_sessions_starts__dbt_backup 
  
  ...
[0m11:34:14.779744 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles (compile): 2024-06-06 11:34:14.750793 => 2024-06-06 11:34:14.779424
[0m11:34:14.780530 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m11:34:14.787029 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

            

    
        create table test.incremental_appmetrica_registry_default_profiles__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_appmetrica_registry_default_profiles


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("profile_id") as profile_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_registry_default_profiles
        )

        )

    )
        ...
[0m11:34:14.787849 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.789843 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */

    rename table test.incremental_appmetrica_events_default_sessions_starts__dbt_tmp to test.incremental_appmetrica_events_default_sessions_starts__dbt_backup 
  
  ...
[0m11:34:14.793902 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.795212 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */
EXCHANGE TABLES test.incremental_appmetrica_events_default_sessions_starts__dbt_backup AND test.incremental_appmetrica_events_default_sessions_starts 
  
  ...
[0m11:34:14.800710 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.805221 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts"} */
drop table if exists test.incremental_appmetrica_events_default_sessions_starts__dbt_backup 
  ...
[0m11:34:14.808556 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:14.812045 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

    select name, type from system.columns where table = 'incremental_appmetrica_registry_default_profiles__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.813818 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.815624 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts (execute): 2024-06-06 11:34:14.694214 => 2024-06-06 11:34:14.815552
[0m11:34:14.816322 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d056950>]}
[0m11:34:14.816853 [info ] [Thread-2 (]: 28 of 90 OK created sql incremental model test.incremental_appmetrica_events_default_sessions_starts  [[32mOK[0m in 0.15s]
[0m11:34:14.817240 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_events_default_sessions_starts
[0m11:34:14.817642 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m11:34:14.818093 [info ] [Thread-2 (]: 30 of 90 START sql incremental model test.incremental_mt_datestat_default_banners_statistics  [RUN]
[0m11:34:14.819204 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.820094 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics'
[0m11:34:14.821487 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"
[0m11:34:14.821937 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics)
[0m11:34:14.822663 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m11:34:14.827086 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_datestat_default_banners_statistics')        
...
[0m11:34:14.828928 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */

  
    
    
        
        insert into test.incremental_appmetrica_registry_default_profiles__dbt_backup ("__clientName", "__productName", "appmetrica_device_id", "city", "profile_id", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_appmetrica_registry_default_profiles


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("appmetrica_device_id") as appmetrica_device_id ,
                            toString("city") as city ,
                            toString("profile_id") as profile_id ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_appmetrica_registry_default_profiles
        )

        )

  ...
[0m11:34:14.834318 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.838549 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'normalize_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.840814 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.842198 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */
EXCHANGE TABLES test.incremental_appmetrica_registry_default_profiles__dbt_backup AND test.incremental_appmetrica_registry_default_profiles 
  
  ...
[0m11:34:14.844192 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.846817 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"
[0m11:34:14.848102 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics (compile): 2024-06-06 11:34:14.822819 => 2024-06-06 11:34:14.847948
[0m11:34:14.848529 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m11:34:14.854446 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.856302 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

            

    
        create table test.incremental_mt_datestat_default_banners_statistics__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_datestat_default_banners_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("banner_id") as banner_id ,
                            toString("base") as base ,
                            toString("date") as date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_datestat_default_banners_statistics
        )

        )

    )
        ...
[0m11:34:14.861062 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles"} */
drop table if exists test.incremental_appmetrica_registry_default_profiles__dbt_backup 
  ...
[0m11:34:14.866915 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.869108 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles (execute): 2024-06-06 11:34:14.780863 => 2024-06-06 11:34:14.869027
[0m11:34:14.869803 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cdf7ca0>]}
[0m11:34:14.870289 [info ] [Thread-1 (]: 29 of 90 OK created sql table model test.incremental_appmetrica_registry_default_profiles  [[32mOK[0m in 0.12s]
[0m11:34:14.870705 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_appmetrica_registry_default_profiles
[0m11:34:14.871018 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m11:34:14.871483 [info ] [Thread-1 (]: 31 of 90 START sql table model test.incremental_mt_registry_default_banners .... [RUN]
[0m11:34:14.873174 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_registry_default_banners'
[0m11:34:14.873506 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_registry_default_banners)
[0m11:34:14.873687 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m11:34:14.880141 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_registry_default_banners')        
...
[0m11:34:14.884067 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:14.887289 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.888634 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.892215 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

    select name, type from system.columns where table = 'normalize_mt_registry_default_banners'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.896483 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.898684 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"
[0m11:34:14.899446 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.902192 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"
[0m11:34:14.902871 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

        
  
    
    
        
        insert into test.incremental_mt_datestat_default_banners_statistics__dbt_tmp ("__date", "__clientName", "__productName", "banner_id", "base", "date", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_datestat_default_banners_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("banner_id") as banner_id ,
                            toString("base") as base ,
                            toString("date") as date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_datestat_default_banners_statistics
        )

        )

  
    ...
[0m11:34:14.903818 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_banners (compile): 2024-06-06 11:34:14.873789 => 2024-06-06 11:34:14.903681
[0m11:34:14.904477 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m11:34:14.911481 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

            

    
        create table test.incremental_mt_registry_default_banners__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_registry_default_banners


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("campaign_id") as campaign_id ,
                            toString("id") as id ,
                            toString("textblocks") as textblocks ,
                            toString("urls") as urls ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_banners
        )

        )

    )
        ...
[0m11:34:14.916070 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.920187 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    drop table if exists test.incremental_mt_datestat_default_banners_statistics__dbt_backup 
  
  ...
[0m11:34:14.923190 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.924429 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */

    rename table test.incremental_mt_datestat_default_banners_statistics__dbt_tmp to test.incremental_mt_datestat_default_banners_statistics__dbt_backup 
  
  ...
[0m11:34:14.928067 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.929689 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */
EXCHANGE TABLES test.incremental_mt_datestat_default_banners_statistics__dbt_backup AND test.incremental_mt_datestat_default_banners_statistics 
  
  ...
[0m11:34:14.932467 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:14.936523 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_banners__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.937882 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.943786 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics"} */
drop table if exists test.incremental_mt_datestat_default_banners_statistics__dbt_backup 
  ...
[0m11:34:14.944715 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.947819 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"
[0m11:34:14.948869 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */

  
    
    
        
        insert into test.incremental_mt_registry_default_banners__dbt_backup ("__clientName", "__productName", "campaign_id", "id", "textblocks", "urls", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_registry_default_banners


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("campaign_id") as campaign_id ,
                            toString("id") as id ,
                            toString("textblocks") as textblocks ,
                            toString("urls") as urls ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_banners
        )

        )

  ...
[0m11:34:14.950094 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.951750 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics (execute): 2024-06-06 11:34:14.848683 => 2024-06-06 11:34:14.951683
[0m11:34:14.952414 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cde6200>]}
[0m11:34:14.952880 [info ] [Thread-2 (]: 30 of 90 OK created sql incremental model test.incremental_mt_datestat_default_banners_statistics  [[32mOK[0m in 0.13s]
[0m11:34:14.953324 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_datestat_default_banners_statistics
[0m11:34:14.953699 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m11:34:14.954607 [info ] [Thread-2 (]: 32 of 90 START sql table model test.incremental_mt_registry_default_campaigns .. [RUN]
[0m11:34:14.955364 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns'
[0m11:34:14.955632 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns)
[0m11:34:14.955800 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m11:34:14.961810 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_mt_registry_default_campaigns')        
...
[0m11:34:14.962666 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.965648 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */
EXCHANGE TABLES test.incremental_mt_registry_default_banners__dbt_backup AND test.incremental_mt_registry_default_banners 
  
  ...
[0m11:34:14.968933 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.969505 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.973472 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = 'normalize_mt_registry_default_campaigns'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:14.980303 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_banners: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_banners"} */
drop table if exists test.incremental_mt_registry_default_banners__dbt_backup 
  ...
[0m11:34:14.985306 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:14.986128 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:14.987457 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_banners (execute): 2024-06-06 11:34:14.905357 => 2024-06-06 11:34:14.987397
[0m11:34:14.989627 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"
[0m11:34:14.990984 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f1b9510>]}
[0m11:34:14.992203 [info ] [Thread-1 (]: 31 of 90 OK created sql table model test.incremental_mt_registry_default_banners  [[32mOK[0m in 0.12s]
[0m11:34:14.993555 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns (compile): 2024-06-06 11:34:14.955904 => 2024-06-06 11:34:14.993391
[0m11:34:14.994045 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_registry_default_banners
[0m11:34:14.994552 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m11:34:14.995362 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m11:34:15.003544 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

            

    
        create table test.incremental_mt_registry_default_campaigns__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_mt_registry_default_campaigns


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("id") as id ,
                            toString("name") as name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_campaigns
        )

        )

    )
        ...
[0m11:34:15.004089 [info ] [Thread-1 (]: 33 of 90 START sql incremental model test.incremental_sheets_periodstat_default_planCosts  [RUN]
[0m11:34:15.006331 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts'
[0m11:34:15.007164 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts)
[0m11:34:15.007684 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m11:34:15.012983 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_sheets_periodstat_default_planCosts')        
...
[0m11:34:15.019813 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.023480 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'normalize_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.025639 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.030017 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_campaigns__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.030947 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.034206 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"
[0m11:34:15.036272 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.037797 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"
[0m11:34:15.038435 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */

  
    
    
        
        insert into test.incremental_mt_registry_default_campaigns__dbt_backup ("__clientName", "__productName", "id", "name", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_mt_registry_default_campaigns


SELECT *
FROM (

        (
            select
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("id") as id ,
                            toString("name") as name ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_mt_registry_default_campaigns
        )

        )

  ...
[0m11:34:15.038744 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts (compile): 2024-06-06 11:34:15.007940 => 2024-06-06 11:34:15.038654
[0m11:34:15.040492 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m11:34:15.047552 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

            

    
        create table test.incremental_sheets_periodstat_default_planCosts__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_sheets_periodstat_default_planCosts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("Campaign") as Campaign ,
                            toString("Cost") as Cost ,
                            toString("Period_end") as Period_end ,
                            toString("Period_start") as Period_start ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_sheets_periodstat_default_planCosts
        )

        )

    )
        ...
[0m11:34:15.055915 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.057348 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */
EXCHANGE TABLES test.incremental_mt_registry_default_campaigns__dbt_backup AND test.incremental_mt_registry_default_campaigns 
  
  ...
[0m11:34:15.061612 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.067527 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns"} */
drop table if exists test.incremental_mt_registry_default_campaigns__dbt_backup 
  ...
[0m11:34:15.068371 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.140601 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.141659 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m11:34:15.144172 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns (execute): 2024-06-06 11:34:14.996198 => 2024-06-06 11:34:15.144100
[0m11:34:15.145278 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf6a470>]}
[0m11:34:15.145785 [info ] [Thread-2 (]: 32 of 90 OK created sql table model test.incremental_mt_registry_default_campaigns  [[32mOK[0m in 0.19s]
[0m11:34:15.146271 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_mt_registry_default_campaigns
[0m11:34:15.146699 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m11:34:15.147460 [info ] [Thread-2 (]: 34 of 90 START sql table model test.incremental_utmcraft_registry_default_utmresult  [RUN]
[0m11:34:15.148639 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.149754 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult'
[0m11:34:15.151202 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"
[0m11:34:15.151914 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult)
[0m11:34:15.152560 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m11:34:15.156569 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_utmcraft_registry_default_utmresult')        
...
[0m11:34:15.158323 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

        
  
    
    
        
        insert into test.incremental_sheets_periodstat_default_planCosts__dbt_tmp ("__date", "Campaign", "Cost", "Period_end", "Period_start", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_sheets_periodstat_default_planCosts

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("Campaign") as Campaign ,
                            toString("Cost") as Cost ,
                            toString("Period_end") as Period_end ,
                            toString("Period_start") as Period_start ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_sheets_periodstat_default_planCosts
        )

        )

  
    ...
[0m11:34:15.166998 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.170963 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = 'normalize_utmcraft_registry_default_utmresult'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.172626 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.176587 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    drop table if exists test.incremental_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m11:34:15.178154 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.180747 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"
[0m11:34:15.181763 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.183116 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */

    rename table test.incremental_sheets_periodstat_default_planCosts__dbt_tmp to test.incremental_sheets_periodstat_default_planCosts__dbt_backup 
  
  ...
[0m11:34:15.184715 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult (compile): 2024-06-06 11:34:15.152765 => 2024-06-06 11:34:15.184558
[0m11:34:15.185102 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m11:34:15.189325 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

            

    
        create table test.incremental_utmcraft_registry_default_utmresult__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_utmcraft_registry_default_utmresult


SELECT *
FROM (

        (
            select
                            toString("created_at") as created_at ,
                            toString("created_by_id") as created_by_id ,
                            toString("data") as data ,
                            toString("form_id") as form_id ,
                            toString("id") as id ,
                            toString("updated_at") as updated_at ,
                            toString("updated_by_id") as updated_by_id ,
                            toString("utm_hashcode") as utm_hashcode ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_utmcraft_registry_default_utmresult
        )

        )

    )
        ...
[0m11:34:15.190598 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.192443 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */
EXCHANGE TABLES test.incremental_sheets_periodstat_default_planCosts__dbt_backup AND test.incremental_sheets_periodstat_default_planCosts 
  
  ...
[0m11:34:15.197960 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.205821 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts"} */
drop table if exists test.incremental_sheets_periodstat_default_planCosts__dbt_backup 
  ...
[0m11:34:15.210299 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.211950 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts (execute): 2024-06-06 11:34:15.040882 => 2024-06-06 11:34:15.211870
[0m11:34:15.212769 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.213493 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf72890>]}
[0m11:34:15.216819 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

    select name, type from system.columns where table = 'incremental_utmcraft_registry_default_utmresult__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.217611 [info ] [Thread-1 (]: 33 of 90 OK created sql incremental model test.incremental_sheets_periodstat_default_planCosts  [[32mOK[0m in 0.21s]
[0m11:34:15.219553 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_sheets_periodstat_default_planCosts
[0m11:34:15.220536 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m11:34:15.220982 [info ] [Thread-1 (]: 35 of 90 START sql incremental model test.incremental_vkads_datestat_default_ad_plans_statistics  [RUN]
[0m11:34:15.222600 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics'
[0m11:34:15.223192 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics)
[0m11:34:15.224233 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.225064 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m11:34:15.226939 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"
[0m11:34:15.230816 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_vkads_datestat_default_ad_plans_statistics')        
...
[0m11:34:15.233550 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */

  
    
    
        
        insert into test.incremental_utmcraft_registry_default_utmresult__dbt_backup ("created_at", "created_by_id", "data", "form_id", "id", "updated_at", "updated_by_id", "utm_hashcode", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_utmcraft_registry_default_utmresult


SELECT *
FROM (

        (
            select
                            toString("created_at") as created_at ,
                            toString("created_by_id") as created_by_id ,
                            toString("data") as data ,
                            toString("form_id") as form_id ,
                            toString("id") as id ,
                            toString("updated_at") as updated_at ,
                            toString("updated_by_id") as updated_by_id ,
                            toString("utm_hashcode") as utm_hashcode ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_utmcraft_registry_default_utmresult
        )

        )

  ...
[0m11:34:15.238455 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.242597 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'normalize_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.246057 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.247893 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */
EXCHANGE TABLES test.incremental_utmcraft_registry_default_utmresult__dbt_backup AND test.incremental_utmcraft_registry_default_utmresult 
  
  ...
[0m11:34:15.248638 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.252471 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"
[0m11:34:15.253201 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.256921 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult"} */
drop table if exists test.incremental_utmcraft_registry_default_utmresult__dbt_backup 
  ...
[0m11:34:15.258908 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics (compile): 2024-06-06 11:34:15.227286 => 2024-06-06 11:34:15.258713
[0m11:34:15.259377 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m11:34:15.266536 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

            

    
        create table test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_vkads_datestat_default_ad_plans_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("ad_offers") as ad_offers ,
                            toString("ad_plan_id") as ad_plan_id ,
                            toString("base") as base ,
                            toString("carousel") as carousel ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("moat") as moat ,
                            toString("playable") as playable ,
                            toString("romi") as romi ,
                            toString("social_network") as social_network ,
                            toString("tps") as tps ,
                            toString("uniques") as uniques ,
                            toString("uniques_video") as uniques_video ,
                            toString("video") as video ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_datestat_default_ad_plans_statistics
        )

        )

    )
        ...
[0m11:34:15.267541 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.271032 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult (execute): 2024-06-06 11:34:15.185234 => 2024-06-06 11:34:15.270965
[0m11:34:15.271587 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d114e50>]}
[0m11:34:15.271923 [info ] [Thread-2 (]: 34 of 90 OK created sql table model test.incremental_utmcraft_registry_default_utmresult  [[32mOK[0m in 0.12s]
[0m11:34:15.272249 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_utmcraft_registry_default_utmresult
[0m11:34:15.272497 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m11:34:15.272762 [info ] [Thread-2 (]: 36 of 90 START sql table model test.incremental_vkads_periodstat_default_ad_plans  [RUN]
[0m11:34:15.274424 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans'
[0m11:34:15.274887 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans)
[0m11:34:15.275201 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m11:34:15.281354 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_vkads_periodstat_default_ad_plans')        
...
[0m11:34:15.287941 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.291943 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = 'normalize_vkads_periodstat_default_ad_plans'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.293160 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:15.298200 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.299263 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.303252 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"
[0m11:34:15.303787 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans (compile): 2024-06-06 11:34:15.275326 => 2024-06-06 11:34:15.303677
[0m11:34:15.304126 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m11:34:15.304873 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.309848 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

            

    
        create table test.incremental_vkads_periodstat_default_ad_plans__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_vkads_periodstat_default_ad_plans


SELECT *
FROM (

        (
            select
                            toString("ad_groups") as ad_groups ,
                            toString("autobidding_mode") as autobidding_mode ,
                            toString("budget_limit") as budget_limit ,
                            toString("budget_limit_day") as budget_limit_day ,
                            toString("created") as created ,
                            toString("date_end") as date_end ,
                            toString("date_start") as date_start ,
                            toString("id") as id ,
                            toString("max_price") as max_price ,
                            toString("name") as name ,
                            toString("objective") as objective ,
                            toString("priced_goal") as priced_goal ,
                            toString("pricelist_id") as pricelist_id ,
                            toString("status") as status ,
                            toString("updated") as updated ,
                            toString("vkads_status") as vkads_status ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_periodstat_default_ad_plans
        )

        )

    )
        ...
[0m11:34:15.311713 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"
[0m11:34:15.314369 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

        
  
    
    
        
        insert into test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_tmp ("__date", "ad_offers", "ad_plan_id", "base", "carousel", "date", "events", "moat", "playable", "romi", "social_network", "tps", "uniques", "uniques_video", "video", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_vkads_datestat_default_ad_plans_statistics

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("ad_offers") as ad_offers ,
                            toString("ad_plan_id") as ad_plan_id ,
                            toString("base") as base ,
                            toString("carousel") as carousel ,
                            toString("date") as date ,
                            toString("events") as events ,
                            toString("moat") as moat ,
                            toString("playable") as playable ,
                            toString("romi") as romi ,
                            toString("social_network") as social_network ,
                            toString("tps") as tps ,
                            toString("uniques") as uniques ,
                            toString("uniques_video") as uniques_video ,
                            toString("video") as video ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_datestat_default_ad_plans_statistics
        )

        )

  
    ...
[0m11:34:15.331373 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.334603 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    drop table if exists test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m11:34:15.336111 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.340481 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

    select name, type from system.columns where table = 'incremental_vkads_periodstat_default_ad_plans__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.342280 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.344121 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */

    rename table test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_tmp to test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  
  ...
[0m11:34:15.346930 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.348743 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"
[0m11:34:15.349445 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.351221 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */
EXCHANGE TABLES test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_backup AND test.incremental_vkads_datestat_default_ad_plans_statistics 
  
  ...
[0m11:34:15.352274 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */

  
    
    
        
        insert into test.incremental_vkads_periodstat_default_ad_plans__dbt_backup ("ad_groups", "autobidding_mode", "budget_limit", "budget_limit_day", "created", "date_end", "date_start", "id", "max_price", "name", "objective", "priced_goal", "pricelist_id", "status", "updated", "vkads_status", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_vkads_periodstat_default_ad_plans


SELECT *
FROM (

        (
            select
                            toString("ad_groups") as ad_groups ,
                            toString("autobidding_mode") as autobidding_mode ,
                            toString("budget_limit") as budget_limit ,
                            toString("budget_limit_day") as budget_limit_day ,
                            toString("created") as created ,
                            toString("date_end") as date_end ,
                            toString("date_start") as date_start ,
                            toString("id") as id ,
                            toString("max_price") as max_price ,
                            toString("name") as name ,
                            toString("objective") as objective ,
                            toString("priced_goal") as priced_goal ,
                            toString("pricelist_id") as pricelist_id ,
                            toString("status") as status ,
                            toString("updated") as updated ,
                            toString("vkads_status") as vkads_status ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_vkads_periodstat_default_ad_plans
        )

        )

  ...
[0m11:34:15.355624 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.360615 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics"} */
drop table if exists test.incremental_vkads_datestat_default_ad_plans_statistics__dbt_backup 
  ...
[0m11:34:15.365558 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.366986 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics (execute): 2024-06-06 11:34:15.259568 => 2024-06-06 11:34:15.366901
[0m11:34:15.367886 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d079e40>]}
[0m11:34:15.368514 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.369180 [info ] [Thread-1 (]: 35 of 90 OK created sql incremental model test.incremental_vkads_datestat_default_ad_plans_statistics  [[32mOK[0m in 0.15s]
[0m11:34:15.371460 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */
EXCHANGE TABLES test.incremental_vkads_periodstat_default_ad_plans__dbt_backup AND test.incremental_vkads_periodstat_default_ad_plans 
  
  ...
[0m11:34:15.372180 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_vkads_datestat_default_ad_plans_statistics
[0m11:34:15.373233 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m11:34:15.374089 [info ] [Thread-1 (]: 37 of 90 START sql incremental model test.incremental_yd_datestat_default_custom_report  [RUN]
[0m11:34:15.375488 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report'
[0m11:34:15.375917 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report)
[0m11:34:15.376412 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m11:34:15.380529 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_yd_datestat_default_custom_report')        
...
[0m11:34:15.382045 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.386184 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans"} */
drop table if exists test.incremental_vkads_periodstat_default_ad_plans__dbt_backup 
  ...
[0m11:34:15.390069 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.392734 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans (execute): 2024-06-06 11:34:15.305320 => 2024-06-06 11:34:15.392444
[0m11:34:15.393797 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.396648 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0dc3d0>]}
[0m11:34:15.401296 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'normalize_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.402177 [info ] [Thread-2 (]: 36 of 90 OK created sql table model test.incremental_vkads_periodstat_default_ad_plans  [[32mOK[0m in 0.12s]
[0m11:34:15.405219 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_vkads_periodstat_default_ad_plans
[0m11:34:15.406010 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m11:34:15.406773 [info ] [Thread-2 (]: 38 of 90 START sql incremental model test.incremental_ym_events_default_yandex_metrika_stream  [RUN]
[0m11:34:15.408160 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream'
[0m11:34:15.409016 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream)
[0m11:34:15.409927 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.410498 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m11:34:15.413844 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"
[0m11:34:15.419455 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'normalize_ym_events_default_yandex_metrika_stream')        
...
[0m11:34:15.421577 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report (compile): 2024-06-06 11:34:15.376578 => 2024-06-06 11:34:15.421403
[0m11:34:15.422059 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m11:34:15.429942 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

            

    
        create table test.incremental_yd_datestat_default_custom_report__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_yd_datestat_default_custom_report

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("AdId") as AdId ,
                            toString("CampaignId") as CampaignId ,
                            toString("CampaignName") as CampaignName ,
                            toString("CampaignType") as CampaignType ,
                            toString("Clicks") as Clicks ,
                            toString("Cost") as Cost ,
                            toString("Date") as Date ,
                            toString("Impressions") as Impressions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_yd_datestat_default_custom_report
        )

        )

    )
        ...
[0m11:34:15.430994 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.436151 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'normalize_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.442172 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.446339 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"
[0m11:34:15.447638 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream (compile): 2024-06-06 11:34:15.414397 => 2024-06-06 11:34:15.447420
[0m11:34:15.448139 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m11:34:15.453832 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

            

    
        create table test.incremental_ym_events_default_yandex_metrika_stream__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.normalize_ym_events_default_yandex_metrika_stream

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("ymsclientID") as ymsclientID ,
                            toString("ymsdateTime") as ymsdateTime ,
                            toString("ymsgoalsID") as ymsgoalsID ,
                            toString("ymsgoalsOrder") as ymsgoalsOrder ,
                            toString("ymslastAdvEngine") as ymslastAdvEngine ,
                            toString("ymslastReferalSource") as ymslastReferalSource ,
                            toString("ymslastSearchEngine") as ymslastSearchEngine ,
                            toString("ymslastTrafficSource") as ymslastTrafficSource ,
                            toString("ymspageViews") as ymspageViews ,
                            toString("ymsparsedParamsKey1") as ymsparsedParamsKey1 ,
                            toString("ymsparsedParamsKey2") as ymsparsedParamsKey2 ,
                            toString("ymspurchaseCoupon") as ymspurchaseCoupon ,
                            toString("ymspurchaseID") as ymspurchaseID ,
                            toString("ymspurchaseRevenue") as ymspurchaseRevenue ,
                            toString("ymsregionCity") as ymsregionCity ,
                            toString("ymsUTMCampaign") as ymsUTMCampaign ,
                            toString("ymsUTMContent") as ymsUTMContent ,
                            toString("ymsUTMMedium") as ymsUTMMedium ,
                            toString("ymsUTMSource") as ymsUTMSource ,
                            toString("ymsUTMTerm") as ymsUTMTerm ,
                            toString("ymsvisitID") as ymsvisitID ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_ym_events_default_yandex_metrika_stream
        )

        )

    )
        ...
[0m11:34:15.454634 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.460374 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.466699 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.468831 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"
[0m11:34:15.469977 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

        
  
    
    
        
        insert into test.incremental_yd_datestat_default_custom_report__dbt_tmp ("__date", "__clientName", "__productName", "AdId", "CampaignId", "CampaignName", "CampaignType", "Clicks", "Cost", "Date", "Impressions", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_yd_datestat_default_custom_report

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("AdId") as AdId ,
                            toString("CampaignId") as CampaignId ,
                            toString("CampaignName") as CampaignName ,
                            toString("CampaignType") as CampaignType ,
                            toString("Clicks") as Clicks ,
                            toString("Cost") as Cost ,
                            toString("Date") as Date ,
                            toString("Impressions") as Impressions ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_yd_datestat_default_custom_report
        )

        )

  
    ...
[0m11:34:15.477701 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.481048 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.483499 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.486375 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    drop table if exists test.incremental_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m11:34:15.487143 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.491762 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"
[0m11:34:15.492450 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.494387 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */

    rename table test.incremental_yd_datestat_default_custom_report__dbt_tmp to test.incremental_yd_datestat_default_custom_report__dbt_backup 
  
  ...
[0m11:34:15.495838 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

        
  
    
    
        
        insert into test.incremental_ym_events_default_yandex_metrika_stream__dbt_tmp ("__date", "__clientName", "__productName", "ymsclientID", "ymsdateTime", "ymsgoalsID", "ymsgoalsOrder", "ymslastAdvEngine", "ymslastReferalSource", "ymslastSearchEngine", "ymslastTrafficSource", "ymspageViews", "ymsparsedParamsKey1", "ymsparsedParamsKey2", "ymspurchaseCoupon", "ymspurchaseID", "ymspurchaseRevenue", "ymsregionCity", "ymsUTMCampaign", "ymsUTMContent", "ymsUTMMedium", "ymsUTMSource", "ymsUTMTerm", "ymsvisitID", "__table_name", "__emitted_at", "__normalized_at")
  -- depends_on: test.normalize_ym_events_default_yandex_metrika_stream

SELECT * 
REPLACE(toDate(__date, 'UTC') AS __date)
FROM (

        (
            select
                            toString("__date") as __date ,
                            toString("__clientName") as __clientName ,
                            toString("__productName") as __productName ,
                            toString("ymsclientID") as ymsclientID ,
                            toString("ymsdateTime") as ymsdateTime ,
                            toString("ymsgoalsID") as ymsgoalsID ,
                            toString("ymsgoalsOrder") as ymsgoalsOrder ,
                            toString("ymslastAdvEngine") as ymslastAdvEngine ,
                            toString("ymslastReferalSource") as ymslastReferalSource ,
                            toString("ymslastSearchEngine") as ymslastSearchEngine ,
                            toString("ymslastTrafficSource") as ymslastTrafficSource ,
                            toString("ymspageViews") as ymspageViews ,
                            toString("ymsparsedParamsKey1") as ymsparsedParamsKey1 ,
                            toString("ymsparsedParamsKey2") as ymsparsedParamsKey2 ,
                            toString("ymspurchaseCoupon") as ymspurchaseCoupon ,
                            toString("ymspurchaseID") as ymspurchaseID ,
                            toString("ymspurchaseRevenue") as ymspurchaseRevenue ,
                            toString("ymsregionCity") as ymsregionCity ,
                            toString("ymsUTMCampaign") as ymsUTMCampaign ,
                            toString("ymsUTMContent") as ymsUTMContent ,
                            toString("ymsUTMMedium") as ymsUTMMedium ,
                            toString("ymsUTMSource") as ymsUTMSource ,
                            toString("ymsUTMTerm") as ymsUTMTerm ,
                            toString("ymsvisitID") as ymsvisitID ,
                            toString("__table_name") as __table_name ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toDateTime("__normalized_at") as __normalized_at 

            from test.normalize_ym_events_default_yandex_metrika_stream
        )

        )

  
    ...
[0m11:34:15.498208 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.499315 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */
EXCHANGE TABLES test.incremental_yd_datestat_default_custom_report__dbt_backup AND test.incremental_yd_datestat_default_custom_report 
  
  ...
[0m11:34:15.503262 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.507896 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report"} */
drop table if exists test.incremental_yd_datestat_default_custom_report__dbt_backup 
  ...
[0m11:34:15.511979 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.513776 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report (execute): 2024-06-06 11:34:15.422203 => 2024-06-06 11:34:15.513625
[0m11:34:15.514586 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf71480>]}
[0m11:34:15.515771 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.515162 [info ] [Thread-1 (]: 37 of 90 OK created sql incremental model test.incremental_yd_datestat_default_custom_report  [[32mOK[0m in 0.14s]
[0m11:34:15.519365 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    drop table if exists test.incremental_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m11:34:15.520027 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.incremental_yd_datestat_default_custom_report
[0m11:34:15.521415 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_appmetrica_events
[0m11:34:15.522365 [info ] [Thread-1 (]: 39 of 90 START sql incremental model test.join_appmetrica_events ............... [RUN]
[0m11:34:15.523711 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_appmetrica_events'
[0m11:34:15.524204 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_appmetrica_events)
[0m11:34:15.525118 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.525746 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_appmetrica_events
[0m11:34:15.527296 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */

    rename table test.incremental_ym_events_default_yandex_metrika_stream__dbt_tmp to test.incremental_ym_events_default_yandex_metrika_stream__dbt_backup 
  
  ...
[0m11:34:15.532351 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_appmetrica__%'
    GROUP BY table

...
[0m11:34:15.536996 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.538401 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */
EXCHANGE TABLES test.incremental_ym_events_default_yandex_metrika_stream__dbt_backup AND test.incremental_ym_events_default_yandex_metrika_stream 
  
  ...
[0m11:34:15.544716 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.549360 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream"} */
drop table if exists test.incremental_ym_events_default_yandex_metrika_stream__dbt_backup 
  ...
[0m11:34:15.550277 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.553300 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_appmetrica__%' AND 
        name='__date'

  ...
[0m11:34:15.556163 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.557757 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream (execute): 2024-06-06 11:34:15.448432 => 2024-06-06 11:34:15.557643
[0m11:34:15.558557 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cfc9780>]}
[0m11:34:15.559249 [info ] [Thread-2 (]: 38 of 90 OK created sql incremental model test.incremental_ym_events_default_yandex_metrika_stream  [[32mOK[0m in 0.15s]
[0m11:34:15.560034 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.560729 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.incremental_ym_events_default_yandex_metrika_stream
[0m11:34:15.562772 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_appmetrica_events_default_deeplinks' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_deeplinks
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_events' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_events
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_installations' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_installations
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_screen_view' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_screen_view
    
    
    WHERE toDate(__date) > '1972-01-01'
    
        UNION ALL
    

    SELECT 
        'normalize_appmetrica_events_default_sessions_starts' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_appmetrica_events_default_sessions_starts
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m11:34:15.563519 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m11:34:15.565529 [info ] [Thread-2 (]: 40 of 90 START sql table model test.join_appmetrica_registry_appprofilematching  [RUN]
[0m11:34:15.567086 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching'
[0m11:34:15.567694 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching)
[0m11:34:15.568128 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m11:34:15.572245 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_appmetrica__%'
    GROUP BY table

...
[0m11:34:15.583042 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.585218 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_registry_[^_]+_profiles$')        
...
[0m11:34:15.593087 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.598961 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    select name, type from system.columns where table = 'incremental_appmetrica_registry_default_profiles'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.603935 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.611434 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"
[0m11:34:15.613756 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching (compile): 2024-06-06 11:34:15.568261 => 2024-06-06 11:34:15.613494
[0m11:34:15.614404 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m11:34:15.618691 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

            

    
        create table test.join_appmetrica_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_appmetrica_registry_default_profiles
SELECT
    appmetrica_device_id AS appmetricaDeviceId,
    profile_id AS crmUserId,
    city AS cityName,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    toLowCardinality('AppProfileMatching') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_registry_default_profiles' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_registry_default_profiles

            
        )

        )




    )
        ...
[0m11:34:15.640258 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.644138 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

    select name, type from system.columns where table = 'join_appmetrica_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.648495 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m11:34:15.650701 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_deeplinks$')        
...
[0m11:34:15.652360 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.653825 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"
[0m11:34:15.655718 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */

  
    
    
        
        insert into test.join_appmetrica_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_appmetrica_registry_default_profiles
SELECT
    appmetrica_device_id AS appmetricaDeviceId,
    profile_id AS crmUserId,
    city AS cityName,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    toLowCardinality('AppProfileMatching') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_registry_default_profiles' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_registry_default_profiles

            
        )

        )




  ...
[0m11:34:15.657104 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.660716 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_deeplinks'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.666812 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.670249 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_events$')        
...
[0m11:34:15.671009 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.673367 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */
EXCHANGE TABLES test.join_appmetrica_registry_appprofilematching__dbt_backup AND test.join_appmetrica_registry_appprofilematching 
  
  ...
[0m11:34:15.679636 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.680411 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.683991 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching"} */
drop table if exists test.join_appmetrica_registry_appprofilematching__dbt_backup 
  ...
[0m11:34:15.688838 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_events'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.693410 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.694617 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching (execute): 2024-06-06 11:34:15.614520 => 2024-06-06 11:34:15.694555
[0m11:34:15.695248 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ce10130>]}
[0m11:34:15.695724 [info ] [Thread-2 (]: 40 of 90 OK created sql table model test.join_appmetrica_registry_appprofilematching  [[32mOK[0m in 0.13s]
[0m11:34:15.696190 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_appmetrica_registry_appprofilematching
[0m11:34:15.696621 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_mt_datestat
[0m11:34:15.697487 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.702137 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_installations$')        
...
[0m11:34:15.698613 [info ] [Thread-2 (]: 41 of 90 START sql incremental model test.join_mt_datestat ..................... [RUN]
[0m11:34:15.704480 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_mt_datestat'
[0m11:34:15.704727 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_mt_datestat)
[0m11:34:15.704886 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_mt_datestat
[0m11:34:15.710338 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_mt__%'
    GROUP BY table

...
[0m11:34:15.711623 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.718077 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_installations'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.724454 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.730133 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_screen_view$')        
...
[0m11:34:15.732250 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:15.734592 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_mt__%' AND 
        name='__date'

  ...
[0m11:34:15.738710 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.744135 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_screen_view'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.745269 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.748830 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_mt_datestat_default_banners_statistics' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_mt_datestat_default_banners_statistics
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m11:34:15.752178 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.755159 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_appmetrica_events_[^_]+_sessions_starts$')        
...
[0m11:34:15.764979 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.770060 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'incremental_appmetrica_events_default_sessions_starts'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.775779 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.776763 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:15.780556 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_appmetrica_events"
[0m11:34:15.783849 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_datestat_[^_]+_banners_statistics$')        
...
[0m11:34:15.786068 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_events (compile): 2024-06-06 11:34:15.527884 => 2024-06-06 11:34:15.785865
[0m11:34:15.786649 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_appmetrica_events
[0m11:34:15.795423 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

            

    
        create table test.join_appmetrica_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_appmetrica_events_default_deeplinks
-- depends_on: test.incremental_appmetrica_events_default_events
-- depends_on: test.incremental_appmetrica_events_default_installations
-- depends_on: test.incremental_appmetrica_events_default_screen_view
-- depends_on: test.incremental_appmetrica_events_default_sessions_starts
WITH join_appmetrica_events_deeplinks AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime,
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode, --
    os_name AS osName,
    city AS cityName,
    assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, '')) AS adSourceDirty,
    extract(deeplink_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(deeplink_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(deeplink_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(deeplink_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(deeplink_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions, --
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppDeeplinkStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_deeplinks' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("deeplink_url_parameters" as String) as "deeplink_url_parameters" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_deeplinks

            
        )

        )
), union_events AS (
SELECT
    __emitted_at,
    splitByChar('_', __table_name)[6] AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    city AS cityName,
    event_name AS eventName,
    event_json AS eventJson,
    session_id AS sessionId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    JSONExtractString(event_json, 'transaction_id') AS transactionId,
    appmetrica_device_id AS appmetricaDeviceId,
    os_name AS osName,
    profile_id AS crmUserId,
    JSONExtractString(event_json, 'coupon') AS promoCode,    
    toDate(__date) AS __date, 
    toDateTime(event_receive_datetime) AS event_datetime, 
    0 AS screen_view
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_events' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("app_version_name" as String) as "app_version_name" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("event_json" as String) as "event_json" ,
                    cast("event_name" as String) as "event_name" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_events

            
        )

        )
)
, join_appmetrica_events_prepare AS (
SELECT 
    __date,
    toLowCardinality(__table_name) AS __table_name,
    event_datetime,
    toLowCardinality(accountName) AS accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId,   
    promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    transactionId,
    '' AS UtmHash,
    0 AS sessions,
    eventName = 'add_to_cart' AS addToCartSessions,
    eventName = 'view_cart' AS cartViewSessions,
    eventName = 'begin_checkout' AS checkoutSessions,
    eventName = 'purchase' AS webSalesSessions,
    eventName = 'purchase' AS sales,    
    assumeNotNull(coalesce(if(eventName = 'purchase', toFloat64(nullif(JSONExtractString(JSONExtractString(JSONExtractString(eventJson, 'value'), 'fiat'), 'value'), '')), 0), 0)) AS amountSales,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindVirtualCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS registrationCardSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'IntroRegistrationButtonClick' AND (JSONExtractString(eventJson, 'item_name') = 'AdventCalendar' or JSONExtractString(eventJson, 'item_name') = 'ScratchCards') as registrationButtonClick,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindPlasticCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CashbackButtonRegistration' AND  JSONExtractString(eventJson, 'item_name') = 'Cashback' AS registrationCashbackSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'ButtonActivate' AS instantDiscountActivationSessions,
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponDetailActivate' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR 
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Club') AS couponActivationSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'TakePartButton' AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link,
    JSONExtractString(eventJson, 'item_category') AS __itemCategory, 
    JSONExtractString(eventJson, 'item_name') AS __itemName,
    row_number() over() AS __rn,
    eventName AS __eventName, 
    sessionId AS __sessionId
FROM union_events
WHERE addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 OR registrationButtonClick > 0
  OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
  OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
  OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 
  OR couponActivationSessions > 0 OR participationInLotterySessions > 0 or screenView > 0
ORDER BY __date
)
, min_event AS (
SELECT MIN(__rn) AS __rn 
FROM join_appmetrica_events_prepare
GROUP BY appmetricaDeviceId, __sessionId, __eventName, __itemCategory, __itemName
), join_appmetrica_events_events AS (
SELECT * EXCEPT(__itemCategory, __itemName, __rn, __eventName, __sessionId)
FROM join_appmetrica_events_prepare
WHERE __rn IN (SELECT __rn FROM min_event) AND  
    (addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 
    OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
    OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
    OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 OR registrationButtonClick > 0
    OR couponActivationSessions > 0 OR participationInLotterySessions > 0)
), join_appmetrica_events_install AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(install_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    if(match(click_url_parameters, 'organic'), 'Органическая установка', assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, ''))) AS adSourceDirty,
    extract(click_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(click_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(click_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(click_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(click_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    is_reinstallation = 'false' AS installApp,
    1 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppInstallStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_installations' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("click_datetime" as String) as "click_datetime" ,
                    cast("click_url_parameters" as String) as "click_url_parameters" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("install_receive_datetime" as String) as "install_receive_datetime" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("is_reinstallation" as String) as "is_reinstallation" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_installations

            
        )

        )
), join_appmetrica_events_screen_view AS (
SELECT
    toDateTime(date_add(hour, 23, date_add(minute, 59, toDateTime(__date)))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime, 
    accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId, 
    '' AS promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,    
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    screen_view AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_screen_view' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("event_receive_datetime" as DateTime) as "event_receive_datetime" ,
                    cast("mobileAdsId" as String) as "mobileAdsId" ,
                    cast("accountName" as String) as "accountName" ,
                    cast("appmetricaDeviceId" as String) as "appmetricaDeviceId" ,
                    cast("cityName" as String) as "cityName" ,
                    cast("osName" as String) as "osName" ,
                    cast("crmUserId" as String) as "crmUserId" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("screen_view" as UInt64) as "screen_view" 

            from test.incremental_appmetrica_events_default_screen_view

            
        )

        )
), join_appmetrica_events_sessions_starts AS (
SELECT
    toDateTime(date_add(minute, 1, toDateTime(__date))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(session_start_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS UtmHash,
    1 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    CONCAT(installation_id, appmetrica_device_id) AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppSessionStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_sessions_starts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_start_receive_datetime" as String) as "session_start_receive_datetime" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_sessions_starts

            
        )

        )
)SELECT * 
FROM join_appmetrica_events_deeplinks
UNION ALL
SELECT * 
FROM join_appmetrica_events_events
UNION ALL
SELECT * 
FROM join_appmetrica_events_install
UNION ALL
SELECT * 
FROM join_appmetrica_events_screen_view
UNION ALL
SELECT * 
FROM join_appmetrica_events_sessions_starts





    )
        ...
[0m11:34:15.796624 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.804797 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_datestat_default_banners_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.811595 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.814930 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_registry_[^_]+_banners$')        
...
[0m11:34:15.824568 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.828327 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_banners'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.833682 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.836586 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_mt_registry_[^_]+_campaigns$')        
...
[0m11:34:15.843984 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.847897 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'incremental_mt_registry_default_campaigns'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.852658 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.855254 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_mt_datestat"
[0m11:34:15.855719 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_mt_datestat (compile): 2024-06-06 11:34:15.704977 => 2024-06-06 11:34:15.855646
[0m11:34:15.856028 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_mt_datestat
[0m11:34:15.860901 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

            

    
        create table test.join_mt_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_mt_datestat_default_banners_statistics
-- depends_on: test.incremental_mt_registry_default_banners
-- depends_on: test.incremental_mt_registry_default_campaigns
WITH banners_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_datestat_default_banners_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("banner_id" as String) as "banner_id" ,
                    cast("base" as String) as "base" ,
                    cast("date" as String) as "date" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_datestat_default_banners_statistics

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-22' AND '2024-02-23'),

banners AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_banners' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("campaign_id" as String) as "campaign_id" ,
                    cast("id" as String) as "id" ,
                    cast("textblocks" as String) as "textblocks" ,
                    cast("urls" as String) as "urls" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_banners

            
        )

        )
),

campaigns AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_campaigns' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("id" as String) as "id" ,
                    cast("name" as String) as "name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_campaigns

            
        )

        )
)

SELECT 
    toDate(banners_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,  
    toLowCardinality(splitByChar('_', banners_statistics.__table_name)[6]) AS accountName,
    toLowCardinality(banners_statistics.__table_name) AS __table_name,
    'MyTarget' AS adSourceDirty,
    --'' AS productName,
    campaigns.name AS adCampaignName,
    --'' AS adGroupName,
    banners.id AS adId,
    --'' AS adPhraseId,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_source=([^&]*)') AS utmSource,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_medium=([^&]*)') AS utmMedium,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_term=([^&]*)') AS utmTerm,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_content=([^&]*)') AS utmContent,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(adCampaignName, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.title_25.text') AS adTitle1,
    --'' AS adTitle2,
    assumeNotNull(coalesce(nullif(JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_90.text'), ''),
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_220.text'), '')) AS adText,
    --'' AS adPhraseName,
    toFloat64(JSONExtractString(banners_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(banners_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(banners_statistics.base, 'clicks')) AS clicks,
    banners_statistics.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM banners_statistics
JOIN banners ON banners_statistics.banner_id = banners.id 
JOIN campaigns ON banners.campaign_id = campaigns.id






    )
        ...
[0m11:34:15.903751 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:15.906922 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.913369 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.915037 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_mt_datestat"
[0m11:34:15.915519 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

        
  
    
    
        
        insert into test.join_mt_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_mt_datestat_default_banners_statistics
-- depends_on: test.incremental_mt_registry_default_banners
-- depends_on: test.incremental_mt_registry_default_campaigns
WITH banners_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_datestat_default_banners_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("banner_id" as String) as "banner_id" ,
                    cast("base" as String) as "base" ,
                    cast("date" as String) as "date" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_datestat_default_banners_statistics

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-22' AND '2024-02-23'),

banners AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_banners' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("campaign_id" as String) as "campaign_id" ,
                    cast("id" as String) as "id" ,
                    cast("textblocks" as String) as "textblocks" ,
                    cast("urls" as String) as "urls" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_banners

            
        )

        )
),

campaigns AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_mt_registry_default_campaigns' as String) as _dbt_source_relation,

                
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("id" as String) as "id" ,
                    cast("name" as String) as "name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_mt_registry_default_campaigns

            
        )

        )
)

SELECT 
    toDate(banners_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,  
    toLowCardinality(splitByChar('_', banners_statistics.__table_name)[6]) AS accountName,
    toLowCardinality(banners_statistics.__table_name) AS __table_name,
    'MyTarget' AS adSourceDirty,
    --'' AS productName,
    campaigns.name AS adCampaignName,
    --'' AS adGroupName,
    banners.id AS adId,
    --'' AS adPhraseId,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_source=([^&]*)') AS utmSource,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_medium=([^&]*)') AS utmMedium,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_term=([^&]*)') AS utmTerm,
    extract(JSON_VALUE(replaceAll(banners.urls, '''', '"'), '$.primary.url'), 'utm_content=([^&]*)') AS utmContent,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(adCampaignName, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.title_25.text') AS adTitle1,
    --'' AS adTitle2,
    assumeNotNull(coalesce(nullif(JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_90.text'), ''),
    JSON_VALUE(replaceAll(banners.textblocks, '''', '"'), '$.text_220.text'), '')) AS adText,
    --'' AS adPhraseName,
    toFloat64(JSONExtractString(banners_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(banners_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(banners_statistics.base, 'clicks')) AS clicks,
    banners_statistics.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM banners_statistics
JOIN banners ON banners_statistics.banner_id = banners.id 
JOIN campaigns ON banners.campaign_id = campaigns.id






  
    ...
[0m11:34:15.937695 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.14 seconds
[0m11:34:15.940681 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:15.947427 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.949674 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_appmetrica_events"
[0m11:34:15.950275 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

        
  
    
    
        
        insert into test.join_appmetrica_events__dbt_tmp ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link")
  -- depends_on: test.incremental_appmetrica_events_default_deeplinks
-- depends_on: test.incremental_appmetrica_events_default_events
-- depends_on: test.incremental_appmetrica_events_default_installations
-- depends_on: test.incremental_appmetrica_events_default_screen_view
-- depends_on: test.incremental_appmetrica_events_default_sessions_starts
WITH join_appmetrica_events_deeplinks AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime,
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode, --
    os_name AS osName,
    city AS cityName,
    assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, '')) AS adSourceDirty,
    extract(deeplink_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(deeplink_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(deeplink_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(deeplink_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(deeplink_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions, --
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppDeeplinkStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_deeplinks' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("deeplink_url_parameters" as String) as "deeplink_url_parameters" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_deeplinks

            
        )

        )
), union_events AS (
SELECT
    __emitted_at,
    splitByChar('_', __table_name)[6] AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    city AS cityName,
    event_name AS eventName,
    event_json AS eventJson,
    session_id AS sessionId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    JSONExtractString(event_json, 'transaction_id') AS transactionId,
    appmetrica_device_id AS appmetricaDeviceId,
    os_name AS osName,
    profile_id AS crmUserId,
    JSONExtractString(event_json, 'coupon') AS promoCode,    
    toDate(__date) AS __date, 
    toDateTime(event_receive_datetime) AS event_datetime, 
    0 AS screen_view
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_events' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("app_version_name" as String) as "app_version_name" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("event_json" as String) as "event_json" ,
                    cast("event_name" as String) as "event_name" ,
                    cast("event_receive_datetime" as String) as "event_receive_datetime" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_events

            
        )

        )
)
, join_appmetrica_events_prepare AS (
SELECT 
    __date,
    toLowCardinality(__table_name) AS __table_name,
    event_datetime,
    toLowCardinality(accountName) AS accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId,   
    promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    transactionId,
    '' AS UtmHash,
    0 AS sessions,
    eventName = 'add_to_cart' AS addToCartSessions,
    eventName = 'view_cart' AS cartViewSessions,
    eventName = 'begin_checkout' AS checkoutSessions,
    eventName = 'purchase' AS webSalesSessions,
    eventName = 'purchase' AS sales,    
    assumeNotNull(coalesce(if(eventName = 'purchase', toFloat64(nullif(JSONExtractString(JSONExtractString(JSONExtractString(eventJson, 'value'), 'fiat'), 'value'), '')), 0), 0)) AS amountSales,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindVirtualCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS registrationCardSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'IntroRegistrationButtonClick' AND (JSONExtractString(eventJson, 'item_name') = 'AdventCalendar' or JSONExtractString(eventJson, 'item_name') = 'ScratchCards') as registrationButtonClick,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'BindPlasticCard' AND  JSONExtractString(eventJson, 'item_name') = 'Auth' AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CashbackButtonRegistration' AND  JSONExtractString(eventJson, 'item_name') = 'Cashback' AS registrationCashbackSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'ButtonActivate' AS instantDiscountActivationSessions,
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponDetailActivate' AND  JSONExtractString(eventJson, 'item_name') = 'Coupons') OR 
    (eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'CouponListActivateCoupon' AND  JSONExtractString(eventJson, 'item_name') = 'Club') AS couponActivationSessions,
    eventName = 'select_content' AND  JSONExtractString(eventJson, 'item_category') = 'TakePartButton' AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link,
    JSONExtractString(eventJson, 'item_category') AS __itemCategory, 
    JSONExtractString(eventJson, 'item_name') AS __itemName,
    row_number() over() AS __rn,
    eventName AS __eventName, 
    sessionId AS __sessionId
FROM union_events
WHERE addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 OR registrationButtonClick > 0
  OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
  OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
  OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 
  OR couponActivationSessions > 0 OR participationInLotterySessions > 0 or screenView > 0
ORDER BY __date
)
, min_event AS (
SELECT MIN(__rn) AS __rn 
FROM join_appmetrica_events_prepare
GROUP BY appmetricaDeviceId, __sessionId, __eventName, __itemCategory, __itemName
), join_appmetrica_events_events AS (
SELECT * EXCEPT(__itemCategory, __itemName, __rn, __eventName, __sessionId)
FROM join_appmetrica_events_prepare
WHERE __rn IN (SELECT __rn FROM min_event) AND  
    (addToCartSessions > 0 OR cartViewSessions > 0 OR checkoutSessions > 0 
    OR webSalesSessions > 0  OR sales > 0 OR amountSales > 0 
    OR registrationCardSessions > 0 OR linkingCardToPhoneNumberSessions > 0 
    OR registrationCashbackSessions > 0 OR instantDiscountActivationSessions > 0 OR registrationButtonClick > 0
    OR couponActivationSessions > 0 OR participationInLotterySessions > 0)
), join_appmetrica_events_install AS (
SELECT
    toDateTime(__date) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(install_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    assumeNotNull(COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id, '')) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    if(match(click_url_parameters, 'organic'), 'Органическая установка', assumeNotNull(coalesce(lower(if(length(utmSource) > 0, concat(utmSource, ' / ', utmMedium), null)), publisher_name, ''))) AS adSourceDirty,
    extract(click_url_parameters, 'utm_source=([^&]*)') AS utmSource,
    extract(click_url_parameters, 'utm_medium=([^&]*)') AS utmMedium,
    extract(click_url_parameters, 'utm_campaign=([^&]*)') AS utmCampaign,
    extract(click_url_parameters, 'utm_term=([^&]*)') AS utmTerm,
    extract(click_url_parameters, 'utm_content=([^&]*)') AS utmContent,
    '' AS transactionId,
    greatest(coalesce(extract(utmContent, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(utmCampaign, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    is_reinstallation = 'false' AS installApp,
    1 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppInstallStat') AS __link
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_installations' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("click_datetime" as String) as "click_datetime" ,
                    cast("click_url_parameters" as String) as "click_url_parameters" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("install_receive_datetime" as String) as "install_receive_datetime" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("is_reinstallation" as String) as "is_reinstallation" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("publisher_name" as String) as "publisher_name" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_installations

            
        )

        )
), join_appmetrica_events_screen_view AS (
SELECT
    toDateTime(date_add(hour, 23, date_add(minute, 59, toDateTime(__date)))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(event_receive_datetime) AS event_datetime, 
    accountName,
    appmetricaDeviceId,
    mobileAdsId,
    crmUserId, 
    '' AS promoCode,
    osName,
    cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS utmHash,
    0 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,    
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    screen_view AS screenView,
    0 AS installApp,
    0 AS installs,
    '' AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppEventStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_screen_view' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("event_receive_datetime" as DateTime) as "event_receive_datetime" ,
                    cast("mobileAdsId" as String) as "mobileAdsId" ,
                    cast("accountName" as String) as "accountName" ,
                    cast("appmetricaDeviceId" as String) as "appmetricaDeviceId" ,
                    cast("cityName" as String) as "cityName" ,
                    cast("osName" as String) as "osName" ,
                    cast("crmUserId" as String) as "crmUserId" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("session_id" as String) as "session_id" ,
                    cast("screen_view" as UInt64) as "screen_view" 

            from test.incremental_appmetrica_events_default_screen_view

            
        )

        )
), join_appmetrica_events_sessions_starts AS (
SELECT
    toDateTime(date_add(minute, 1, toDateTime(__date))) AS __date, 
    toLowCardinality(__table_name) AS __table_name,
    toDateTime(session_start_receive_datetime) AS event_datetime, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    appmetrica_device_id AS appmetricaDeviceId,
    COALESCE(nullIf(google_aid, ''), nullIf(ios_ifa, ''), appmetrica_device_id) AS mobileAdsId,
    profile_id AS crmUserId,
    '' AS promoCode,
    os_name AS osName,
    city AS cityName,
    '' AS adSourceDirty,
    '' AS utmSource,
    '' AS utmMedium,
    '' AS utmCampaign,
    '' AS utmTerm,
    '' AS utmContent,
    '' AS transactionId,
    '' AS UtmHash,
    1 AS sessions,
    0 AS addToCartSessions,
    0 AS cartViewSessions,
    0 AS checkoutSessions,
    0 AS webSalesSessions,
    0 AS sales,
    0 AS amountSales,
    0 AS registrationCardSessions,
    0 AS registrationButtonClick,
    0 AS linkingCardToPhoneNumberSessions,
    0 AS registrationLendingPromotionsSessions,
    0 AS registrationCashbackSessions,
    0 AS instantDiscountActivationSessions,
    0 AS couponActivationSessions,
    0 AS participationInLotterySessions,
    0 AS pagesViews,
    0 AS screenView,
    0 AS installApp,
    0 AS installs,
    CONCAT(installation_id, appmetrica_device_id) AS installationDeviceId,
    __emitted_at,
    toLowCardinality('AppSessionStat') AS __link 
FROM (
    

        (
            select
                cast('test.incremental_appmetrica_events_default_sessions_starts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("appmetrica_device_id" as String) as "appmetrica_device_id" ,
                    cast("city" as String) as "city" ,
                    cast("google_aid" as String) as "google_aid" ,
                    cast("installation_id" as String) as "installation_id" ,
                    cast("ios_ifa" as String) as "ios_ifa" ,
                    cast("os_name" as String) as "os_name" ,
                    cast("profile_id" as String) as "profile_id" ,
                    cast("session_start_receive_datetime" as String) as "session_start_receive_datetime" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_appmetrica_events_default_sessions_starts

            
        )

        )
)SELECT * 
FROM join_appmetrica_events_deeplinks
UNION ALL
SELECT * 
FROM join_appmetrica_events_events
UNION ALL
SELECT * 
FROM join_appmetrica_events_install
UNION ALL
SELECT * 
FROM join_appmetrica_events_screen_view
UNION ALL
SELECT * 
FROM join_appmetrica_events_sessions_starts





  
    ...
[0m11:34:15.951064 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:15.954966 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    drop table if exists test.join_mt_datestat__dbt_backup 
  
  ...
[0m11:34:15.959185 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.960488 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */

    rename table test.join_mt_datestat__dbt_tmp to test.join_mt_datestat__dbt_backup 
  
  ...
[0m11:34:15.966065 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.967805 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */
EXCHANGE TABLES test.join_mt_datestat__dbt_backup AND test.join_mt_datestat 
  
  ...
[0m11:34:15.973989 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:15.979859 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_mt_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_mt_datestat"} */
drop table if exists test.join_mt_datestat__dbt_backup 
  ...
[0m11:34:15.984599 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:15.986477 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_mt_datestat (execute): 2024-06-06 11:34:15.856153 => 2024-06-06 11:34:15.986405
[0m11:34:15.987856 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f259990>]}
[0m11:34:15.988557 [info ] [Thread-2 (]: 41 of 90 OK created sql incremental model test.join_mt_datestat ................ [[32mOK[0m in 0.28s]
[0m11:34:15.989210 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_mt_datestat
[0m11:34:15.989642 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_sheets_periodstat
[0m11:34:15.990565 [info ] [Thread-2 (]: 42 of 90 START sql incremental model test.join_sheets_periodstat ............... [RUN]
[0m11:34:15.991942 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_sheets_periodstat'
[0m11:34:15.992215 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_sheets_periodstat)
[0m11:34:15.992433 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_sheets_periodstat
[0m11:34:15.996504 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_sheets__%'
    GROUP BY table

...
[0m11:34:16.009299 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.011464 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_sheets__%' AND 
        name='__date'

  ...
[0m11:34:16.018648 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.020893 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_sheets_periodstat_default_planCosts' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_sheets_periodstat_default_planCosts
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m11:34:16.045447 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.049405 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_sheets_periodstat_[^_]+_planCosts$')        
...
[0m11:34:16.060573 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.065190 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'incremental_sheets_periodstat_default_planCosts'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.073253 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.077416 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_sheets_periodstat"
[0m11:34:16.078327 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_sheets_periodstat (compile): 2024-06-06 11:34:15.992535 => 2024-06-06 11:34:16.078177
[0m11:34:16.078736 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_sheets_periodstat
[0m11:34:16.088351 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

            

    
        create table test.join_sheets_periodstat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_sheets_periodstat_default_planCosts
SELECT
    __date,
    Campaign AS campaign,
    toFloat64(Cost) AS cost,
    toDate(Period_start) AS periodStart,
    toDate(Period_end) AS periodEnd,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name, 
    toLowCardinality('ManualAdCostStat') AS __link

FROM (
    

        (
            select
                cast('test.incremental_sheets_periodstat_default_planCosts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("Campaign" as String) as "Campaign" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Period_end" as String) as "Period_end" ,
                    cast("Period_start" as String) as "Period_start" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_sheets_periodstat_default_planCosts

            
        )

        )




    )
        ...
[0m11:34:16.109782 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.113891 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.120900 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.122747 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_sheets_periodstat"
[0m11:34:16.123897 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

        
  
    
    
        
        insert into test.join_sheets_periodstat__dbt_tmp ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_sheets_periodstat_default_planCosts
SELECT
    __date,
    Campaign AS campaign,
    toFloat64(Cost) AS cost,
    toDate(Period_start) AS periodStart,
    toDate(Period_end) AS periodEnd,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name, 
    toLowCardinality('ManualAdCostStat') AS __link

FROM (
    

        (
            select
                cast('test.incremental_sheets_periodstat_default_planCosts' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("Campaign" as String) as "Campaign" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Period_end" as String) as "Period_end" ,
                    cast("Period_start" as String) as "Period_start" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_sheets_periodstat_default_planCosts

            
        )

        )




  
    ...
[0m11:34:16.136051 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.139898 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    drop table if exists test.join_sheets_periodstat__dbt_backup 
  
  ...
[0m11:34:16.143310 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.144436 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */

    rename table test.join_sheets_periodstat__dbt_tmp to test.join_sheets_periodstat__dbt_backup 
  
  ...
[0m11:34:16.147905 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.149129 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */
EXCHANGE TABLES test.join_sheets_periodstat__dbt_backup AND test.join_sheets_periodstat 
  
  ...
[0m11:34:16.153278 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.157792 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_sheets_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_sheets_periodstat"} */
drop table if exists test.join_sheets_periodstat__dbt_backup 
  ...
[0m11:34:16.161581 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.162946 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_sheets_periodstat (execute): 2024-06-06 11:34:16.079002 => 2024-06-06 11:34:16.162872
[0m11:34:16.163719 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf682b0>]}
[0m11:34:16.164193 [info ] [Thread-2 (]: 42 of 90 OK created sql incremental model test.join_sheets_periodstat .......... [[32mOK[0m in 0.17s]
[0m11:34:16.164607 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_sheets_periodstat
[0m11:34:16.164938 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m11:34:16.165364 [info ] [Thread-2 (]: 43 of 90 START sql table model test.join_utmcraft_registry_utmhashregistry ..... [RUN]
[0m11:34:16.166455 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry'
[0m11:34:16.167138 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry)
[0m11:34:16.167796 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m11:34:16.173626 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_utmcraft__%'
    GROUP BY table

...
[0m11:34:16.182532 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.184817 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_utmcraft_registry_[^_]+_utmresult$')        
...
[0m11:34:16.193373 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.24 seconds
[0m11:34:16.194463 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.198356 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    drop table if exists test.join_appmetrica_events__dbt_backup 
  
  ...
[0m11:34:16.288325 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'incremental_utmcraft_registry_default_utmresult'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.290758 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.291928 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */

    rename table test.join_appmetrica_events__dbt_tmp to test.join_appmetrica_events__dbt_backup 
  
  ...
[0m11:34:16.294132 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.296459 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"
[0m11:34:16.297526 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.298759 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */
EXCHANGE TABLES test.join_appmetrica_events__dbt_backup AND test.join_appmetrica_events 
  
  ...
[0m11:34:16.299782 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry (compile): 2024-06-06 11:34:16.168150 => 2024-06-06 11:34:16.299677
[0m11:34:16.300210 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m11:34:16.304704 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

            

    
        create table test.join_utmcraft_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_utmcraft_registry_default_utmresult
SELECT
    utm_hashcode AS utmHash,
    JSONExtractString(data, '4') AS utm_base_url,
    JSONExtractString(data, '5') AS utm_utmSource,
    if(JSONExtractString(data, '6') = 'указать вручную', JSONExtractString(data, '95'), JSONExtractString(data, '6')) AS utm_utmMedium,
    JSONExtractString(data, '9') AS utm_utmCampaign,
    JSONExtractString(data, '97') AS utm_project,
    if(JSONExtractString(data, '7') = 'custom-value-input-field',JSONExtractString(data, 'custom-7'),JSONExtractString(data, '7')) AS utm_utmContent,
    JSONExtractString(data, '66') AS utm_strategy,
    concat(if(JSONExtractString(data, '69') = 'custom-value-input-field',JSONExtractString(data, 'custom-69'),JSONExtractString(data, '69')),
            if(JSONExtractString(data, '69') != '' or JSONExtractString(data, 'custom-69') != '', ';', ''),
           if(JSONExtractString(data, '88') = 'custom-value-input-field',JSONExtractString(data, 'custom-88'),JSONExtractString(data, '88')),
           if(JSONExtractString(data, '88') != '' or JSONExtractString(data, 'custom-88') != '', ';', ''),
           if(JSONExtractString(data, '87') = 'custom-value-input-field',JSONExtractString(data, 'custom-87'),JSONExtractString(data, '87')),
           if(JSONExtractString(data, '87') != '' or JSONExtractString(data, 'custom-87') != '', ';', ''),
           if(JSONExtractString(data, '89') = 'custom-value-input-field',JSONExtractString(data, 'custom-89'),JSONExtractString(data, '89')),
           if(JSONExtractString(data, '89') != '' or JSONExtractString(data, 'custom-89') != '', ';', ''),
           if(JSONExtractString(data, '90') = 'custom-value-input-field',JSONExtractString(data, 'custom-90'),JSONExtractString(data, '90')),
           if(JSONExtractString(data, '90') != '' or JSONExtractString(data, 'custom-90') != '', ';', ''),
           if(JSONExtractString(data, '91') = 'custom-value-input-field',JSONExtractString(data, 'custom-91'),JSONExtractString(data, '91')),
           if(JSONExtractString(data, '91') != '' or JSONExtractString(data, 'custom-91') != '', ';', ''),
           if(JSONExtractString(data, '93') = 'custom-value-input-field',JSONExtractString(data, 'custom-93'),JSONExtractString(data, '93')),
           if(JSONExtractString(data, '93') != '' or JSONExtractString(data, 'custom-93') != '', ';', ''),
           if(JSONExtractString(data, '85') = 'custom-value-input-field',JSONExtractString(data, 'custom-85'),JSONExtractString(data, '85')),
           if(JSONExtractString(data, '85') != '' or JSONExtractString(data, 'custom-85') != '', ';', ''),
           if(JSONExtractString(data, '92') = 'custom-value-input-field',JSONExtractString(data, 'custom-92'),JSONExtractString(data, '92')),
           if(JSONExtractString(data, '92') != '' or JSONExtractString(data, 'custom-92') != '', ';', ''),
           if(JSONExtractString(data, '86') = 'custom-value-input-field',JSONExtractString(data, 'custom-86'),JSONExtractString(data, '86'))) AS utm_audience,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    'UtmHashRegistry' AS __link         
FROM (
    

        (
            select
                cast('test.incremental_utmcraft_registry_default_utmresult' as String) as _dbt_source_relation,

                
                    cast("created_at" as String) as "created_at" ,
                    cast("created_by_id" as String) as "created_by_id" ,
                    cast("data" as String) as "data" ,
                    cast("form_id" as String) as "form_id" ,
                    cast("id" as String) as "id" ,
                    cast("updated_at" as String) as "updated_at" ,
                    cast("updated_by_id" as String) as "updated_by_id" ,
                    cast("utm_hashcode" as String) as "utm_hashcode" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_utmcraft_registry_default_utmresult

            
        )

        )





    )
        ...
[0m11:34:16.305913 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.310077 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_appmetrica_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_appmetrica_events"} */
drop table if exists test.join_appmetrica_events__dbt_backup 
  ...
[0m11:34:16.314030 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.315470 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_appmetrica_events (execute): 2024-06-06 11:34:15.786839 => 2024-06-06 11:34:16.315391
[0m11:34:16.316251 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf7c3a0>]}
[0m11:34:16.316761 [info ] [Thread-1 (]: 39 of 90 OK created sql incremental model test.join_appmetrica_events .......... [[32mOK[0m in 0.79s]
[0m11:34:16.317151 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_appmetrica_events
[0m11:34:16.317511 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_vkads_datestat
[0m11:34:16.318378 [info ] [Thread-1 (]: 44 of 90 START sql incremental model test.join_vkads_datestat .................. [RUN]
[0m11:34:16.319206 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_vkads_datestat'
[0m11:34:16.319573 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_vkads_datestat)
[0m11:34:16.319762 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_vkads_datestat
[0m11:34:16.323444 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_vkads__%'
    GROUP BY table

...
[0m11:34:16.334357 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.336085 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_vkads__%' AND 
        name='__date'

  ...
[0m11:34:16.337838 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:16.341992 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'join_utmcraft_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.343596 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.345522 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_vkads_datestat_default_ad_plans_statistics' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_vkads_datestat_default_ad_plans_statistics
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m11:34:16.348289 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.350667 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"
[0m11:34:16.351796 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */

  
    
    
        
        insert into test.join_utmcraft_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.incremental_utmcraft_registry_default_utmresult
SELECT
    utm_hashcode AS utmHash,
    JSONExtractString(data, '4') AS utm_base_url,
    JSONExtractString(data, '5') AS utm_utmSource,
    if(JSONExtractString(data, '6') = 'указать вручную', JSONExtractString(data, '95'), JSONExtractString(data, '6')) AS utm_utmMedium,
    JSONExtractString(data, '9') AS utm_utmCampaign,
    JSONExtractString(data, '97') AS utm_project,
    if(JSONExtractString(data, '7') = 'custom-value-input-field',JSONExtractString(data, 'custom-7'),JSONExtractString(data, '7')) AS utm_utmContent,
    JSONExtractString(data, '66') AS utm_strategy,
    concat(if(JSONExtractString(data, '69') = 'custom-value-input-field',JSONExtractString(data, 'custom-69'),JSONExtractString(data, '69')),
            if(JSONExtractString(data, '69') != '' or JSONExtractString(data, 'custom-69') != '', ';', ''),
           if(JSONExtractString(data, '88') = 'custom-value-input-field',JSONExtractString(data, 'custom-88'),JSONExtractString(data, '88')),
           if(JSONExtractString(data, '88') != '' or JSONExtractString(data, 'custom-88') != '', ';', ''),
           if(JSONExtractString(data, '87') = 'custom-value-input-field',JSONExtractString(data, 'custom-87'),JSONExtractString(data, '87')),
           if(JSONExtractString(data, '87') != '' or JSONExtractString(data, 'custom-87') != '', ';', ''),
           if(JSONExtractString(data, '89') = 'custom-value-input-field',JSONExtractString(data, 'custom-89'),JSONExtractString(data, '89')),
           if(JSONExtractString(data, '89') != '' or JSONExtractString(data, 'custom-89') != '', ';', ''),
           if(JSONExtractString(data, '90') = 'custom-value-input-field',JSONExtractString(data, 'custom-90'),JSONExtractString(data, '90')),
           if(JSONExtractString(data, '90') != '' or JSONExtractString(data, 'custom-90') != '', ';', ''),
           if(JSONExtractString(data, '91') = 'custom-value-input-field',JSONExtractString(data, 'custom-91'),JSONExtractString(data, '91')),
           if(JSONExtractString(data, '91') != '' or JSONExtractString(data, 'custom-91') != '', ';', ''),
           if(JSONExtractString(data, '93') = 'custom-value-input-field',JSONExtractString(data, 'custom-93'),JSONExtractString(data, '93')),
           if(JSONExtractString(data, '93') != '' or JSONExtractString(data, 'custom-93') != '', ';', ''),
           if(JSONExtractString(data, '85') = 'custom-value-input-field',JSONExtractString(data, 'custom-85'),JSONExtractString(data, '85')),
           if(JSONExtractString(data, '85') != '' or JSONExtractString(data, 'custom-85') != '', ';', ''),
           if(JSONExtractString(data, '92') = 'custom-value-input-field',JSONExtractString(data, 'custom-92'),JSONExtractString(data, '92')),
           if(JSONExtractString(data, '92') != '' or JSONExtractString(data, 'custom-92') != '', ';', ''),
           if(JSONExtractString(data, '86') = 'custom-value-input-field',JSONExtractString(data, 'custom-86'),JSONExtractString(data, '86'))) AS utm_audience,
    __emitted_at,
    toLowCardinality(__table_name) AS __table_name,
    'UtmHashRegistry' AS __link         
FROM (
    

        (
            select
                cast('test.incremental_utmcraft_registry_default_utmresult' as String) as _dbt_source_relation,

                
                    cast("created_at" as String) as "created_at" ,
                    cast("created_by_id" as String) as "created_by_id" ,
                    cast("data" as String) as "data" ,
                    cast("form_id" as String) as "form_id" ,
                    cast("id" as String) as "id" ,
                    cast("updated_at" as String) as "updated_at" ,
                    cast("updated_by_id" as String) as "updated_by_id" ,
                    cast("utm_hashcode" as String) as "utm_hashcode" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_utmcraft_registry_default_utmresult

            
        )

        )





  ...
[0m11:34:16.368466 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.369866 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */
EXCHANGE TABLES test.join_utmcraft_registry_utmhashregistry__dbt_backup AND test.join_utmcraft_registry_utmhashregistry 
  
  ...
[0m11:34:16.373666 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.375028 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:16.382095 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry"} */
drop table if exists test.join_utmcraft_registry_utmhashregistry__dbt_backup 
  ...
[0m11:34:16.384253 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_vkads_datestat_[^_]+_ad_plans_statistics$')        
...
[0m11:34:16.389012 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.390605 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry (execute): 2024-06-06 11:34:16.300422 => 2024-06-06 11:34:16.390457
[0m11:34:16.391526 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf2a260>]}
[0m11:34:16.392200 [info ] [Thread-2 (]: 43 of 90 OK created sql table model test.join_utmcraft_registry_utmhashregistry  [[32mOK[0m in 0.23s]
[0m11:34:16.392813 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_utmcraft_registry_utmhashregistry
[0m11:34:16.393253 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.join_yd_datestat
[0m11:34:16.394767 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.399428 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'incremental_vkads_datestat_default_ad_plans_statistics'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.395307 [info ] [Thread-2 (]: 45 of 90 START sql incremental model test.join_yd_datestat ..................... [RUN]
[0m11:34:16.401259 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_yd_datestat'
[0m11:34:16.401575 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_yd_datestat)
[0m11:34:16.401850 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.join_yd_datestat
[0m11:34:16.405845 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_yd__%'
    GROUP BY table

...
[0m11:34:16.406855 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.412115 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_vkads_periodstat_[^_]+_ad_plans$')        
...
[0m11:34:16.418839 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.419462 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.423238 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'incremental_vkads_periodstat_default_ad_plans'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.425107 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_yd__%' AND 
        name='__date'

  ...
[0m11:34:16.431096 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.432006 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.434750 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_vkads_datestat"
[0m11:34:16.437066 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_yd_datestat_default_custom_report' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_yd_datestat_default_custom_report
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m11:34:16.438934 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_vkads_datestat (compile): 2024-06-06 11:34:16.319865 => 2024-06-06 11:34:16.438798
[0m11:34:16.439328 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_vkads_datestat
[0m11:34:16.446280 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

            

    
        create table test.join_vkads_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_vkads_datestat_default_ad_plans_statistics
-- depends_on: test.incremental_vkads_periodstat_default_ad_plans
WITH ad_plans_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_datestat_default_ad_plans_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("ad_offers" as String) as "ad_offers" ,
                    cast("ad_plan_id" as String) as "ad_plan_id" ,
                    cast("base" as String) as "base" ,
                    cast("carousel" as String) as "carousel" ,
                    cast("date" as String) as "date" ,
                    cast("events" as String) as "events" ,
                    cast("moat" as String) as "moat" ,
                    cast("playable" as String) as "playable" ,
                    cast("romi" as String) as "romi" ,
                    cast("social_network" as String) as "social_network" ,
                    cast("tps" as String) as "tps" ,
                    cast("uniques" as String) as "uniques" ,
                    cast("uniques_video" as String) as "uniques_video" ,
                    cast("video" as String) as "video" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_datestat_default_ad_plans_statistics

            
        )

        ) 
WHERE toDate(__date) between '2024-02-26' and '2024-03-02'),

ad_plans AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_periodstat_default_ad_plans' as String) as _dbt_source_relation,

                
                    cast("ad_groups" as String) as "ad_groups" ,
                    cast("autobidding_mode" as String) as "autobidding_mode" ,
                    cast("budget_limit" as String) as "budget_limit" ,
                    cast("budget_limit_day" as String) as "budget_limit_day" ,
                    cast("created" as String) as "created" ,
                    cast("date_end" as String) as "date_end" ,
                    cast("date_start" as String) as "date_start" ,
                    cast("id" as String) as "id" ,
                    cast("max_price" as String) as "max_price" ,
                    cast("name" as String) as "name" ,
                    cast("objective" as String) as "objective" ,
                    cast("priced_goal" as String) as "priced_goal" ,
                    cast("pricelist_id" as String) as "pricelist_id" ,
                    cast("status" as String) as "status" ,
                    cast("updated" as String) as "updated" ,
                    cast("vkads_status" as String) as "vkads_status" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_periodstat_default_ad_plans

            
        )

        )
)

SELECT
    toDate(ad_plans_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,
    toLowCardinality(splitByChar('_', ad_plans.__table_name)[6]) AS accountName,
    toLowCardinality(ad_plans.__table_name) AS __table_name,
    'VK Ads' AS adSourceDirty,
    ad_plans.name AS adCampaignName,
    ad_plans.id AS adId,
    toFloat64(JSONExtractString(ad_plans_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'clicks')) AS clicks,
    ad_plans.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM ad_plans
JOIN ad_plans_statistics ON ad_plans.id = ad_plans_statistics.ad_plan_id






    )
        ...
[0m11:34:16.459160 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.461999 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_yd_datestat_[^_]+')        
...
[0m11:34:16.470174 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.477199 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'incremental_yd_datestat_default_custom_report'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.482332 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:16.485484 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.486611 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.491316 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_yd_datestat"
[0m11:34:16.492333 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.493982 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_vkads_datestat"
[0m11:34:16.494784 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_yd_datestat (compile): 2024-06-06 11:34:16.402031 => 2024-06-06 11:34:16.494653
[0m11:34:16.495257 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.join_yd_datestat
[0m11:34:16.500302 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

            

    
        create table test.join_yd_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_yd_datestat_default_custom_report
WITH cmps AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_yd_datestat_default_custom_report' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("AdId" as String) as "AdId" ,
                    cast("CampaignId" as String) as "CampaignId" ,
                    cast("CampaignName" as String) as "CampaignName" ,
                    cast("CampaignType" as String) as "CampaignType" ,
                    cast("Clicks" as String) as "Clicks" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Date" as String) as "Date" ,
                    cast("Impressions" as String) as "Impressions" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_yd_datestat_default_custom_report

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-15' AND '2024-02-28')

SELECT  
    toDate(__date) AS __date,
    toLowCardinality('*') AS reportType, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    'Yandex Direct Ads' AS adSourceDirty,
    --'' AS productName,
    CampaignName AS adCampaignName,
    CampaignType AS adGroupName,
    CampaignId AS adId,
    '' AS adPhraseId,
    --'' AS utmSource,
    --'' AS utmMedium,
    --'' AS utmCampaign,
    --'' AS utmTerm,
    --'' AS utmContent,
    arrayElement(splitByChar('~', CampaignName), 2) AS utmHash,
    --'' AS adTitle1,
    --'' AS adTitle2,
    --'' AS adText,
    --'' AS adPhraseName,  
    (toFloat64(Cost)/1000000)*1.2 AS adCost,
    toInt32(Impressions) AS impressions,
    toInt32(Clicks) AS clicks,
    __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM cmps





    )
        ...
[0m11:34:16.500830 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

        
  
    
    
        
        insert into test.join_vkads_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_vkads_datestat_default_ad_plans_statistics
-- depends_on: test.incremental_vkads_periodstat_default_ad_plans
WITH ad_plans_statistics AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_datestat_default_ad_plans_statistics' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("ad_offers" as String) as "ad_offers" ,
                    cast("ad_plan_id" as String) as "ad_plan_id" ,
                    cast("base" as String) as "base" ,
                    cast("carousel" as String) as "carousel" ,
                    cast("date" as String) as "date" ,
                    cast("events" as String) as "events" ,
                    cast("moat" as String) as "moat" ,
                    cast("playable" as String) as "playable" ,
                    cast("romi" as String) as "romi" ,
                    cast("social_network" as String) as "social_network" ,
                    cast("tps" as String) as "tps" ,
                    cast("uniques" as String) as "uniques" ,
                    cast("uniques_video" as String) as "uniques_video" ,
                    cast("video" as String) as "video" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_datestat_default_ad_plans_statistics

            
        )

        ) 
WHERE toDate(__date) between '2024-02-26' and '2024-03-02'),

ad_plans AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_vkads_periodstat_default_ad_plans' as String) as _dbt_source_relation,

                
                    cast("ad_groups" as String) as "ad_groups" ,
                    cast("autobidding_mode" as String) as "autobidding_mode" ,
                    cast("budget_limit" as String) as "budget_limit" ,
                    cast("budget_limit_day" as String) as "budget_limit_day" ,
                    cast("created" as String) as "created" ,
                    cast("date_end" as String) as "date_end" ,
                    cast("date_start" as String) as "date_start" ,
                    cast("id" as String) as "id" ,
                    cast("max_price" as String) as "max_price" ,
                    cast("name" as String) as "name" ,
                    cast("objective" as String) as "objective" ,
                    cast("priced_goal" as String) as "priced_goal" ,
                    cast("pricelist_id" as String) as "pricelist_id" ,
                    cast("status" as String) as "status" ,
                    cast("updated" as String) as "updated" ,
                    cast("vkads_status" as String) as "vkads_status" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_vkads_periodstat_default_ad_plans

            
        )

        )
)

SELECT
    toDate(ad_plans_statistics.__date) AS __date,
    toLowCardinality('*') AS reportType,
    toLowCardinality(splitByChar('_', ad_plans.__table_name)[6]) AS accountName,
    toLowCardinality(ad_plans.__table_name) AS __table_name,
    'VK Ads' AS adSourceDirty,
    ad_plans.name AS adCampaignName,
    ad_plans.id AS adId,
    toFloat64(JSONExtractString(ad_plans_statistics.base, 'spent'))* 1.2 AS adCost,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'shows')) AS impressions,
    toInt32(JSONExtractString(ad_plans_statistics.base, 'clicks')) AS clicks,
    ad_plans.__emitted_at AS __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM ad_plans
JOIN ad_plans_statistics ON ad_plans.id = ad_plans_statistics.ad_plan_id






  
    ...
[0m11:34:16.522544 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.525980 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.527421 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:16.531300 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    drop table if exists test.join_vkads_datestat__dbt_backup 
  
  ...
[0m11:34:16.533293 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.535074 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_yd_datestat"
[0m11:34:16.536054 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.537429 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */

    rename table test.join_vkads_datestat__dbt_tmp to test.join_vkads_datestat__dbt_backup 
  
  ...
[0m11:34:16.539119 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

        
  
    
    
        
        insert into test.join_yd_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adGroupName", "adId", "adPhraseId", "utmHash", "adCost", "impressions", "clicks", "__emitted_at", "__link")
  -- depends_on: test.incremental_yd_datestat_default_custom_report
WITH cmps AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_yd_datestat_default_custom_report' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("AdId" as String) as "AdId" ,
                    cast("CampaignId" as String) as "CampaignId" ,
                    cast("CampaignName" as String) as "CampaignName" ,
                    cast("CampaignType" as String) as "CampaignType" ,
                    cast("Clicks" as String) as "Clicks" ,
                    cast("Cost" as String) as "Cost" ,
                    cast("Date" as String) as "Date" ,
                    cast("Impressions" as String) as "Impressions" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_yd_datestat_default_custom_report

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-15' AND '2024-02-28')

SELECT  
    toDate(__date) AS __date,
    toLowCardinality('*') AS reportType, 
    toLowCardinality(splitByChar('_', __table_name)[6]) AS accountName,
    toLowCardinality(__table_name) AS __table_name,
    'Yandex Direct Ads' AS adSourceDirty,
    --'' AS productName,
    CampaignName AS adCampaignName,
    CampaignType AS adGroupName,
    CampaignId AS adId,
    '' AS adPhraseId,
    --'' AS utmSource,
    --'' AS utmMedium,
    --'' AS utmCampaign,
    --'' AS utmTerm,
    --'' AS utmContent,
    arrayElement(splitByChar('~', CampaignName), 2) AS utmHash,
    --'' AS adTitle1,
    --'' AS adTitle2,
    --'' AS adText,
    --'' AS adPhraseName,  
    (toFloat64(Cost)/1000000)*1.2 AS adCost,
    toInt32(Impressions) AS impressions,
    toInt32(Clicks) AS clicks,
    __emitted_at,
    toLowCardinality('AdCostStat') AS __link 
FROM cmps





  
    ...
[0m11:34:16.541939 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.543300 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */
EXCHANGE TABLES test.join_vkads_datestat__dbt_backup AND test.join_vkads_datestat 
  
  ...
[0m11:34:16.547275 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.552384 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_vkads_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_vkads_datestat"} */
drop table if exists test.join_vkads_datestat__dbt_backup 
  ...
[0m11:34:16.556177 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.557011 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.558798 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_vkads_datestat (execute): 2024-06-06 11:34:16.439525 => 2024-06-06 11:34:16.558731
[0m11:34:16.564292 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    drop table if exists test.join_yd_datestat__dbt_backup 
  
  ...
[0m11:34:16.565484 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf7d6f0>]}
[0m11:34:16.567176 [info ] [Thread-1 (]: 44 of 90 OK created sql incremental model test.join_vkads_datestat ............. [[32mOK[0m in 0.25s]
[0m11:34:16.567884 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_vkads_datestat
[0m11:34:16.568360 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.join_ym_events
[0m11:34:16.569376 [info ] [Thread-1 (]: 46 of 90 START sql incremental model test.join_ym_events ....................... [RUN]
[0m11:34:16.571508 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.join_ym_events'
[0m11:34:16.572416 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.572923 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.join_ym_events)
[0m11:34:16.574198 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */

    rename table test.join_yd_datestat__dbt_tmp to test.join_yd_datestat__dbt_backup 
  
  ...
[0m11:34:16.574774 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.join_ym_events
[0m11:34:16.579747 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    SELECT 
        table, 
        groupArray(name) AS fields
    
    FROM system.columns
    
    WHERE database = '' AND table LIKE 'incremental_ym__%'
    GROUP BY table

...
[0m11:34:16.582882 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.584496 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */
EXCHANGE TABLES test.join_yd_datestat__dbt_backup AND test.join_yd_datestat 
  
  ...
[0m11:34:16.587313 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.589102 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    
    SELECT 
        table 
    
    FROM system.columns 
    
    WHERE 
        database ='test' AND 
        table LIKE 'normalize_ym__%' AND 
        name='__date'

  ...
[0m11:34:16.590125 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.597931 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.599286 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_yd_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_yd_datestat"} */
drop table if exists test.join_yd_datestat__dbt_backup 
  ...
[0m11:34:16.601666 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

SELECT max(toDate(min_date)) as date_from,
       max(toDate(max_date)) as date_to
FROM (

    SELECT 
        'normalize_ym_events_default_yandex_metrika_stream' as table_name,
        max(toDate(__date)) as max_date, 
        min(toDate(__date)) as min_date,
        True as should_full_refresh
    
    FROM test.normalize_ym_events_default_yandex_metrika_stream
    
    
    WHERE toDate(__date) > '1972-01-01'
    

)
WHERE min_date > '1972-01-01'
...
[0m11:34:16.606813 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.608664 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.join_yd_datestat (execute): 2024-06-06 11:34:16.495503 => 2024-06-06 11:34:16.608565
[0m11:34:16.609753 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf44580>]}
[0m11:34:16.610326 [info ] [Thread-2 (]: 45 of 90 OK created sql incremental model test.join_yd_datestat ................ [[32mOK[0m in 0.21s]
[0m11:34:16.611091 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.join_yd_datestat
[0m11:34:16.611486 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m11:34:16.612688 [info ] [Thread-2 (]: 47 of 90 START sql table model test.combine_registry_appprofilematching ........ [RUN]
[0m11:34:16.614347 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_registry_appprofilematching'
[0m11:34:16.614683 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_registry_appprofilematching)
[0m11:34:16.614848 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m11:34:16.621008 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_registry_appprofilematching')        
...
[0m11:34:16.630581 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.634945 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

    select name, type from system.columns where table = 'join_appmetrica_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.636845 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:16.639761 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'incremental_ym_events_[^_]+_yandex_metrika_stream$')        
...
[0m11:34:16.641448 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.645575 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_registry_appprofilematching"
[0m11:34:16.647998 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_registry_appprofilematching (compile): 2024-06-06 11:34:16.614955 => 2024-06-06 11:34:16.647743
[0m11:34:16.649201 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.649662 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m11:34:16.653627 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'incremental_ym_events_default_yandex_metrika_stream'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.661431 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

            

    
        create table test.combine_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_appmetrica_registry_appprofilematching
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_appmetrica_registry_appprofilematching
        )

        ) 


    )
        ...
[0m11:34:16.668467 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.672372 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.join_ym_events"
[0m11:34:16.672959 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_ym_events (compile): 2024-06-06 11:34:16.576079 => 2024-06-06 11:34:16.672847
[0m11:34:16.673324 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.join_ym_events
[0m11:34:16.682035 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

            

    
        create table test.join_ym_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.incremental_ym_events_default_yandex_metrika_stream
WITH events AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_ym_events_default_yandex_metrika_stream' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("ymsclientID" as String) as "ymsclientID" ,
                    cast("ymsdateTime" as String) as "ymsdateTime" ,
                    cast("ymsgoalsID" as String) as "ymsgoalsID" ,
                    cast("ymsgoalsOrder" as String) as "ymsgoalsOrder" ,
                    cast("ymslastAdvEngine" as String) as "ymslastAdvEngine" ,
                    cast("ymslastReferalSource" as String) as "ymslastReferalSource" ,
                    cast("ymslastSearchEngine" as String) as "ymslastSearchEngine" ,
                    cast("ymslastTrafficSource" as String) as "ymslastTrafficSource" ,
                    cast("ymspageViews" as String) as "ymspageViews" ,
                    cast("ymsparsedParamsKey1" as String) as "ymsparsedParamsKey1" ,
                    cast("ymsparsedParamsKey2" as String) as "ymsparsedParamsKey2" ,
                    cast("ymspurchaseCoupon" as String) as "ymspurchaseCoupon" ,
                    cast("ymspurchaseID" as String) as "ymspurchaseID" ,
                    cast("ymspurchaseRevenue" as String) as "ymspurchaseRevenue" ,
                    cast("ymsregionCity" as String) as "ymsregionCity" ,
                    cast("ymsUTMCampaign" as String) as "ymsUTMCampaign" ,
                    cast("ymsUTMContent" as String) as "ymsUTMContent" ,
                    cast("ymsUTMMedium" as String) as "ymsUTMMedium" ,
                    cast("ymsUTMSource" as String) as "ymsUTMSource" ,
                    cast("ymsUTMTerm" as String) as "ymsUTMTerm" ,
                    cast("ymsvisitID" as String) as "ymsvisitID" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_ym_events_default_yandex_metrika_stream

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-16' AND '2024-02-29')

SELECT  
    __date, 
    __table_name,  
    ymsvisitID As visitId,
    ymsclientID AS clientId,
    extract(ymspurchaseCoupon, '\'([^\'\[\],]+)') AS promoCode,   
    'web' AS osName,
    ymsregionCity AS cityName,
    lower(ymsregionCity) AS cityCode,
    assumeNotNull(coalesce(lower(if(length(ymsUTMSource) > 0, concat(ymsUTMSource, ' / ', ymsUTMMedium), null)), 
    multiIf(ymslastTrafficSource = 'ad', lower(if(length(ymslastAdvEngine) > 0, concat(ymslastAdvEngine, ' / ', ymslastTrafficSource), null)),  
    ymslastTrafficSource = 'organic', lower(if(length(ymslastSearchEngine) > 0, concat(ymslastSearchEngine, ' / ', ymslastTrafficSource), null)),  
    lower(if(length(ymslastReferalSource) > 0, concat(ymslastReferalSource, ' / ', ymslastTrafficSource), null))), '')) AS adSourceDirty, 
    ymsUTMSource AS utmSource,
    ymsUTMMedium AS utmMedium,
    ymsUTMCampaign AS utmCampaign,
    ymsUTMTerm AS utmTerm,
    ymsUTMContent AS utmContent,
    ymspurchaseID AS transactionId,
    greatest(coalesce(extract(ymsUTMCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(ymsUTMContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    1 AS sessions,
    if(countSubstrings(ymsgoalsID, '131126368')>0,1,0) AS addToCartSessions, 
    if(countSubstrings(ymsgoalsID, '229829884')>0,1,0) AS cartViewSessions, 
    if(countSubstrings(ymsgoalsID, '131126557')>0,1,0) AS checkoutSessions, 
    if(countSubstrings(ymsgoalsID, '131127241')>0,1,0) AS webSalesSessions, 
    countSubstrings(ymsgoalsID, '131127241') AS sales, 
    --0.0 AS amountSales,
    if(countSubstrings(ymsgoalsID, '199402504')>0,1,0) AS registrationCardSessions,
    if(countSubstrings(ymsgoalsID, '199402597')>0,1,0) AS linkingCardToPhoneNumberSessions, 
    if(countSubstrings(ymsgoalsID, '226410025')>0,1,0) AS registrationLendingPromotionsSessions, 
    if(countSubstrings(ymsgoalsID, '232977064')>0,1,0) AS registrationCashbackSessions, 
    if(countSubstrings(ymsgoalsID, '232977580')>0,1,0) AS couponActivationSessions, 
    if(countSubstrings(ymsgoalsID, '232977647')>0,1,0) AS participationInLotterySessions,
    toUInt32(ymspageViews) AS pageViews,
    __emitted_at,
    toLowCardinality('VisitStat') AS __link 

FROM events





    )
        ...
[0m11:34:16.683017 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.687649 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

    select name, type from system.columns where table = 'combine_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.694520 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.696614 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_registry_appprofilematching"
[0m11:34:16.698371 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */

  
    
    
        
        insert into test.combine_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_appmetrica_registry_appprofilematching
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_appmetrica_registry_appprofilematching
        )

        ) 


  ...
[0m11:34:16.706161 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.707520 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */
EXCHANGE TABLES test.combine_registry_appprofilematching__dbt_backup AND test.combine_registry_appprofilematching 
  
  ...
[0m11:34:16.711905 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:16.715079 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    select name, type from system.columns where table = 'join_ym_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.715805 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.721596 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_appprofilematching"} */
drop table if exists test.combine_registry_appprofilematching__dbt_backup 
  ...
[0m11:34:16.722889 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.726716 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.join_ym_events"
[0m11:34:16.727776 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.729615 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_registry_appprofilematching (execute): 2024-06-06 11:34:16.654088 => 2024-06-06 11:34:16.729559
[0m11:34:16.730763 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f1e48b0>]}
[0m11:34:16.731869 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

        
  
    
    
        
        insert into test.join_ym_events__dbt_tmp ("__date", "__table_name", "visitId", "clientId", "promoCode", "osName", "cityName", "cityCode", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "registrationCardSessions", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "couponActivationSessions", "participationInLotterySessions", "pageViews", "__emitted_at", "__link")
  -- depends_on: test.incremental_ym_events_default_yandex_metrika_stream
WITH events AS (
SELECT * FROM (
    

        (
            select
                cast('test.incremental_ym_events_default_yandex_metrika_stream' as String) as _dbt_source_relation,

                
                    cast("__date" as Date) as "__date" ,
                    cast("__clientName" as String) as "__clientName" ,
                    cast("__productName" as String) as "__productName" ,
                    cast("ymsclientID" as String) as "ymsclientID" ,
                    cast("ymsdateTime" as String) as "ymsdateTime" ,
                    cast("ymsgoalsID" as String) as "ymsgoalsID" ,
                    cast("ymsgoalsOrder" as String) as "ymsgoalsOrder" ,
                    cast("ymslastAdvEngine" as String) as "ymslastAdvEngine" ,
                    cast("ymslastReferalSource" as String) as "ymslastReferalSource" ,
                    cast("ymslastSearchEngine" as String) as "ymslastSearchEngine" ,
                    cast("ymslastTrafficSource" as String) as "ymslastTrafficSource" ,
                    cast("ymspageViews" as String) as "ymspageViews" ,
                    cast("ymsparsedParamsKey1" as String) as "ymsparsedParamsKey1" ,
                    cast("ymsparsedParamsKey2" as String) as "ymsparsedParamsKey2" ,
                    cast("ymspurchaseCoupon" as String) as "ymspurchaseCoupon" ,
                    cast("ymspurchaseID" as String) as "ymspurchaseID" ,
                    cast("ymspurchaseRevenue" as String) as "ymspurchaseRevenue" ,
                    cast("ymsregionCity" as String) as "ymsregionCity" ,
                    cast("ymsUTMCampaign" as String) as "ymsUTMCampaign" ,
                    cast("ymsUTMContent" as String) as "ymsUTMContent" ,
                    cast("ymsUTMMedium" as String) as "ymsUTMMedium" ,
                    cast("ymsUTMSource" as String) as "ymsUTMSource" ,
                    cast("ymsUTMTerm" as String) as "ymsUTMTerm" ,
                    cast("ymsvisitID" as String) as "ymsvisitID" ,
                    cast("__table_name" as String) as "__table_name" ,
                    cast("__emitted_at" as DateTime) as "__emitted_at" ,
                    cast("__normalized_at" as DateTime) as "__normalized_at" 

            from test.incremental_ym_events_default_yandex_metrika_stream

            
        )

        ) 
WHERE toDate(__date) BETWEEN '2024-02-16' AND '2024-02-29')

SELECT  
    __date, 
    __table_name,  
    ymsvisitID As visitId,
    ymsclientID AS clientId,
    extract(ymspurchaseCoupon, '\'([^\'\[\],]+)') AS promoCode,   
    'web' AS osName,
    ymsregionCity AS cityName,
    lower(ymsregionCity) AS cityCode,
    assumeNotNull(coalesce(lower(if(length(ymsUTMSource) > 0, concat(ymsUTMSource, ' / ', ymsUTMMedium), null)), 
    multiIf(ymslastTrafficSource = 'ad', lower(if(length(ymslastAdvEngine) > 0, concat(ymslastAdvEngine, ' / ', ymslastTrafficSource), null)),  
    ymslastTrafficSource = 'organic', lower(if(length(ymslastSearchEngine) > 0, concat(ymslastSearchEngine, ' / ', ymslastTrafficSource), null)),  
    lower(if(length(ymslastReferalSource) > 0, concat(ymslastReferalSource, ' / ', ymslastTrafficSource), null))), '')) AS adSourceDirty, 
    ymsUTMSource AS utmSource,
    ymsUTMMedium AS utmMedium,
    ymsUTMCampaign AS utmCampaign,
    ymsUTMTerm AS utmTerm,
    ymsUTMContent AS utmContent,
    ymspurchaseID AS transactionId,
    greatest(coalesce(extract(ymsUTMCampaign, '__([a-zA-Z0-9]{8})'), ''), coalesce(extract(ymsUTMContent, '__([a-zA-Z0-9]{8})'), '')) AS utmHash,
    1 AS sessions,
    if(countSubstrings(ymsgoalsID, '131126368')>0,1,0) AS addToCartSessions, 
    if(countSubstrings(ymsgoalsID, '229829884')>0,1,0) AS cartViewSessions, 
    if(countSubstrings(ymsgoalsID, '131126557')>0,1,0) AS checkoutSessions, 
    if(countSubstrings(ymsgoalsID, '131127241')>0,1,0) AS webSalesSessions, 
    countSubstrings(ymsgoalsID, '131127241') AS sales, 
    --0.0 AS amountSales,
    if(countSubstrings(ymsgoalsID, '199402504')>0,1,0) AS registrationCardSessions,
    if(countSubstrings(ymsgoalsID, '199402597')>0,1,0) AS linkingCardToPhoneNumberSessions, 
    if(countSubstrings(ymsgoalsID, '226410025')>0,1,0) AS registrationLendingPromotionsSessions, 
    if(countSubstrings(ymsgoalsID, '232977064')>0,1,0) AS registrationCashbackSessions, 
    if(countSubstrings(ymsgoalsID, '232977580')>0,1,0) AS couponActivationSessions, 
    if(countSubstrings(ymsgoalsID, '232977647')>0,1,0) AS participationInLotterySessions,
    toUInt32(ymspageViews) AS pageViews,
    __emitted_at,
    toLowCardinality('VisitStat') AS __link 

FROM events





  
    ...
[0m11:34:16.731373 [info ] [Thread-2 (]: 47 of 90 OK created sql table model test.combine_registry_appprofilematching ... [[32mOK[0m in 0.12s]
[0m11:34:16.733865 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.combine_registry_appprofilematching
[0m11:34:16.734379 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.combine_periodstat
[0m11:34:16.735153 [info ] [Thread-2 (]: 48 of 90 START sql incremental model test.combine_periodstat ................... [RUN]
[0m11:34:16.735908 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_periodstat'
[0m11:34:16.736104 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_periodstat)
[0m11:34:16.736309 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.combine_periodstat
[0m11:34:16.741921 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_periodstat')        
...
[0m11:34:16.749641 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.755044 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'join_sheets_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.759734 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:16.763872 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    drop table if exists test.join_ym_events__dbt_backup 
  
  ...
[0m11:34:16.764979 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.769133 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_periodstat"
[0m11:34:16.770688 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_periodstat (compile): 2024-06-06 11:34:16.736433 => 2024-06-06 11:34:16.770465
[0m11:34:16.771254 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.combine_periodstat
[0m11:34:16.777686 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.779127 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

            

    
        create table test.combine_periodstat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_sheets_periodstat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_sheets_periodstat
        )

        ) 


    )
        ...
[0m11:34:16.781073 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */

    rename table test.join_ym_events__dbt_tmp to test.join_ym_events__dbt_backup 
  
  ...
[0m11:34:16.785932 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.787312 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */
EXCHANGE TABLES test.join_ym_events__dbt_backup AND test.join_ym_events 
  
  ...
[0m11:34:16.794286 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.799704 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.join_ym_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.join_ym_events"} */
drop table if exists test.join_ym_events__dbt_backup 
  ...
[0m11:34:16.801009 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.804578 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.805594 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.808672 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.join_ym_events (execute): 2024-06-06 11:34:16.673454 => 2024-06-06 11:34:16.808574
[0m11:34:16.810071 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf7f340>]}
[0m11:34:16.810836 [info ] [Thread-1 (]: 46 of 90 OK created sql incremental model test.join_ym_events .................. [[32mOK[0m in 0.24s]
[0m11:34:16.811306 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.join_ym_events
[0m11:34:16.811664 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m11:34:16.813579 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.812837 [info ] [Thread-1 (]: 49 of 90 START sql table model test.combine_registry_utmhashregistry ........... [RUN]
[0m11:34:16.815427 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_periodstat"
[0m11:34:16.816632 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_registry_utmhashregistry'
[0m11:34:16.817638 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_registry_utmhashregistry)
[0m11:34:16.817972 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m11:34:16.823470 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_registry_utmhashregistry')        
...
[0m11:34:16.823836 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

        
  
    
    
        
        insert into test.combine_periodstat__dbt_tmp ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_sheets_periodstat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_sheets_periodstat
        )

        ) 


  
    ...
[0m11:34:16.832400 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.833278 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.836999 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'join_utmcraft_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.840482 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    drop table if exists test.combine_periodstat__dbt_backup 
  
  ...
[0m11:34:16.845384 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.847108 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */

    rename table test.combine_periodstat__dbt_tmp to test.combine_periodstat__dbt_backup 
  
  ...
[0m11:34:16.848034 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.851845 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_registry_utmhashregistry"
[0m11:34:16.852997 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.855140 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */
EXCHANGE TABLES test.combine_periodstat__dbt_backup AND test.combine_periodstat 
  
  ...
[0m11:34:16.857311 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_registry_utmhashregistry (compile): 2024-06-06 11:34:16.818182 => 2024-06-06 11:34:16.857114
[0m11:34:16.857853 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m11:34:16.863242 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

            

    
        create table test.combine_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_utmcraft_registry_utmhashregistry
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_utmcraft_registry_utmhashregistry
        )

        ) 


    )
        ...
[0m11:34:16.864127 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.870284 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_periodstat"} */
drop table if exists test.combine_periodstat__dbt_backup 
  ...
[0m11:34:16.874587 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.876292 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_periodstat (execute): 2024-06-06 11:34:16.771471 => 2024-06-06 11:34:16.876213
[0m11:34:16.877284 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0783d0>]}
[0m11:34:16.878041 [info ] [Thread-2 (]: 48 of 90 OK created sql incremental model test.combine_periodstat .............. [[32mOK[0m in 0.14s]
[0m11:34:16.878517 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.combine_periodstat
[0m11:34:16.878854 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.combine_datestat
[0m11:34:16.880807 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:16.879850 [info ] [Thread-2 (]: 50 of 90 START sql incremental model test.combine_datestat ..................... [RUN]
[0m11:34:16.884061 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'combine_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.885391 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_datestat'
[0m11:34:16.887199 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_datestat)
[0m11:34:16.887501 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.combine_datestat
[0m11:34:16.893883 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.894435 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_datestat')        
...
[0m11:34:16.896693 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_registry_utmhashregistry"
[0m11:34:16.898940 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */

  
    
    
        
        insert into test.combine_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link")
  -- depends_on: test.join_utmcraft_registry_utmhashregistry
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.join_utmcraft_registry_utmhashregistry
        )

        ) 


  ...
[0m11:34:16.903691 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.907508 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_mt_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.908566 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.910925 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */
EXCHANGE TABLES test.combine_registry_utmhashregistry__dbt_backup AND test.combine_registry_utmhashregistry 
  
  ...
[0m11:34:16.914245 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.918044 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_vkads_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.919289 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.924279 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_registry_utmhashregistry"} */
drop table if exists test.combine_registry_utmhashregistry__dbt_backup 
  ...
[0m11:34:16.928418 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:16.930298 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_registry_utmhashregistry (execute): 2024-06-06 11:34:16.858086 => 2024-06-06 11:34:16.930213
[0m11:34:16.931156 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf7ead0>]}
[0m11:34:16.932065 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.932834 [info ] [Thread-1 (]: 49 of 90 OK created sql table model test.combine_registry_utmhashregistry ...... [[32mOK[0m in 0.11s]
[0m11:34:16.937617 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'join_yd_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.938463 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.combine_registry_utmhashregistry
[0m11:34:16.940779 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m11:34:16.942552 [info ] [Thread-1 (]: 51 of 90 START sql table model test.hash_registry_appprofilematching ........... [RUN]
[0m11:34:16.943649 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_registry_appprofilematching'
[0m11:34:16.944261 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_registry_appprofilematching)
[0m11:34:16.944517 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m11:34:16.949854 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_registry_appprofilematching')        
...
[0m11:34:16.951235 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.955702 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_datestat"
[0m11:34:16.956285 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_datestat (compile): 2024-06-06 11:34:16.887697 => 2024-06-06 11:34:16.956175
[0m11:34:16.956643 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.combine_datestat
[0m11:34:16.962615 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

            

    
        create table test.combine_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_mt_datestat
-- depends_on: test.join_vkads_datestat
-- depends_on: test.join_yd_datestat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_mt_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString('') as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_vkads_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.join_yd_datestat
        )

        ) 


    )
        ...
[0m11:34:16.963390 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.968969 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

    select name, type from system.columns where table = 'combine_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:16.975567 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:16.981158 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_registry_appprofilematching"
[0m11:34:16.982495 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_registry_appprofilematching (compile): 2024-06-06 11:34:16.944623 => 2024-06-06 11:34:16.982325
[0m11:34:16.982878 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m11:34:16.988059 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

            

    
        create table test.hash_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_registry_appprofilematching
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AppProfileMatching' 
    THEN AppProfileMatchingHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'UtmHashRegistry' 
    
    THEN toDateTime(
    0) 
    
    WHEN __link = 'AppProfileMatching' 
    
    THEN toDateTime(
    0) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5('AppProfileMatching' || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as AppProfileMatchingHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash


FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_appprofilematching
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m11:34:16.991545 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:16.995421 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    select name, type from system.columns where table = 'combine_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.000532 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.002649 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_datestat"
[0m11:34:17.003191 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

        
  
    
    
        
        insert into test.combine_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId")
  -- depends_on: test.join_mt_datestat
-- depends_on: test.join_vkads_datestat
-- depends_on: test.join_yd_datestat
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_mt_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString('') as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId 

            from test.join_vkads_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString('') as utmSource ,
                            toString('') as utmMedium ,
                            toString('') as utmCampaign ,
                            toString('') as utmTerm ,
                            toString('') as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.join_yd_datestat
        )

        ) 


  
    ...
[0m11:34:17.012491 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:17.016061 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

    select name, type from system.columns where table = 'hash_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.021474 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.023488 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_registry_appprofilematching"
[0m11:34:17.024970 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */

  
    
    
        
        insert into test.hash_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link", "AppProfileMatchingHash", "AppMetricaDeviceHash", "CrmUserHash", "__id", "__datetime")
  -- depends_on: test.combine_registry_appprofilematching
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AppProfileMatching' 
    THEN AppProfileMatchingHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'UtmHashRegistry' 
    
    THEN toDateTime(
    0) 
    
    WHEN __link = 'AppProfileMatching' 
    
    THEN toDateTime(
    0) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5('AppProfileMatching' || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as AppProfileMatchingHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash


FROM (

        (
            select
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("crmUserId") as crmUserId ,
                            toString("cityName") as cityName ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_appprofilematching
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  ...
[0m11:34:17.038801 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:17.042217 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    drop table if exists test.combine_datestat__dbt_backup 
  
  ...
[0m11:34:17.045201 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:17.046103 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.047851 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */
EXCHANGE TABLES test.hash_registry_appprofilematching__dbt_backup AND test.hash_registry_appprofilematching 
  
  ...
[0m11:34:17.048994 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */

    rename table test.combine_datestat__dbt_tmp to test.combine_datestat__dbt_backup 
  
  ...
[0m11:34:17.053991 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.054529 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.055638 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */
EXCHANGE TABLES test.combine_datestat__dbt_backup AND test.combine_datestat 
  
  ...
[0m11:34:17.059659 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_appprofilematching"} */
drop table if exists test.hash_registry_appprofilematching__dbt_backup 
  ...
[0m11:34:17.065480 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.069561 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_datestat"} */
drop table if exists test.combine_datestat__dbt_backup 
  ...
[0m11:34:17.070425 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.072901 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_registry_appprofilematching (execute): 2024-06-06 11:34:16.983006 => 2024-06-06 11:34:17.072830
[0m11:34:17.073829 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d075720>]}
[0m11:34:17.074559 [info ] [Thread-1 (]: 51 of 90 OK created sql table model test.hash_registry_appprofilematching ...... [[32mOK[0m in 0.13s]
[0m11:34:17.075353 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.075816 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.hash_registry_appprofilematching
[0m11:34:17.077122 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.combine_datestat (execute): 2024-06-06 11:34:16.956778 => 2024-06-06 11:34:17.077064
[0m11:34:17.077903 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.combine_events
[0m11:34:17.078901 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0774f0>]}
[0m11:34:17.079590 [info ] [Thread-1 (]: 52 of 90 START sql incremental model test.combine_events ....................... [RUN]
[0m11:34:17.080427 [info ] [Thread-2 (]: 50 of 90 OK created sql incremental model test.combine_datestat ................ [[32mOK[0m in 0.19s]
[0m11:34:17.081591 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.combine_events'
[0m11:34:17.082194 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.combine_datestat
[0m11:34:17.082517 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.combine_events)
[0m11:34:17.083057 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.hash_periodstat
[0m11:34:17.083927 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.combine_events
[0m11:34:17.085015 [info ] [Thread-2 (]: 53 of 90 START sql incremental model test.hash_periodstat ...................... [RUN]
[0m11:34:17.090347 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'join_[^_]+_events')        
...
[0m11:34:17.091923 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_periodstat'
[0m11:34:17.093558 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_periodstat)
[0m11:34:17.094294 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.hash_periodstat
[0m11:34:17.099743 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_periodstat')        
...
[0m11:34:17.100977 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.106060 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'join_appmetrica_events'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.112695 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.116733 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'join_ym_events'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.118159 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:17.122277 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'combine_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.122975 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.130048 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.combine_events"
[0m11:34:17.131484 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.136685 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_periodstat"
[0m11:34:17.137158 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_events (compile): 2024-06-06 11:34:17.085791 => 2024-06-06 11:34:17.137030
[0m11:34:17.138374 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.combine_events
[0m11:34:17.143611 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

            

    
        create table test.combine_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.join_appmetrica_events
-- depends_on: test.join_ym_events
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt32(0) as pageViews 

            from test.join_appmetrica_events
        )

        union all
        

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime(0) as event_datetime ,
                            toString('') as accountName ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8(0) as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8(0) as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt8(0) as installApp ,
                            toUInt8(0) as installs ,
                            toString('') as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.join_ym_events
        )

        ) 


    )
        ...
[0m11:34:17.145628 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_periodstat (compile): 2024-06-06 11:34:17.094569 => 2024-06-06 11:34:17.145431
[0m11:34:17.146523 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.hash_periodstat
[0m11:34:17.153077 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

            

    
        create table test.hash_periodstat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_periodstat
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'ManualAdCostStat' 
    THEN ManualAdCostStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'ManualAdCostStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') = '', null, hex(MD5('ManualAdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '')))))) as ManualAdCostStatHash


FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_periodstat
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m11:34:17.167861 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:17.170888 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    select name, type from system.columns where table = 'combine_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.176754 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.177675 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:17.179454 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.combine_events"
[0m11:34:17.182456 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.184278 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

        
  
    
    
        
        insert into test.combine_events__dbt_tmp ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews")
  -- depends_on: test.join_appmetrica_events
-- depends_on: test.join_ym_events
SELECT * REPLACE(toLowCardinality(__table_name) AS __table_name)
FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt32(0) as pageViews 

            from test.join_appmetrica_events
        )

        union all
        

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime(0) as event_datetime ,
                            toString('') as accountName ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8(0) as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8(0) as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt8(0) as installApp ,
                            toUInt8(0) as installs ,
                            toString('') as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.join_ym_events
        )

        ) 


  
    ...
[0m11:34:17.187661 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.189381 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_periodstat"
[0m11:34:17.189925 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

        
  
    
    
        
        insert into test.hash_periodstat__dbt_tmp ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime")
  -- depends_on: test.combine_periodstat
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'ManualAdCostStat' 
    THEN ManualAdCostStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'ManualAdCostStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') = '', null, hex(MD5('ManualAdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodStart))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(periodEnd))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '')))))) as ManualAdCostStatHash


FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("campaign") as campaign ,
                            toFloat64("cost") as cost ,
                            toDate("periodStart") as periodStart ,
                            toDate("periodEnd") as periodEnd ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_periodstat
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  
    ...
[0m11:34:17.205008 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.208433 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    drop table if exists test.hash_periodstat__dbt_backup 
  
  ...
[0m11:34:17.211380 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.212613 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */

    rename table test.hash_periodstat__dbt_tmp to test.hash_periodstat__dbt_backup 
  
  ...
[0m11:34:17.216102 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.217370 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */
EXCHANGE TABLES test.hash_periodstat__dbt_backup AND test.hash_periodstat 
  
  ...
[0m11:34:17.221463 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.225553 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_periodstat"} */
drop table if exists test.hash_periodstat__dbt_backup 
  ...
[0m11:34:17.226179 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:17.231552 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    drop table if exists test.combine_events__dbt_backup 
  
  ...
[0m11:34:17.234132 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.234662 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.236026 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */

    rename table test.combine_events__dbt_tmp to test.combine_events__dbt_backup 
  
  ...
[0m11:34:17.238043 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_periodstat (execute): 2024-06-06 11:34:17.146719 => 2024-06-06 11:34:17.237978
[0m11:34:17.239848 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf44490>]}
[0m11:34:17.240391 [info ] [Thread-2 (]: 53 of 90 OK created sql incremental model test.hash_periodstat ................. [[32mOK[0m in 0.15s]
[0m11:34:17.240961 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.hash_periodstat
[0m11:34:17.241451 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m11:34:17.242106 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.242513 [info ] [Thread-2 (]: 54 of 90 START sql table model test.hash_registry_utmhashregistry .............. [RUN]
[0m11:34:17.244242 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */
EXCHANGE TABLES test.combine_events__dbt_backup AND test.combine_events 
  
  ...
[0m11:34:17.245544 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_registry_utmhashregistry'
[0m11:34:17.246580 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_registry_utmhashregistry)
[0m11:34:17.247012 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m11:34:17.326060 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.08 seconds
[0m11:34:17.329287 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_registry_utmhashregistry')        
...
[0m11:34:17.333452 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.combine_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.combine_events"} */
drop table if exists test.combine_events__dbt_backup 
  ...
[0m11:34:17.339112 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.340438 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.combine_events (execute): 2024-06-06 11:34:17.138606 => 2024-06-06 11:34:17.340369
[0m11:34:17.341311 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cdb1a20>]}
[0m11:34:17.341853 [info ] [Thread-1 (]: 52 of 90 OK created sql incremental model test.combine_events .................. [[32mOK[0m in 0.26s]
[0m11:34:17.342324 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.combine_events
[0m11:34:17.342719 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m11:34:17.344242 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.343438 [info ] [Thread-1 (]: 55 of 90 START sql table model test.link_registry_appprofilematching ........... [RUN]
[0m11:34:17.348100 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'combine_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.349148 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_registry_appprofilematching'
[0m11:34:17.351143 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_registry_appprofilematching)
[0m11:34:17.351407 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m11:34:17.356891 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

    select name, type from system.columns where table = 'hash_registry_appprofilematching'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.358485 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.365032 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.367878 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_registry_utmhashregistry"
[0m11:34:17.370073 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_registry_appprofilematching"
[0m11:34:17.370953 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_registry_utmhashregistry (compile): 2024-06-06 11:34:17.247248 => 2024-06-06 11:34:17.370818
[0m11:34:17.371396 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m11:34:17.376178 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

            

    
        create table test.hash_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_registry_utmhashregistry
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'UtmHashRegistry' 
    THEN UtmHashRegistryHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'UtmHashRegistry' 
    
    THEN toDateTime(
    0) 
    
    WHEN __link = 'AppProfileMatching' 
    
    THEN toDateTime(
    0) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5('UtmHashRegistry' || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashRegistryHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_utmhashregistry
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m11:34:17.377697 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_registry_appprofilematching (compile): 2024-06-06 11:34:17.351536 => 2024-06-06 11:34:17.377545
[0m11:34:17.378210 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m11:34:17.384876 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

            

    
        create table test.link_registry_appprofilematching__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_registry_appprofilematching
SELECT appmetricaDeviceId,crmUserId,cityName,__emitted_at,__table_name,__link,AppProfileMatchingHash,AppMetricaDeviceHash,CrmUserHash,__id,__datetime 
FROM test.hash_registry_appprofilematching
GROUP BY appmetricaDeviceId, crmUserId, cityName, __emitted_at, __table_name, __link, AppProfileMatchingHash, AppMetricaDeviceHash, CrmUserHash, __id, __datetime


    )
        ...
[0m11:34:17.401062 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:17.404042 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'hash_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.405215 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:17.408837 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

    select name, type from system.columns where table = 'link_registry_appprofilematching__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:17.410163 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.413465 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_registry_utmhashregistry"
[0m11:34:17.414119 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */

  
    
    
        
        insert into test.hash_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link", "UtmHashRegistryHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.combine_registry_utmhashregistry
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'UtmHashRegistry' 
    THEN UtmHashRegistryHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'UtmHashRegistry' 
    
    THEN toDateTime(
    0) 
    
    WHEN __link = 'AppProfileMatching' 
    
    THEN toDateTime(
    0) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5('UtmHashRegistry' || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashRegistryHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


FROM (

        (
            select
                            toString("utmHash") as utmHash ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__table_name") as __table_name ,
                            toString("__link") as __link 

            from test.combine_registry_utmhashregistry
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  ...
[0m11:34:17.415871 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.417457 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_registry_appprofilematching"
[0m11:34:17.418676 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */

  
    
    
        
        insert into test.link_registry_appprofilematching__dbt_backup ("appmetricaDeviceId", "crmUserId", "cityName", "__emitted_at", "__table_name", "__link", "AppProfileMatchingHash", "AppMetricaDeviceHash", "CrmUserHash", "__id", "__datetime")
  -- depends_on: test.hash_registry_appprofilematching
SELECT appmetricaDeviceId,crmUserId,cityName,__emitted_at,__table_name,__link,AppProfileMatchingHash,AppMetricaDeviceHash,CrmUserHash,__id,__datetime 
FROM test.hash_registry_appprofilematching
GROUP BY appmetricaDeviceId, crmUserId, cityName, __emitted_at, __table_name, __link, AppProfileMatchingHash, AppMetricaDeviceHash, CrmUserHash, __id, __datetime


  ...
[0m11:34:17.428550 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:17.429882 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */
EXCHANGE TABLES test.hash_registry_utmhashregistry__dbt_backup AND test.hash_registry_utmhashregistry 
  
  ...
[0m11:34:17.434166 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.438983 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_registry_utmhashregistry"} */
drop table if exists test.hash_registry_utmhashregistry__dbt_backup 
  ...
[0m11:34:17.439721 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:17.443374 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */
EXCHANGE TABLES test.link_registry_appprofilematching__dbt_backup AND test.link_registry_appprofilematching 
  
  ...
[0m11:34:17.444893 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.446332 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_registry_utmhashregistry (execute): 2024-06-06 11:34:17.371854 => 2024-06-06 11:34:17.446260
[0m11:34:17.447061 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cd84b80>]}
[0m11:34:17.447829 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.453505 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_appprofilematching: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_appprofilematching"} */
drop table if exists test.link_registry_appprofilematching__dbt_backup 
  ...
[0m11:34:17.457192 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:17.458533 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_registry_appprofilematching (execute): 2024-06-06 11:34:17.378882 => 2024-06-06 11:34:17.458473
[0m11:34:17.459135 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cee37f0>]}
[0m11:34:18.556850 [info ] [Thread-2 (]: 54 of 90 OK created sql table model test.hash_registry_utmhashregistry ......... [[32mOK[0m in 0.20s]
[0m11:34:18.558578 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.hash_registry_utmhashregistry
[0m11:34:18.557730 [info ] [Thread-1 (]: 55 of 90 OK created sql table model test.link_registry_appprofilematching ...... [[32mOK[0m in 0.11s]
[0m11:34:18.559423 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.hash_datestat
[0m11:34:18.560318 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_registry_appprofilematching
[0m11:34:18.561370 [info ] [Thread-2 (]: 56 of 90 START sql incremental model test.hash_datestat ........................ [RUN]
[0m11:34:18.562260 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.link_periodstat
[0m11:34:18.563479 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_datestat'
[0m11:34:18.564183 [info ] [Thread-1 (]: 57 of 90 START sql table model test.link_periodstat ............................ [RUN]
[0m11:34:18.564781 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_datestat)
[0m11:34:18.565663 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_periodstat'
[0m11:34:18.566275 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.hash_datestat
[0m11:34:18.566567 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_periodstat)
[0m11:34:18.571946 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_datestat')        
...
[0m11:34:18.572892 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.link_periodstat
[0m11:34:18.583527 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

    select name, type from system.columns where table = 'hash_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.584618 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.589866 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'combine_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.590684 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.594429 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_periodstat"
[0m11:34:18.595907 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_periodstat (compile): 2024-06-06 11:34:18.575434 => 2024-06-06 11:34:18.595648
[0m11:34:18.596450 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.link_periodstat
[0m11:34:18.602024 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

            

    
        create table test.link_periodstat__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_periodstat
SELECT __date,campaign,SUM(cost) AS cost,periodStart,periodEnd,__emitted_at,__table_name,__link,ManualAdCostStatHash,__id,__datetime 
FROM test.hash_periodstat
GROUP BY __date, campaign, periodStart, periodEnd, __emitted_at, __table_name, __link, ManualAdCostStatHash, __id, __datetime


    )
        ...
[0m11:34:18.602824 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.611054 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_datestat"
[0m11:34:18.611772 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_datestat (compile): 2024-06-06 11:34:18.566870 => 2024-06-06 11:34:18.611641
[0m11:34:18.612127 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.hash_datestat
[0m11:34:18.617614 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

            

    
        create table test.hash_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_datestat
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AdCostStat' 
    THEN AdCostStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'AdCostStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(reportType))), ''), '') = '', null, hex(MD5('AdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(reportType))), ''), '')))))) as AdCostStatHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.combine_datestat
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m11:34:18.620178 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:18.623297 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

    select name, type from system.columns where table = 'link_periodstat__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.628686 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.630199 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_periodstat"
[0m11:34:18.630665 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */

  
    
    
        
        insert into test.link_periodstat__dbt_backup ("__date", "campaign", "cost", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime")
  -- depends_on: test.hash_periodstat
SELECT __date,campaign,SUM(cost) AS cost,periodStart,periodEnd,__emitted_at,__table_name,__link,ManualAdCostStatHash,__id,__datetime 
FROM test.hash_periodstat
GROUP BY __date, campaign, periodStart, periodEnd, __emitted_at, __table_name, __link, ManualAdCostStatHash, __id, __datetime


  ...
[0m11:34:18.648810 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:18.650097 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */
EXCHANGE TABLES test.link_periodstat__dbt_backup AND test.link_periodstat 
  
  ...
[0m11:34:18.650745 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:18.654350 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    select name, type from system.columns where table = 'hash_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.655651 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.661053 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_periodstat"} */
drop table if exists test.link_periodstat__dbt_backup 
  ...
[0m11:34:18.662060 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.665040 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_datestat"
[0m11:34:18.666199 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.667514 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.link_periodstat (execute): 2024-06-06 11:34:18.596559 => 2024-06-06 11:34:18.667455
[0m11:34:18.668650 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cfeaa70>]}
[0m11:34:18.669086 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

        
  
    
    
        
        insert into test.hash_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.combine_datestat
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AdCostStat' 
    THEN AdCostStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'AdCostStat' 
    
    THEN toDateTime(__date) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(reportType))), ''), '') = '', null, hex(MD5('AdCostStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adCampaignName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adGroupName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adPhraseId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(reportType))), ''), '')))))) as AdCostStatHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash


FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt32("impressions") as impressions ,
                            toInt32("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId 

            from test.combine_datestat
        )

        ) 
WHERE 

    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  
    ...
[0m11:34:18.670027 [info ] [Thread-1 (]: 57 of 90 OK created sql table model test.link_periodstat ....................... [[32mOK[0m in 0.10s]
[0m11:34:18.671548 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.link_periodstat
[0m11:34:18.672325 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.hash_events
[0m11:34:18.673019 [info ] [Thread-1 (]: 58 of 90 START sql incremental model test.hash_events .......................... [RUN]
[0m11:34:18.673766 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.hash_events'
[0m11:34:18.674034 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.hash_events)
[0m11:34:18.674255 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.hash_events
[0m11:34:18.678032 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */


      
        select distinct
            table_schema as "table_schema",
            table_name as "table_name",
            
            case toString(table_type)
                when 'BASE TABLE' then 'table'
                when 'EXTERNAL TABLE' then 'external'
                when 'MATERIALIZED VIEW' then 'materializedview'
                else lower(toString(table_type))
            end as "table_type"

        from information_schema.tables
        where match(table_schema, 'test')
        and match(table_name, 'combine_events')        
...
[0m11:34:18.685539 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.689732 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'combine_events'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.695218 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.705858 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.hash_events"
[0m11:34:18.706759 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:18.711677 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    drop table if exists test.hash_datestat__dbt_backup 
  
  ...
[0m11:34:18.713156 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_events (compile): 2024-06-06 11:34:18.674362 => 2024-06-06 11:34:18.713030
[0m11:34:18.713978 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.hash_events
[0m11:34:18.720247 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

            

    
        create table test.hash_events__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.combine_events
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AppInstallStat' 
    THEN AppInstallStatHash 
  
    WHEN __link = 'AppEventStat' 
    THEN AppEventStatHash 
  
    WHEN __link = 'AppSessionStat' 
    THEN AppSessionStatHash 
  
    WHEN __link = 'AppDeeplinkStat' 
    THEN AppDeeplinkStatHash 
  
    WHEN __link = 'VisitStat' 
    THEN VisitStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'AppInstallStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppEventStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppSessionStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppDeeplinkStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'VisitStat' 
    
    THEN toDateTime(event_datetime) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppInstallStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppInstallStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppEventStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppEventStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppSessionStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppSessionStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppDeeplinkStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppDeeplinkStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('VisitStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as VisitStatHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(clientId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(clientId))), ''), '')))))) as YmClientHash


FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.combine_events
        )

        ) 
WHERE 

    True AND 
    True AND 
    True AND 
    True AND 
    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


    )
        ...
[0m11:34:18.721052 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.723112 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */

    rename table test.hash_datestat__dbt_tmp to test.hash_datestat__dbt_backup 
  
  ...
[0m11:34:18.727395 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.729326 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */
EXCHANGE TABLES test.hash_datestat__dbt_backup AND test.hash_datestat 
  
  ...
[0m11:34:18.734506 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.738945 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_datestat"} */
drop table if exists test.hash_datestat__dbt_backup 
  ...
[0m11:34:18.742908 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.744577 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.hash_datestat (execute): 2024-06-06 11:34:18.612240 => 2024-06-06 11:34:18.744492
[0m11:34:18.745261 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d04f7f0>]}
[0m11:34:18.745839 [info ] [Thread-2 (]: 56 of 90 OK created sql incremental model test.hash_datestat ................... [[32mOK[0m in 0.18s]
[0m11:34:18.746227 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.hash_datestat
[0m11:34:18.746560 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m11:34:18.747416 [info ] [Thread-2 (]: 59 of 90 START sql table model test.link_registry_utmhashregistry .............. [RUN]
[0m11:34:18.748273 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_registry_utmhashregistry'
[0m11:34:18.748551 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_registry_utmhashregistry)
[0m11:34:18.748760 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m11:34:18.754010 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'hash_registry_utmhashregistry'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.759929 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.761999 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_registry_utmhashregistry"
[0m11:34:18.762558 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_registry_utmhashregistry (compile): 2024-06-06 11:34:18.748871 => 2024-06-06 11:34:18.762452
[0m11:34:18.762933 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m11:34:18.767723 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

            

    
        create table test.link_registry_utmhashregistry__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_registry_utmhashregistry
SELECT utmHash,utm_base_url,utm_utmSource,utm_utmMedium,utm_utmCampaign,utm_project,utm_utmContent,utm_strategy,utm_audience,__emitted_at,__table_name,__link,UtmHashRegistryHash,UtmHashHash,__id,__datetime 
FROM test.hash_registry_utmhashregistry
GROUP BY utmHash, utm_base_url, utm_utmSource, utm_utmMedium, utm_utmCampaign, utm_project, utm_utmContent, utm_strategy, utm_audience, __emitted_at, __table_name, __link, UtmHashRegistryHash, UtmHashHash, __id, __datetime


    )
        ...
[0m11:34:18.772208 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m11:34:18.776879 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    select name, type from system.columns where table = 'hash_events__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.782624 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.783315 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:18.785278 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.hash_events"
[0m11:34:18.790026 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

    select name, type from system.columns where table = 'link_registry_utmhashregistry__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.792775 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

        
  
    
    
        
        insert into test.hash_events__dbt_tmp ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime")
  -- depends_on: test.combine_events
SELECT *,
  assumeNotNull(CASE  
    WHEN __link = 'AppInstallStat' 
    THEN AppInstallStatHash 
  
    WHEN __link = 'AppEventStat' 
    THEN AppEventStatHash 
  
    WHEN __link = 'AppSessionStat' 
    THEN AppSessionStatHash 
  
    WHEN __link = 'AppDeeplinkStat' 
    THEN AppDeeplinkStatHash 
  
    WHEN __link = 'VisitStat' 
    THEN VisitStatHash 

    END) as __id
  , assumeNotNull(CASE
    WHEN __link = 'AppInstallStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppEventStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppSessionStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'AppDeeplinkStat' 
    
    THEN toDateTime(event_datetime) 
    
    WHEN __link = 'VisitStat' 
    
    THEN toDateTime(event_datetime) 
    END) AS __datetime
FROM (

SELECT *, 
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppInstallStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppInstallStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppEventStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(transactionId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(promoCode))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppEventStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppSessionStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(installationDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppSessionStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('AppDeeplinkStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(accountName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(mobileAdsId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(osName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(cityName))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(adSourceDirty))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmSource))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmMedium))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmCampaign))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmTerm))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmContent))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(utmHash))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as AppDeeplinkStatHash,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(__date))), ''), '') || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '') = '', null, hex(MD5('VisitStat' || ';' || ifnull(nullif(upper(trim(toString(__date))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(visitId))), ''), '') || ';' || ifnull(nullif(upper(trim(toString(event_datetime))), ''), '')))))) as VisitStatHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(appmetricaDeviceId))), ''), '')))))) as AppMetricaDeviceHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(crmUserId))), ''), '')))))) as CrmUserHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(utmHash))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(utmHash))), ''), '')))))) as UtmHashHash

,
assumeNotNull(coalesce(if(ifnull(nullif(upper(trim(toString(clientId))), ''), '') = '', null, hex(MD5(ifnull(nullif(upper(trim(toString(clientId))), ''), '')))))) as YmClientHash


FROM (

        (
            select
                            toDateTime("__date") as __date ,
                            toString("__table_name") as __table_name ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("accountName") as accountName ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("transactionId") as transactionId ,
                            toString("utmHash") as utmHash ,
                            toUInt8("sessions") as sessions ,
                            toUInt8("addToCartSessions") as addToCartSessions ,
                            toUInt8("cartViewSessions") as cartViewSessions ,
                            toUInt8("checkoutSessions") as checkoutSessions ,
                            toUInt8("webSalesSessions") as webSalesSessions ,
                            toUInt8("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt8("registrationCardSessions") as registrationCardSessions ,
                            toUInt8("registrationButtonClick") as registrationButtonClick ,
                            toUInt8("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt8("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt8("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt8("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt8("couponActivationSessions") as couponActivationSessions ,
                            toUInt8("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt8("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt8("installApp") as installApp ,
                            toUInt8("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt32("pageViews") as pageViews 

            from test.combine_events
        )

        ) 
WHERE 

    True AND 
    True AND 
    True AND 
    True AND 
    True
)

-- SETTINGS short_circuit_function_evaluation=force_enable


  
    ...
[0m11:34:18.798306 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.799956 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_registry_utmhashregistry"
[0m11:34:18.800372 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */

  
    
    
        
        insert into test.link_registry_utmhashregistry__dbt_backup ("utmHash", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "__emitted_at", "__table_name", "__link", "UtmHashRegistryHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.hash_registry_utmhashregistry
SELECT utmHash,utm_base_url,utm_utmSource,utm_utmMedium,utm_utmCampaign,utm_project,utm_utmContent,utm_strategy,utm_audience,__emitted_at,__table_name,__link,UtmHashRegistryHash,UtmHashHash,__id,__datetime 
FROM test.hash_registry_utmhashregistry
GROUP BY utmHash, utm_base_url, utm_utmSource, utm_utmMedium, utm_utmCampaign, utm_project, utm_utmContent, utm_strategy, utm_audience, __emitted_at, __table_name, __link, UtmHashRegistryHash, UtmHashHash, __id, __datetime


  ...
[0m11:34:18.821257 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:18.822511 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */
EXCHANGE TABLES test.link_registry_utmhashregistry__dbt_backup AND test.link_registry_utmhashregistry 
  
  ...
[0m11:34:18.826839 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.830818 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_registry_utmhashregistry: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_registry_utmhashregistry"} */
drop table if exists test.link_registry_utmhashregistry__dbt_backup 
  ...
[0m11:34:18.834066 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.835398 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_registry_utmhashregistry (execute): 2024-06-06 11:34:18.763078 => 2024-06-06 11:34:18.835318
[0m11:34:18.836020 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0d0df0>]}
[0m11:34:18.836433 [info ] [Thread-2 (]: 59 of 90 OK created sql table model test.link_registry_utmhashregistry ......... [[32mOK[0m in 0.09s]
[0m11:34:18.836803 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.link_registry_utmhashregistry
[0m11:34:18.837151 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.link_datestat
[0m11:34:18.838286 [info ] [Thread-2 (]: 60 of 90 START sql table model test.link_datestat .............................. [RUN]
[0m11:34:18.839260 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_datestat'
[0m11:34:18.839569 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_datestat)
[0m11:34:18.839742 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.link_datestat
[0m11:34:18.845829 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

    select name, type from system.columns where table = 'hash_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.852124 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.854357 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_datestat"
[0m11:34:18.854931 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_datestat (compile): 2024-06-06 11:34:18.839837 => 2024-06-06 11:34:18.854824
[0m11:34:18.855259 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.link_datestat
[0m11:34:18.859872 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

            

    
        create table test.link_datestat__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_datestat
SELECT __date,reportType,accountName,__table_name,adSourceDirty,adCampaignName,adId,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,utmHash,adTitle1,adText,SUM(adCost) AS adCost,SUM(impressions) AS impressions,SUM(clicks) AS clicks,__emitted_at,__link,adGroupName,adPhraseId,AdCostStatHash,UtmHashHash,__id,__datetime 
FROM test.hash_datestat
GROUP BY __date, reportType, accountName, __table_name, adSourceDirty, adCampaignName, adId, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, utmHash, adTitle1, adText, __emitted_at, __link, adGroupName, adPhraseId, AdCostStatHash, UtmHashHash, __id, __datetime


    )
        ...
[0m11:34:18.860625 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m11:34:18.864724 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    drop table if exists test.hash_events__dbt_backup 
  
  ...
[0m11:34:18.869490 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.870811 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */

    rename table test.hash_events__dbt_tmp to test.hash_events__dbt_backup 
  
  ...
[0m11:34:18.875106 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.876359 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */
EXCHANGE TABLES test.hash_events__dbt_backup AND test.hash_events 
  
  ...
[0m11:34:18.877785 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:18.884183 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.884883 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

    select name, type from system.columns where table = 'link_datestat__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.889042 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.hash_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.hash_events"} */
drop table if exists test.hash_events__dbt_backup 
  ...
[0m11:34:18.894534 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.895270 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.896699 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.hash_events (execute): 2024-06-06 11:34:18.714359 => 2024-06-06 11:34:18.896632
[0m11:34:18.898852 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_datestat"
[0m11:34:18.899938 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cfe8640>]}
[0m11:34:18.900567 [info ] [Thread-1 (]: 58 of 90 OK created sql incremental model test.hash_events ..................... [[32mOK[0m in 0.23s]
[0m11:34:18.901225 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.hash_events
[0m11:34:18.901719 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */

  
    
    
        
        insert into test.link_datestat__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime")
  -- depends_on: test.hash_datestat
SELECT __date,reportType,accountName,__table_name,adSourceDirty,adCampaignName,adId,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,utmHash,adTitle1,adText,SUM(adCost) AS adCost,SUM(impressions) AS impressions,SUM(clicks) AS clicks,__emitted_at,__link,adGroupName,adPhraseId,AdCostStatHash,UtmHashHash,__id,__datetime 
FROM test.hash_datestat
GROUP BY __date, reportType, accountName, __table_name, adSourceDirty, adCampaignName, adId, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, utmHash, adTitle1, adText, __emitted_at, __link, adGroupName, adPhraseId, AdCostStatHash, UtmHashHash, __id, __datetime


  ...
[0m11:34:18.902420 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.full_periodstat
[0m11:34:18.904707 [info ] [Thread-1 (]: 61 of 90 START sql incremental model test.full_periodstat ...................... [RUN]
[0m11:34:18.906050 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_periodstat'
[0m11:34:18.906267 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_periodstat)
[0m11:34:18.906419 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.full_periodstat
[0m11:34:18.914171 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m11:34:18.918791 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.920836 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m11:34:18.925262 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.926876 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m11:34:18.928739 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:18.930825 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */
EXCHANGE TABLES test.link_datestat__dbt_backup AND test.link_datestat 
  
  ...
[0m11:34:18.939214 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.943499 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_datestat"} */
drop table if exists test.link_datestat__dbt_backup 
  ...
[0m11:34:18.944319 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:18.947869 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m11:34:18.949418 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:18.950916 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_datestat (execute): 2024-06-06 11:34:18.855411 => 2024-06-06 11:34:18.950851
[0m11:34:18.951726 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0d05b0>]}
[0m11:34:18.952519 [info ] [Thread-2 (]: 60 of 90 OK created sql table model test.link_datestat ......................... [[32mOK[0m in 0.11s]
[0m11:34:18.953293 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.link_datestat
[0m11:34:18.954044 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.link_events
[0m11:34:18.954797 [info ] [Thread-2 (]: 62 of 90 START sql table model test.link_events ................................ [RUN]
[0m11:34:18.956312 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.link_events'
[0m11:34:18.957144 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.957683 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.link_events)
[0m11:34:18.959451 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m11:34:18.960016 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.link_events
[0m11:34:18.966942 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.969936 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

    select name, type from system.columns where table = 'hash_events'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:18.971573 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m11:34:18.978340 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.979423 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.982504 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.link_events"
[0m11:34:18.984025 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m11:34:18.986324 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_events (compile): 2024-06-06 11:34:18.961346 => 2024-06-06 11:34:18.986101
[0m11:34:18.986858 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.link_events
[0m11:34:18.991838 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

            

    
        create table test.link_events__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.hash_events
SELECT __date,__table_name,event_datetime,accountName,appmetricaDeviceId,mobileAdsId,crmUserId,promoCode,osName,cityName,adSourceDirty,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,transactionId,utmHash,SUM(sessions) AS sessions,SUM(addToCartSessions) AS addToCartSessions,SUM(cartViewSessions) AS cartViewSessions,SUM(checkoutSessions) AS checkoutSessions,SUM(webSalesSessions) AS webSalesSessions,SUM(sales) AS sales,SUM(amountSales) AS amountSales,SUM(registrationCardSessions) AS registrationCardSessions,SUM(registrationButtonClick) AS registrationButtonClick,SUM(linkingCardToPhoneNumberSessions) AS linkingCardToPhoneNumberSessions,SUM(registrationLendingPromotionsSessions) AS registrationLendingPromotionsSessions,SUM(registrationCashbackSessions) AS registrationCashbackSessions,SUM(instantDiscountActivationSessions) AS instantDiscountActivationSessions,SUM(couponActivationSessions) AS couponActivationSessions,SUM(participationInLotterySessions) AS participationInLotterySessions,SUM(pagesViews) AS pagesViews,SUM(screenView) AS screenView,SUM(installApp) AS installApp,SUM(installs) AS installs,installationDeviceId,__emitted_at,__link,visitId,clientId,cityCode,SUM(pageViews) AS pageViews,AppInstallStatHash,AppEventStatHash,AppSessionStatHash,AppDeeplinkStatHash,VisitStatHash,AppMetricaDeviceHash,CrmUserHash,UtmHashHash,YmClientHash,__id,__datetime 
FROM test.hash_events
GROUP BY __date, __table_name, event_datetime, accountName, appmetricaDeviceId, mobileAdsId, crmUserId, promoCode, osName, cityName, adSourceDirty, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, transactionId, utmHash, installationDeviceId, __emitted_at, __link, visitId, clientId, cityCode, AppInstallStatHash, AppEventStatHash, AppSessionStatHash, AppDeeplinkStatHash, VisitStatHash, AppMetricaDeviceHash, CrmUserHash, UtmHashHash, YmClientHash, __id, __datetime


    )
        ...
[0m11:34:18.992723 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:18.995919 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m11:34:19.001056 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.003051 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m11:34:19.007650 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.009337 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m11:34:19.013520 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.016622 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

    select name, type from system.columns where table = 'link_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.017424 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.022150 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'link_periodstat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.023495 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.025883 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.link_events"
[0m11:34:19.027420 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */

  
    
    
        
        insert into test.link_events__dbt_backup ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime")
  -- depends_on: test.hash_events
SELECT __date,__table_name,event_datetime,accountName,appmetricaDeviceId,mobileAdsId,crmUserId,promoCode,osName,cityName,adSourceDirty,utmSource,utmMedium,utmCampaign,utmTerm,utmContent,transactionId,utmHash,SUM(sessions) AS sessions,SUM(addToCartSessions) AS addToCartSessions,SUM(cartViewSessions) AS cartViewSessions,SUM(checkoutSessions) AS checkoutSessions,SUM(webSalesSessions) AS webSalesSessions,SUM(sales) AS sales,SUM(amountSales) AS amountSales,SUM(registrationCardSessions) AS registrationCardSessions,SUM(registrationButtonClick) AS registrationButtonClick,SUM(linkingCardToPhoneNumberSessions) AS linkingCardToPhoneNumberSessions,SUM(registrationLendingPromotionsSessions) AS registrationLendingPromotionsSessions,SUM(registrationCashbackSessions) AS registrationCashbackSessions,SUM(instantDiscountActivationSessions) AS instantDiscountActivationSessions,SUM(couponActivationSessions) AS couponActivationSessions,SUM(participationInLotterySessions) AS participationInLotterySessions,SUM(pagesViews) AS pagesViews,SUM(screenView) AS screenView,SUM(installApp) AS installApp,SUM(installs) AS installs,installationDeviceId,__emitted_at,__link,visitId,clientId,cityCode,SUM(pageViews) AS pageViews,AppInstallStatHash,AppEventStatHash,AppSessionStatHash,AppDeeplinkStatHash,VisitStatHash,AppMetricaDeviceHash,CrmUserHash,UtmHashHash,YmClientHash,__id,__datetime 
FROM test.hash_events
GROUP BY __date, __table_name, event_datetime, accountName, appmetricaDeviceId, mobileAdsId, crmUserId, promoCode, osName, cityName, adSourceDirty, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, transactionId, utmHash, installationDeviceId, __emitted_at, __link, visitId, clientId, cityCode, AppInstallStatHash, AppEventStatHash, AppSessionStatHash, AppDeeplinkStatHash, VisitStatHash, AppMetricaDeviceHash, CrmUserHash, UtmHashHash, YmClientHash, __id, __datetime


  ...
[0m11:34:19.028484 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.032566 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_periodstat"
[0m11:34:19.033759 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.full_periodstat (compile): 2024-06-06 11:34:18.906509 => 2024-06-06 11:34:19.033633
[0m11:34:19.034046 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.full_periodstat
[0m11:34:19.039533 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

            

    
        create table test.full_periodstat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
-- depends_on: test.link_periodstat


WITH unnest_dates AS ( 
SELECT *, 
    dateAdd(periodStart, arrayJoin(range( 0, 1 + toUInt16(date_diff('day', periodStart, periodEnd))))) AS period_date
	, COUNT(*) OVER(PARTITION BY 
__date
,
campaign
,
periodStart
,
periodEnd
,
__emitted_at
,
__table_name
,
__link
,
ManualAdCostStatHash
,
__id
,
__datetime

 
    ) AS divide_by_days 
FROM test.link_periodstat
)
, t0 AS (
SELECT period_date, 
__date, 
campaign, 
periodStart, 
periodEnd, 
__emitted_at, 
__table_name, 
__link, 
ManualAdCostStatHash, 
__id, 
__datetime, 
   
cost/divide_by_days AS cost_per_day 
   
 
FROM unnest_dates
)
, t1 AS ( 
SELECT * 
FROM t0
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m11:34:19.060552 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.064518 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    select name, type from system.columns where table = 'full_periodstat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.065391 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:19.068011 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */
EXCHANGE TABLES test.link_events__dbt_backup AND test.link_events 
  
  ...
[0m11:34:19.071069 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.072582 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_periodstat"
[0m11:34:19.073406 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.078641 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.link_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.link_events"} */
drop table if exists test.link_events__dbt_backup 
  ...
[0m11:34:19.079816 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

        
  
    
    
        
        insert into test.full_periodstat__dbt_tmp ("period_date", "__date", "campaign", "periodStart", "periodEnd", "__emitted_at", "__table_name", "__link", "ManualAdCostStatHash", "__id", "__datetime", "cost_per_day")
  -- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
-- depends_on: test.link_periodstat


WITH unnest_dates AS ( 
SELECT *, 
    dateAdd(periodStart, arrayJoin(range( 0, 1 + toUInt16(date_diff('day', periodStart, periodEnd))))) AS period_date
	, COUNT(*) OVER(PARTITION BY 
__date
,
campaign
,
periodStart
,
periodEnd
,
__emitted_at
,
__table_name
,
__link
,
ManualAdCostStatHash
,
__id
,
__datetime

 
    ) AS divide_by_days 
FROM test.link_periodstat
)
, t0 AS (
SELECT period_date, 
__date, 
campaign, 
periodStart, 
periodEnd, 
__emitted_at, 
__table_name, 
__link, 
ManualAdCostStatHash, 
__id, 
__datetime, 
   
cost/divide_by_days AS cost_per_day 
   
 
FROM unnest_dates
)
, t1 AS ( 
SELECT * 
FROM t0
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  
    ...
[0m11:34:19.082557 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.083956 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.link_events (execute): 2024-06-06 11:34:18.987095 => 2024-06-06 11:34:19.083876
[0m11:34:19.084631 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ce67550>]}
[0m11:34:19.085074 [info ] [Thread-2 (]: 62 of 90 OK created sql table model test.link_events ........................... [[32mOK[0m in 0.13s]
[0m11:34:19.085476 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.link_events
[0m11:34:19.085827 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.full_datestat
[0m11:34:19.086799 [info ] [Thread-2 (]: 63 of 90 START sql incremental model test.full_datestat ........................ [RUN]
[0m11:34:19.087732 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_datestat'
[0m11:34:19.088042 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_datestat)
[0m11:34:19.088238 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.full_datestat
[0m11:34:19.094448 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m11:34:19.101793 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.102385 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.103784 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m11:34:19.107358 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    drop table if exists test.full_periodstat__dbt_backup 
  
  ...
[0m11:34:19.112717 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.114518 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */

    rename table test.full_periodstat__dbt_tmp to test.full_periodstat__dbt_backup 
  
  ...
[0m11:34:19.115398 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.118332 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m11:34:19.119676 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.121846 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */
EXCHANGE TABLES test.full_periodstat__dbt_backup AND test.full_periodstat 
  
  ...
[0m11:34:19.122671 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.125254 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m11:34:19.129297 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.134079 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_periodstat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_periodstat"} */
drop table if exists test.full_periodstat__dbt_backup 
  ...
[0m11:34:19.135217 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.137770 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m11:34:19.141536 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.143369 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.full_periodstat (execute): 2024-06-06 11:34:19.034139 => 2024-06-06 11:34:19.143243
[0m11:34:19.144325 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.145536 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf6d810>]}
[0m11:34:19.147064 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m11:34:19.147957 [info ] [Thread-1 (]: 61 of 90 OK created sql incremental model test.full_periodstat ................. [[32mOK[0m in 0.24s]
[0m11:34:19.149618 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.full_periodstat
[0m11:34:19.150122 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_tuples
[0m11:34:19.151010 [info ] [Thread-1 (]: 64 of 90 START sql table model test.graph_tuples ............................... [RUN]
[0m11:34:19.151936 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_tuples'
[0m11:34:19.152354 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_tuples)
[0m11:34:19.152620 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_tuples
[0m11:34:19.158849 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.159476 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_tuples"
[0m11:34:19.161099 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m11:34:19.163183 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_tuples (compile): 2024-06-06 11:34:19.152791 => 2024-06-06 11:34:19.163009
[0m11:34:19.163692 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_tuples
[0m11:34:19.168244 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

            

    
        create table test.graph_tuples__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.link_events

    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_events
            where nullIf(CrmUserHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('YmClientHash'), toDateTime(0),  YmClientHash) as node_left
            from test.hash_events
            where nullIf(YmClientHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_events
            where nullIf(AppMetricaDeviceHash, '') is not null
    
        union all
    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(AppMetricaDeviceHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(CrmUserHash, '') is not null



    )
        ...
[0m11:34:19.169653 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.171064 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m11:34:19.176387 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.178038 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m11:34:19.183935 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.186143 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m11:34:19.188818 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.191886 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

    select name, type from system.columns where table = 'graph_tuples__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.192729 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.196009 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_datestat"
[0m11:34:19.196727 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_datestat (compile): 2024-06-06 11:34:19.088346 => 2024-06-06 11:34:19.196592
[0m11:34:19.197221 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.full_datestat
[0m11:34:19.278477 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

            

    
        create table test.full_datestat__dbt_tmp
        
  
        
  engine = MergeTree()
        order by (__date,__table_name)
        
        
        
        empty
    as (
        -- depends_on: test.link_datestat
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
 
WITH t0 AS (
SELECT * FROM test.link_datestat
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m11:34:19.279369 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.09 seconds
[0m11:34:19.282442 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_tuples"
[0m11:34:19.283923 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */

  
    
    
        
        insert into test.graph_tuples__dbt_backup ("hash", "node_left")
  -- depends_on: test.link_events

    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_events
            where nullIf(CrmUserHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('YmClientHash'), toDateTime(0),  YmClientHash) as node_left
            from test.hash_events
            where nullIf(YmClientHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), __datetime,  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_events
            where nullIf(AppMetricaDeviceHash, '') is not null
    
        union all
    
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('AppMetricaDeviceHash'), toDateTime(0),  AppMetricaDeviceHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(AppMetricaDeviceHash, '') is not null
            union all
        
        
        
        
        
            select
                    tuple(toLowCardinality(__link), toDateTime(0),  __id) as hash,
                    tuple(toLowCardinality('CrmUserHash'), toDateTime(0),  CrmUserHash) as node_left
            from test.hash_registry_appprofilematching
            where nullIf(CrmUserHash, '') is not null



  ...
[0m11:34:19.300930 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.304265 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    select name, type from system.columns where table = 'full_datestat__dbt_tmp'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.308831 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.310359 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */
EXCHANGE TABLES test.graph_tuples__dbt_backup AND test.graph_tuples 
  
  ...
[0m11:34:19.313311 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.313919 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.316011 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_datestat"
[0m11:34:19.321158 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_tuples: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_tuples"} */
drop table if exists test.graph_tuples__dbt_backup 
  ...
[0m11:34:19.323552 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

        
  
    
    
        
        insert into test.full_datestat__dbt_tmp ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash")
  -- depends_on: test.link_datestat
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry
 
WITH t0 AS (
SELECT * FROM test.link_datestat
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT * 
FROM t1
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  
    ...
[0m11:34:19.326379 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.327721 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_tuples (execute): 2024-06-06 11:34:19.163858 => 2024-06-06 11:34:19.327638
[0m11:34:19.328428 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0fe080>]}
[0m11:34:19.328958 [info ] [Thread-1 (]: 64 of 90 OK created sql table model test.graph_tuples .......................... [[32mOK[0m in 0.18s]
[0m11:34:19.329395 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_tuples
[0m11:34:19.330246 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_lookup
[0m11:34:19.330753 [info ] [Thread-1 (]: 65 of 90 START sql table model test.graph_lookup ............................... [RUN]
[0m11:34:19.331445 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_lookup'
[0m11:34:19.331737 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_lookup)
[0m11:34:19.331993 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_lookup
[0m11:34:19.335202 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_lookup"
[0m11:34:19.336297 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_lookup (compile): 2024-06-06 11:34:19.332122 => 2024-06-06 11:34:19.336187
[0m11:34:19.336637 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_lookup
[0m11:34:19.341825 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

            

    
        create table test.graph_lookup__dbt_backup
        
  
        
  engine = MergeTree()
        order by (key_number)
        
        
        
        empty
    as (
        -- depends_on: test.graph_tuples




with all_keys as
(
    
    select distinct hash as key_hash from test.graph_tuples
    union distinct select distinct node_left as key_hash from test.graph_tuples
)


select *, row_number() over() as key_number from all_keys





    )
        ...
[0m11:34:19.353384 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:19.357154 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    drop table if exists test.full_datestat__dbt_backup 
  
  ...
[0m11:34:19.357882 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.364757 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

    select name, type from system.columns where table = 'graph_lookup__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.366427 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.367714 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */

    rename table test.full_datestat__dbt_tmp to test.full_datestat__dbt_backup 
  
  ...
[0m11:34:19.371423 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.372718 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_lookup"
[0m11:34:19.373860 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.375899 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */
EXCHANGE TABLES test.full_datestat__dbt_backup AND test.full_datestat 
  
  ...
[0m11:34:19.377360 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */

  
    
    
        
        insert into test.graph_lookup__dbt_backup ("key_hash", "key_number")
  -- depends_on: test.graph_tuples




with all_keys as
(
    
    select distinct hash as key_hash from test.graph_tuples
    union distinct select distinct node_left as key_hash from test.graph_tuples
)


select *, row_number() over() as key_number from all_keys





  ...
[0m11:34:19.380070 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.384900 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_datestat: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_datestat"} */
drop table if exists test.full_datestat__dbt_backup 
  ...
[0m11:34:19.388006 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.389399 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_datestat (execute): 2024-06-06 11:34:19.197444 => 2024-06-06 11:34:19.389330
[0m11:34:19.390094 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ced6710>]}
[0m11:34:19.390625 [info ] [Thread-2 (]: 63 of 90 OK created sql incremental model test.full_datestat ................... [[32mOK[0m in 0.30s]
[0m11:34:19.391153 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.full_datestat
[0m11:34:19.392741 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.394067 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */
EXCHANGE TABLES test.graph_lookup__dbt_backup AND test.graph_lookup 
  
  ...
[0m11:34:19.399020 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.402513 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_lookup: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_lookup"} */
drop table if exists test.graph_lookup__dbt_backup 
  ...
[0m11:34:19.406294 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.407840 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_lookup (execute): 2024-06-06 11:34:19.336781 => 2024-06-06 11:34:19.407763
[0m11:34:19.408644 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ced4040>]}
[0m11:34:19.409311 [info ] [Thread-1 (]: 65 of 90 OK created sql table model test.graph_lookup .......................... [[32mOK[0m in 0.08s]
[0m11:34:19.409730 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_lookup
[0m11:34:19.411331 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.graph_unique
[0m11:34:19.411779 [info ] [Thread-2 (]: 66 of 90 START sql table model test.graph_unique ............................... [RUN]
[0m11:34:19.412487 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_unique'
[0m11:34:19.412848 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_unique)
[0m11:34:19.413012 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.graph_unique
[0m11:34:19.416392 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_unique"
[0m11:34:19.417430 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_unique (compile): 2024-06-06 11:34:19.413107 => 2024-06-06 11:34:19.417325
[0m11:34:19.417778 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.graph_unique
[0m11:34:19.421654 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

            

    
        create table test.graph_unique__dbt_backup
        
  
        
  engine = MergeTree()
        order by (key_hash)
        
        
        
        empty
    as (
        -- depends_on: test.graph_lookup




select * from test.graph_lookup





    )
        ...
[0m11:34:19.439296 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.442580 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

    select name, type from system.columns where table = 'graph_unique__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.449653 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.451082 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_unique"
[0m11:34:19.452557 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */

  
    
    
        
        insert into test.graph_unique__dbt_backup ("key_hash", "key_number")
  -- depends_on: test.graph_lookup




select * from test.graph_lookup





  ...
[0m11:34:19.458408 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.459857 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */
EXCHANGE TABLES test.graph_unique__dbt_backup AND test.graph_unique 
  
  ...
[0m11:34:19.464123 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.469623 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_unique: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_unique"} */
drop table if exists test.graph_unique__dbt_backup 
  ...
[0m11:34:19.473000 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.474216 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_unique (execute): 2024-06-06 11:34:19.417904 => 2024-06-06 11:34:19.474156
[0m11:34:19.474957 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf17f10>]}
[0m11:34:19.475502 [info ] [Thread-2 (]: 66 of 90 OK created sql table model test.graph_unique .......................... [[32mOK[0m in 0.06s]
[0m11:34:19.476035 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.graph_unique
[0m11:34:19.477525 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_edge
[0m11:34:19.478859 [info ] [Thread-1 (]: 67 of 90 START sql table model test.graph_edge ................................. [RUN]
[0m11:34:19.479508 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_edge'
[0m11:34:19.479655 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_edge)
[0m11:34:19.479798 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_edge
[0m11:34:19.483155 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_edge"
[0m11:34:19.484740 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_edge (compile): 2024-06-06 11:34:19.479890 => 2024-06-06 11:34:19.484541
[0m11:34:19.485259 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_edge
[0m11:34:19.489693 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

            

    
        create table test.graph_edge__dbt_backup
        
  
        
  engine = MergeTree()
        
      order by (tuple())
        
        
        
        empty
    as (
        -- depends_on: test.graph_unique
-- depends_on: test.graph_tuples




with join_left as (
    select key_number as node_id_left, node_left
    from test.graph_tuples x
    join test.graph_unique  y on x.hash = y.key_hash
)


select node_id_left, key_number as node_id_right, node_id_left as group_id, 1 as has_changed 
from join_left x
join test.graph_unique  y on x.node_left = y.key_hash





    )
        ...
[0m11:34:19.507931 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.511480 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

    select name, type from system.columns where table = 'graph_edge__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.517430 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.518853 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_edge"
[0m11:34:19.519892 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

  
    
    
        
        insert into test.graph_edge__dbt_backup ("node_id_left", "node_id_right", "group_id", "has_changed")
  -- depends_on: test.graph_unique
-- depends_on: test.graph_tuples




with join_left as (
    select key_number as node_id_left, node_left
    from test.graph_tuples x
    join test.graph_unique  y on x.hash = y.key_hash
)


select node_id_left, key_number as node_id_right, node_id_left as group_id, 1 as has_changed 
from join_left x
join test.graph_unique  y on x.node_left = y.key_hash





  ...
[0m11:34:19.531326 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.532895 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */
EXCHANGE TABLES test.graph_edge__dbt_backup AND test.graph_edge 
  
  ...
[0m11:34:19.537319 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.539848 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */

        insert into test.graph_edge(node_id_left, node_id_right, group_id, has_changed)
                    select
                        node_id_right,
                        node_id_left,
                        group_id,
                        has_changed
                    from test.graph_edge;
      ...
[0m11:34:19.546123 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.549755 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_edge: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_edge"} */
drop table if exists test.graph_edge__dbt_backup 
  ...
[0m11:34:19.552876 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.554618 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_edge (execute): 2024-06-06 11:34:19.485374 => 2024-06-06 11:34:19.554560
[0m11:34:19.555122 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf16c80>]}
[0m11:34:19.555437 [info ] [Thread-1 (]: 67 of 90 OK created sql table model test.graph_edge ............................ [[32mOK[0m in 0.08s]
[0m11:34:19.555767 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_edge
[0m11:34:19.557493 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.graph_glue
[0m11:34:19.558526 [info ] [Thread-2 (]: 68 of 90 START sql table model test.graph_glue ................................. [RUN]
[0m11:34:19.559593 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_glue'
[0m11:34:19.559911 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_glue)
[0m11:34:19.560117 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.graph_glue
[0m11:34:19.565054 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_glue"
[0m11:34:19.566180 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_glue (compile): 2024-06-06 11:34:19.560243 => 2024-06-06 11:34:19.566073
[0m11:34:19.566442 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.graph_glue
[0m11:34:19.570836 [debug] [Thread-2 (]: Running iteration 0
[0m11:34:19.571317 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m11:34:19.632558 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m11:34:19.633593 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m11:34:19.670047 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:19.671597 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m11:34:19.680321 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.681359 [debug] [Thread-2 (]: VALUE: 1
[0m11:34:19.681564 [debug] [Thread-2 (]: Running iteration 1
[0m11:34:19.681909 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m11:34:19.711731 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:19.712754 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m11:34:19.743491 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:19.744928 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m11:34:19.754565 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.755774 [debug] [Thread-2 (]: VALUE: 0
[0m11:34:19.755984 [debug] [Thread-2 (]: Running iteration 2
[0m11:34:19.756095 [debug] [Thread-2 (]: Running iteration 3
[0m11:34:19.756194 [debug] [Thread-2 (]: Running iteration 4
[0m11:34:19.756290 [debug] [Thread-2 (]: Running iteration 5
[0m11:34:19.756388 [debug] [Thread-2 (]: Running iteration 6
[0m11:34:19.756483 [debug] [Thread-2 (]: Running iteration 7
[0m11:34:19.756581 [debug] [Thread-2 (]: Running iteration 8
[0m11:34:19.756675 [debug] [Thread-2 (]: Running iteration 9
[0m11:34:19.756769 [debug] [Thread-2 (]: Running iteration 10
[0m11:34:19.756862 [debug] [Thread-2 (]: Running iteration 11
[0m11:34:19.756956 [debug] [Thread-2 (]: Running iteration 12
[0m11:34:19.757062 [debug] [Thread-2 (]: Running iteration 13
[0m11:34:19.758556 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

            

    
        create table test.graph_glue__dbt_backup
        
  
        
  engine = MergeTree()
        order by (node_id_left)
        
        
        
        empty
    as (
        -- depends_on: test.graph_edge




select 
    node_id_left,
    min(group_id) as qid
from test.graph_edge
group by node_id_left





    )
        ...
[0m11:34:19.774355 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.776959 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

    select name, type from system.columns where table = 'graph_glue__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.781591 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.782883 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_glue"
[0m11:34:19.784189 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */

  
    
    
        
        insert into test.graph_glue__dbt_backup ("node_id_left", "qid")
  -- depends_on: test.graph_edge




select 
    node_id_left,
    min(group_id) as qid
from test.graph_edge
group by node_id_left





  ...
[0m11:34:19.804447 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.805577 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */
EXCHANGE TABLES test.graph_glue__dbt_backup AND test.graph_glue 
  
  ...
[0m11:34:19.809653 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.813543 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_glue: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_glue"} */
drop table if exists test.graph_glue__dbt_backup 
  ...
[0m11:34:19.817215 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.819088 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.graph_glue (execute): 2024-06-06 11:34:19.566533 => 2024-06-06 11:34:19.819027
[0m11:34:19.819623 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ce12d70>]}
[0m11:34:19.819942 [info ] [Thread-2 (]: 68 of 90 OK created sql table model test.graph_glue ............................ [[32mOK[0m in 0.26s]
[0m11:34:19.820273 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.graph_glue
[0m11:34:19.822139 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.graph_qid
[0m11:34:19.822921 [info ] [Thread-1 (]: 69 of 90 START sql table model test.graph_qid .................................. [RUN]
[0m11:34:19.823461 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.graph_qid'
[0m11:34:19.823592 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.graph_qid)
[0m11:34:19.823737 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.graph_qid
[0m11:34:19.826908 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.graph_qid"
[0m11:34:19.828433 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_qid (compile): 2024-06-06 11:34:19.823827 => 2024-06-06 11:34:19.828227
[0m11:34:19.828894 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.graph_qid
[0m11:34:19.832667 [debug] [Thread-1 (]: Running iteration 0
[0m11:34:19.833102 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        create or replace table test.graph_right engine=Log() as
        with
        min_group_id as (
            select
                node_id_left,
                min(group_id) as min_group_id
            from test.graph_edge
            group by node_id_left
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_edge e
        join min_group_id r on r.node_id_left = e.node_id_left
    
  ...
[0m11:34:19.871513 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:19.872546 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        create or replace table test.graph_edge engine=Log() as
        with
        min_group_id as (
            select
                node_id_right,
                min(group_id) as min_group_id
            from test.graph_right
            group by node_id_right
        )

        select
            node_id_left,
            node_id_right,
            min_group_id as group_id,
            min_group_id != e.group_id as has_changed
        from test.graph_right e
        join min_group_id r on r.node_id_right = e.node_id_right
    
  ...
[0m11:34:19.906318 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:19.907781 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    
        select 
            max(has_changed) 
        from test.graph_edge
    
  ...
[0m11:34:19.916935 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.918081 [debug] [Thread-1 (]: VALUE: 0
[0m11:34:19.918273 [debug] [Thread-1 (]: Running iteration 1
[0m11:34:19.918383 [debug] [Thread-1 (]: Running iteration 2
[0m11:34:19.918482 [debug] [Thread-1 (]: Running iteration 3
[0m11:34:19.918579 [debug] [Thread-1 (]: Running iteration 4
[0m11:34:19.918674 [debug] [Thread-1 (]: Running iteration 5
[0m11:34:19.918808 [debug] [Thread-1 (]: Running iteration 6
[0m11:34:19.918914 [debug] [Thread-1 (]: Running iteration 7
[0m11:34:19.919009 [debug] [Thread-1 (]: Running iteration 8
[0m11:34:19.919102 [debug] [Thread-1 (]: Running iteration 9
[0m11:34:19.919195 [debug] [Thread-1 (]: Running iteration 10
[0m11:34:19.919286 [debug] [Thread-1 (]: Running iteration 11
[0m11:34:19.919378 [debug] [Thread-1 (]: Running iteration 12
[0m11:34:19.919469 [debug] [Thread-1 (]: Running iteration 13
[0m11:34:19.921899 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

            

    
        create table test.graph_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.graph_lookup
-- depends_on: test.graph_glue




select  
    toLowCardinality(
        tupleElement(key_hash, 1)
    ) as __link,
    tupleElement(key_hash, 2) as __datetime,
    tupleElement(key_hash, 3) as __id,
    qid
from test.graph_glue  -- Объединение с таблицей graph_glue
join test.graph_lookup on key_number = node_id_left  -- Соединение с таблицей graph_lookup





    )
        ...
[0m11:34:19.942859 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:19.945373 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

    select name, type from system.columns where table = 'graph_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:19.950069 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.951549 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.graph_qid"
[0m11:34:19.952629 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */

  
    
    
        
        insert into test.graph_qid__dbt_backup ("__link", "__datetime", "__id", "qid")
  -- depends_on: test.graph_lookup
-- depends_on: test.graph_glue




select  
    toLowCardinality(
        tupleElement(key_hash, 1)
    ) as __link,
    tupleElement(key_hash, 2) as __datetime,
    tupleElement(key_hash, 3) as __id,
    qid
from test.graph_glue  -- Объединение с таблицей graph_glue
join test.graph_lookup on key_number = node_id_left  -- Соединение с таблицей graph_lookup





  ...
[0m11:34:19.961185 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:19.962570 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */
EXCHANGE TABLES test.graph_qid__dbt_backup AND test.graph_qid 
  
  ...
[0m11:34:19.966289 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.970005 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.graph_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.graph_qid"} */
drop table if exists test.graph_qid__dbt_backup 
  ...
[0m11:34:19.974977 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.976231 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.graph_qid (execute): 2024-06-06 11:34:19.828996 => 2024-06-06 11:34:19.976171
[0m11:34:19.976754 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d029210>]}
[0m11:34:19.977067 [info ] [Thread-1 (]: 69 of 90 OK created sql table model test.graph_qid ............................. [[32mOK[0m in 0.15s]
[0m11:34:19.977391 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.graph_qid
[0m11:34:19.978736 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.full_events
[0m11:34:19.979213 [info ] [Thread-2 (]: 70 of 90 START sql table model test.full_events ................................ [RUN]
[0m11:34:19.979787 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.full_events'
[0m11:34:19.979983 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.full_events)
[0m11:34:19.980170 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.full_events
[0m11:34:19.985370 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_manualadcoststat'
    
  ...
[0m11:34:19.989868 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.991538 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_utmhashregistry'
    
  ...
[0m11:34:19.996525 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:19.998492 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_adcoststat'
    
  ...
[0m11:34:20.003015 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.004267 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_mediaplanstat'
    
  ...
[0m11:34:20.008963 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.010315 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appinstallstat'
    
  ...
[0m11:34:20.015817 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.017979 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appeventstat'
    
  ...
[0m11:34:20.022922 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.024750 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appsessionstat'
    
  ...
[0m11:34:20.029450 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.031133 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appdeeplinkstat'
    
  ...
[0m11:34:20.035902 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.037798 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_visitstat'
    
  ...
[0m11:34:20.043532 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.045301 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    
        SELECT 1 FROM system.tables WHERE database = 'test' AND name = 'link_registry_appprofilematching'
    
  ...
[0m11:34:20.051196 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.053250 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.full_events"
[0m11:34:20.053661 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_events (compile): 2024-06-06 11:34:19.980285 => 2024-06-06 11:34:20.053598
[0m11:34:20.053830 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.full_events
[0m11:34:20.059061 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

            

    
        create table test.full_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.graph_qid
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry

WITH t0 AS (
SELECT * FROM test.link_events
LEFT JOIN test.graph_qid USING (__id, __link, __datetime)
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT t1.*, link_registry_appprofilematching.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t1 
LEFT JOIN link_registry_appprofilematching USING (AppMetricaDeviceHash,CrmUserHash) 
) 
SELECT COLUMNS('^[^.]+$') FROM t2
    )
        ...
[0m11:34:20.104312 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:20.106917 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

    select name, type from system.columns where table = 'full_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.112185 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.114309 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.full_events"
[0m11:34:20.114765 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */

  
    
    
        
        insert into test.full_events__dbt_backup ("__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "qid", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.graph_qid
-- depends_on: test.link_registry_appprofilematching
-- depends_on: test.link_registry_utmhashregistry

WITH t0 AS (
SELECT * FROM test.link_events
LEFT JOIN test.graph_qid USING (__id, __link, __datetime)
)
, t1 AS ( 
SELECT t0.*, link_registry_utmhashregistry.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t0 
LEFT JOIN link_registry_utmhashregistry USING (UtmHashHash) 
)
, t2 AS ( 
SELECT t1.*, link_registry_appprofilematching.*EXCEPT(__emitted_at, __table_name, __id, __datetime, __link) 
FROM t1 
LEFT JOIN link_registry_appprofilematching USING (AppMetricaDeviceHash,CrmUserHash) 
) 
SELECT COLUMNS('^[^.]+$') FROM t2
  ...
[0m11:34:20.169268 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.05 seconds
[0m11:34:20.170372 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */
EXCHANGE TABLES test.full_events__dbt_backup AND test.full_events 
  
  ...
[0m11:34:20.174159 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.178209 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.full_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.full_events"} */
drop table if exists test.full_events__dbt_backup 
  ...
[0m11:34:20.181607 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.182839 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.full_events (execute): 2024-06-06 11:34:20.053918 => 2024-06-06 11:34:20.182782
[0m11:34:20.183357 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0498a0>]}
[0m11:34:20.183674 [info ] [Thread-2 (]: 70 of 90 OK created sql table model test.full_events ........................... [[32mOK[0m in 0.20s]
[0m11:34:20.184013 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.full_events
[0m11:34:20.185364 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m11:34:20.186004 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m11:34:20.186478 [info ] [Thread-1 (]: 71 of 90 START sql table model test.attr_myfirstfunnel_prepare_with_qid ........ [RUN]
[0m11:34:20.187315 [info ] [Thread-2 (]: 72 of 90 START sql table model test.attr_mysecondfunnel_prepare_with_qid ....... [RUN]
[0m11:34:20.188845 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid'
[0m11:34:20.189605 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid'
[0m11:34:20.189875 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid)
[0m11:34:20.190205 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid)
[0m11:34:20.190564 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m11:34:20.190827 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m11:34:20.194306 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"
[0m11:34:20.198738 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"
[0m11:34:20.200342 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid (compile): 2024-06-06 11:34:20.194784 => 2024-06-06 11:34:20.200230
[0m11:34:20.200720 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m11:34:20.204843 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

            

    
        create table test.attr_mysecondfunnel_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



    )
        ...
[0m11:34:20.205391 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid (compile): 2024-06-06 11:34:20.191179 => 2024-06-06 11:34:20.205209
[0m11:34:20.206703 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m11:34:20.212841 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

            

    
        create table test.attr_myfirstfunnel_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



    )
        ...
[0m11:34:20.228451 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.232625 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.237257 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.239598 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"
[0m11:34:20.241157 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_prepare_with_qid__dbt_backup ("qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



  ...
[0m11:34:20.253664 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:20.256532 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.262500 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.265314 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"
[0m11:34:20.265834 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_prepare_with_qid__dbt_backup ("qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "adSourceDirty", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash")
  -- depends_on: test.full_events
-- depends_on: test.graph_qid

WITH full_events_without_qid AS (
SELECT *EXCEPT(qid) FROM test.full_events
)

SELECT y.qid, x.*
FROM full_events_without_qid AS x
LEFT JOIN test.graph_qid AS y
    USING (__datetime,__link, __id)



  ...
[0m11:34:20.266944 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:20.268164 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */
EXCHANGE TABLES test.attr_mysecondfunnel_prepare_with_qid__dbt_backup AND test.attr_mysecondfunnel_prepare_with_qid 
  
  ...
[0m11:34:20.272562 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.277182 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid"} */
drop table if exists test.attr_mysecondfunnel_prepare_with_qid__dbt_backup 
  ...
[0m11:34:20.280502 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.281923 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid (execute): 2024-06-06 11:34:20.200877 => 2024-06-06 11:34:20.281854
[0m11:34:20.282644 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d028d30>]}
[0m11:34:20.283163 [info ] [Thread-2 (]: 72 of 90 OK created sql table model test.attr_mysecondfunnel_prepare_with_qid .. [[32mOK[0m in 0.09s]
[0m11:34:20.283624 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_prepare_with_qid
[0m11:34:20.284895 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m11:34:20.286242 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.287515 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */
EXCHANGE TABLES test.attr_myfirstfunnel_prepare_with_qid__dbt_backup AND test.attr_myfirstfunnel_prepare_with_qid 
  
  ...
[0m11:34:20.285529 [info ] [Thread-2 (]: 73 of 90 START sql table model test.attr_mysecondfunnel_create_events .......... [RUN]
[0m11:34:20.289091 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_create_events'
[0m11:34:20.289421 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_create_events)
[0m11:34:20.289741 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m11:34:20.297998 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.299958 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"
[0m11:34:20.304297 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid"} */
drop table if exists test.attr_myfirstfunnel_prepare_with_qid__dbt_backup 
  ...
[0m11:34:20.306800 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_events (compile): 2024-06-06 11:34:20.290139 => 2024-06-06 11:34:20.306412
[0m11:34:20.307351 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m11:34:20.312124 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

            

    
        create table test.attr_mysecondfunnel_create_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  1
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  2
        WHEN __link = 'AppDeeplinkStat'  THEN  2
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  3
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_mysecondfunnel_prepare_with_qid





    )
        ...
[0m11:34:20.313469 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.316074 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid (execute): 2024-06-06 11:34:20.207021 => 2024-06-06 11:34:20.316001
[0m11:34:20.317193 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf36f50>]}
[0m11:34:20.318225 [info ] [Thread-1 (]: 71 of 90 OK created sql table model test.attr_myfirstfunnel_prepare_with_qid ... [[32mOK[0m in 0.13s]
[0m11:34:20.318996 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_prepare_with_qid
[0m11:34:20.320290 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m11:34:20.320908 [info ] [Thread-1 (]: 74 of 90 START sql table model test.attr_myfirstfunnel_create_events ........... [RUN]
[0m11:34:20.321639 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_create_events'
[0m11:34:20.321908 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_create_events)
[0m11:34:20.322116 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m11:34:20.328121 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"
[0m11:34:20.328903 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_events (compile): 2024-06-06 11:34:20.322224 => 2024-06-06 11:34:20.328746
[0m11:34:20.329233 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m11:34:20.334898 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

            

    
        create table test.attr_myfirstfunnel_create_events__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'VisitStat'  and osName = 'web'  THEN  1
        
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  2
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  3
        WHEN __link = 'AppDeeplinkStat'  THEN  3
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  4
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'VisitStat' THEN 'visits_step'
        
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_myfirstfunnel_prepare_with_qid





    )
        ...
[0m11:34:20.336279 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.340036 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_create_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.346245 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.348504 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"
[0m11:34:20.349574 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_create_events__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step")
  -- depends_on: test.attr_mysecondfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  1
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  2
        WHEN __link = 'AppDeeplinkStat'  THEN  2
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  3
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_mysecondfunnel_prepare_with_qid





  ...
[0m11:34:20.350991 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.355032 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_create_events__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.359083 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.360482 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */
EXCHANGE TABLES test.attr_mysecondfunnel_create_events__dbt_backup AND test.attr_mysecondfunnel_create_events 
  
  ...
[0m11:34:20.361179 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.363908 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"
[0m11:34:20.364920 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_create_events__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step")
  -- depends_on: test.attr_myfirstfunnel_prepare_with_qid




select
    qid, 
    __link,
    CASE
    WHEN __link = 'VisitStat'  and osName = 'web'  THEN  1
        
    WHEN __link = 'AppInstallStat'  and installs >= 1  THEN  2
        
    WHEN __link = 'AppSessionStat'  and sessions >= 1  THEN  3
        WHEN __link = 'AppDeeplinkStat'  THEN  3
        
    WHEN __link = 'AppEventStat'  and screenView >= 1  THEN  4
        
    
    ELSE 0
    END as __priority, 
    __id,
    __datetime,
    toLowCardinality(
    CASE
    WHEN __link = 'VisitStat' THEN 'visits_step'
        
    WHEN __link = 'AppInstallStat' THEN 'install_step'
        
    WHEN __link = 'AppSessionStat' THEN 'app_visits_step'
        WHEN __link = 'AppDeeplinkStat' THEN 'app_visits_step'
        
    WHEN __link = 'AppEventStat' THEN 'event_step'
        
    
    END) as __step
 from test.attr_myfirstfunnel_prepare_with_qid





  ...
[0m11:34:20.366661 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.371237 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_events"} */
drop table if exists test.attr_mysecondfunnel_create_events__dbt_backup 
  ...
[0m11:34:20.372715 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.374124 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */
EXCHANGE TABLES test.attr_myfirstfunnel_create_events__dbt_backup AND test.attr_myfirstfunnel_create_events 
  
  ...
[0m11:34:20.376388 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.378615 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_events (execute): 2024-06-06 11:34:20.307630 => 2024-06-06 11:34:20.378536
[0m11:34:20.379703 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d04b040>]}
[0m11:34:20.380630 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.385328 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_events: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_events"} */
drop table if exists test.attr_myfirstfunnel_create_events__dbt_backup 
  ...
[0m11:34:20.381346 [info ] [Thread-2 (]: 73 of 90 OK created sql table model test.attr_mysecondfunnel_create_events ..... [[32mOK[0m in 0.09s]
[0m11:34:20.387135 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_events
[0m11:34:20.388573 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m11:34:20.389326 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.389718 [info ] [Thread-2 (]: 75 of 90 START sql table model test.attr_mysecondfunnel_add_row_number ......... [RUN]
[0m11:34:20.391346 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_events (execute): 2024-06-06 11:34:20.329336 => 2024-06-06 11:34:20.391257
[0m11:34:20.392506 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number'
[0m11:34:20.393553 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf36f50>]}
[0m11:34:20.393983 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number)
[0m11:34:20.395152 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m11:34:20.394774 [info ] [Thread-1 (]: 74 of 90 OK created sql table model test.attr_myfirstfunnel_create_events ...... [[32mOK[0m in 0.07s]
[0m11:34:20.399243 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"
[0m11:34:20.399912 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_events
[0m11:34:20.401752 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m11:34:20.402484 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number (compile): 2024-06-06 11:34:20.395626 => 2024-06-06 11:34:20.402413
[0m11:34:20.402850 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m11:34:20.402254 [info ] [Thread-1 (]: 76 of 90 START sql table model test.attr_myfirstfunnel_add_row_number .......... [RUN]
[0m11:34:20.409324 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

            

    
        create table test.attr_mysecondfunnel_add_row_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_mysecondfunnel_create_events





    )
        ...
[0m11:34:20.410067 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number'
[0m11:34:20.411122 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number)
[0m11:34:20.412032 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m11:34:20.415750 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"
[0m11:34:20.416448 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number (compile): 2024-06-06 11:34:20.412288 => 2024-06-06 11:34:20.416330
[0m11:34:20.416764 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m11:34:20.422882 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

            

    
        create table test.attr_myfirstfunnel_add_row_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_myfirstfunnel_create_events





    )
        ...
[0m11:34:20.426186 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.429044 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_add_row_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.435104 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.437192 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"
[0m11:34:20.438509 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.441689 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_add_row_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.443111 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_add_row_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step", "__rn")
  -- depends_on: test.attr_mysecondfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_mysecondfunnel_create_events





  ...
[0m11:34:20.447973 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.449690 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"
[0m11:34:20.450497 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.451541 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */
EXCHANGE TABLES test.attr_mysecondfunnel_add_row_number__dbt_backup AND test.attr_mysecondfunnel_add_row_number 
  
  ...
[0m11:34:20.452841 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_add_row_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__step", "__rn")
  -- depends_on: test.attr_myfirstfunnel_create_events




select
    *,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from test.attr_myfirstfunnel_create_events





  ...
[0m11:34:20.456348 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.461167 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number"} */
drop table if exists test.attr_mysecondfunnel_add_row_number__dbt_backup 
  ...
[0m11:34:20.462615 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.464399 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */
EXCHANGE TABLES test.attr_myfirstfunnel_add_row_number__dbt_backup AND test.attr_myfirstfunnel_add_row_number 
  
  ...
[0m11:34:20.465493 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.467975 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number (execute): 2024-06-06 11:34:20.403023 => 2024-06-06 11:34:20.467897
[0m11:34:20.468678 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cc97cd0>]}
[0m11:34:20.469169 [info ] [Thread-2 (]: 75 of 90 OK created sql table model test.attr_mysecondfunnel_add_row_number .... [[32mOK[0m in 0.08s]
[0m11:34:20.469573 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_add_row_number
[0m11:34:20.470377 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m11:34:20.470819 [info ] [Thread-2 (]: 77 of 90 START sql table model test.attr_mysecondfunnel_find_new_period ........ [RUN]
[0m11:34:20.471403 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period'
[0m11:34:20.471675 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period)
[0m11:34:20.471909 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m11:34:20.477643 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.481379 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number"} */
drop table if exists test.attr_myfirstfunnel_add_row_number__dbt_backup 
  ...
[0m11:34:20.484466 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"
[0m11:34:20.487074 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period (compile): 2024-06-06 11:34:20.472044 => 2024-06-06 11:34:20.486884
[0m11:34:20.487770 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m11:34:20.492335 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

            

    
        create table test.attr_mysecondfunnel_find_new_period__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_mysecondfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





    )
        ...
[0m11:34:20.493289 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.496568 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number (execute): 2024-06-06 11:34:20.416865 => 2024-06-06 11:34:20.496463
[0m11:34:20.497678 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ce13910>]}
[0m11:34:20.498879 [info ] [Thread-1 (]: 76 of 90 OK created sql table model test.attr_myfirstfunnel_add_row_number ..... [[32mOK[0m in 0.09s]
[0m11:34:20.499810 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_add_row_number
[0m11:34:20.500752 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m11:34:20.501307 [info ] [Thread-1 (]: 78 of 90 START sql table model test.attr_myfirstfunnel_find_new_period ......... [RUN]
[0m11:34:20.502077 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period'
[0m11:34:20.502418 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period)
[0m11:34:20.502680 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m11:34:20.509466 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"
[0m11:34:20.510099 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period (compile): 2024-06-06 11:34:20.502783 => 2024-06-06 11:34:20.509983
[0m11:34:20.510444 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m11:34:20.516033 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

            

    
        create table test.attr_myfirstfunnel_find_new_period__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3, 4] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_myfirstfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'VisitStat' and toDate(__datetime) - toDate(prep_new_period) < 
             90  THEN false
        
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





    )
        ...
[0m11:34:20.522453 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:20.525781 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_find_new_period__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.532612 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.534517 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"
[0m11:34:20.535315 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.538112 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_find_new_period__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.539301 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_find_new_period__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period")
  -- depends_on: test.attr_mysecondfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_mysecondfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





  ...
[0m11:34:20.543761 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.545877 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"
[0m11:34:20.546728 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_find_new_period__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period")
  -- depends_on: test.attr_myfirstfunnel_add_row_number






with prep_new_period as (
    select
        *,
        max(case when __priority in [1, 2, 3, 4] then __datetime else null end) over (partition by qid order by __rn rows between unbounded preceding and 1 preceding) as prep_new_period
    from test.attr_myfirstfunnel_add_row_number
)


select
    qid, 
    __link,
    __priority,
    __id,
    __datetime,
    __rn,
    __step,
    CASE
    
            WHEN __link = 'VisitStat' and toDate(__datetime) - toDate(prep_new_period) < 
             90  THEN false
        
            WHEN __link = 'AppInstallStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppSessionStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppDeeplinkStat' and toDate(__datetime) - toDate(prep_new_period) < 
             30  THEN false
        
            WHEN __link = 'AppEventStat' and toDate(__datetime) - toDate(prep_new_period) < 
             7  THEN false
        ELSE true
    END as __is_new_period
 from prep_new_period   





  ...
[0m11:34:20.553177 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.554687 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */
EXCHANGE TABLES test.attr_mysecondfunnel_find_new_period__dbt_backup AND test.attr_mysecondfunnel_find_new_period 
  
  ...
[0m11:34:20.556914 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.558981 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */
EXCHANGE TABLES test.attr_myfirstfunnel_find_new_period__dbt_backup AND test.attr_myfirstfunnel_find_new_period 
  
  ...
[0m11:34:20.560632 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.565044 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period"} */
drop table if exists test.attr_mysecondfunnel_find_new_period__dbt_backup 
  ...
[0m11:34:20.566110 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.571194 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period"} */
drop table if exists test.attr_myfirstfunnel_find_new_period__dbt_backup 
  ...
[0m11:34:20.572126 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.575561 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period (execute): 2024-06-06 11:34:20.488064 => 2024-06-06 11:34:20.575396
[0m11:34:20.576403 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.577290 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d043190>]}
[0m11:34:20.579047 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period (execute): 2024-06-06 11:34:20.510571 => 2024-06-06 11:34:20.578974
[0m11:34:20.579959 [info ] [Thread-2 (]: 77 of 90 OK created sql table model test.attr_mysecondfunnel_find_new_period ... [[32mOK[0m in 0.11s]
[0m11:34:20.581864 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ce117e0>]}
[0m11:34:20.582612 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_find_new_period
[0m11:34:20.583166 [info ] [Thread-1 (]: 78 of 90 OK created sql table model test.attr_myfirstfunnel_find_new_period .... [[32mOK[0m in 0.08s]
[0m11:34:20.584546 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_find_new_period
[0m11:34:20.586099 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m11:34:20.586538 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m11:34:20.586861 [info ] [Thread-2 (]: 79 of 90 START sql table model test.attr_myfirstfunnel_calculate_period_number . [RUN]
[0m11:34:20.587368 [info ] [Thread-1 (]: 80 of 90 START sql table model test.attr_mysecondfunnel_calculate_period_number  [RUN]
[0m11:34:20.588291 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number'
[0m11:34:20.589202 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number'
[0m11:34:20.589626 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number)
[0m11:34:20.589918 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number)
[0m11:34:20.590194 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m11:34:20.590415 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m11:34:20.595663 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"
[0m11:34:20.600020 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"
[0m11:34:20.601667 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number (compile): 2024-06-06 11:34:20.590594 => 2024-06-06 11:34:20.601528
[0m11:34:20.602076 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m11:34:20.605845 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

            

    
        create table test.attr_myfirstfunnel_calculate_period_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_myfirstfunnel_find_new_period





    )
        ...
[0m11:34:20.607011 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number (compile): 2024-06-06 11:34:20.596289 => 2024-06-06 11:34:20.606874
[0m11:34:20.607787 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m11:34:20.613047 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

            

    
        create table test.attr_mysecondfunnel_calculate_period_number__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_mysecondfunnel_find_new_period





    )
        ...
[0m11:34:20.622265 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.626069 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_calculate_period_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.629500 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.633295 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_calculate_period_number__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.634192 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.637513 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"
[0m11:34:20.638799 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_calculate_period_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period", "__period_number")
  -- depends_on: test.attr_myfirstfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_myfirstfunnel_find_new_period





  ...
[0m11:34:20.640043 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.642920 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"
[0m11:34:20.643615 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_calculate_period_number__dbt_backup ("qid", "__link", "__priority", "__id", "__datetime", "__rn", "__step", "__is_new_period", "__period_number")
  -- depends_on: test.attr_mysecondfunnel_find_new_period




select
    *,
    sum(toInt32(__is_new_period)) over (partition by qid order by __rn) AS __period_number
from test.attr_mysecondfunnel_find_new_period





  ...
[0m11:34:20.647294 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.648629 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */
EXCHANGE TABLES test.attr_myfirstfunnel_calculate_period_number__dbt_backup AND test.attr_myfirstfunnel_calculate_period_number 
  
  ...
[0m11:34:20.651811 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.653098 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */
EXCHANGE TABLES test.attr_mysecondfunnel_calculate_period_number__dbt_backup AND test.attr_mysecondfunnel_calculate_period_number 
  
  ...
[0m11:34:20.653711 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.658348 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number"} */
drop table if exists test.attr_myfirstfunnel_calculate_period_number__dbt_backup 
  ...
[0m11:34:20.662348 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.662951 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.667070 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number"} */
drop table if exists test.attr_mysecondfunnel_calculate_period_number__dbt_backup 
  ...
[0m11:34:20.668874 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number (execute): 2024-06-06 11:34:20.602225 => 2024-06-06 11:34:20.668815
[0m11:34:20.670422 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cdb08e0>]}
[0m11:34:20.671443 [info ] [Thread-2 (]: 79 of 90 OK created sql table model test.attr_myfirstfunnel_calculate_period_number  [[32mOK[0m in 0.08s]
[0m11:34:20.672445 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_calculate_period_number
[0m11:34:20.673176 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.675307 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number (execute): 2024-06-06 11:34:20.608065 => 2024-06-06 11:34:20.675245
[0m11:34:20.675995 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ceb8970>]}
[0m11:34:20.676427 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m11:34:20.677157 [info ] [Thread-1 (]: 80 of 90 OK created sql table model test.attr_mysecondfunnel_calculate_period_number  [[32mOK[0m in 0.09s]
[0m11:34:20.678226 [info ] [Thread-2 (]: 81 of 90 START sql table model test.attr_myfirstfunnel_create_missed_steps ..... [RUN]
[0m11:34:20.679474 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_calculate_period_number
[0m11:34:20.680290 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps'
[0m11:34:20.681383 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps)
[0m11:34:20.681640 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m11:34:20.684701 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"
[0m11:34:20.685469 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m11:34:20.685919 [info ] [Thread-1 (]: 82 of 90 START sql table model test.attr_mysecondfunnel_create_missed_steps .... [RUN]
[0m11:34:20.686597 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps'
[0m11:34:20.687275 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps)
[0m11:34:20.687842 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m11:34:20.691105 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"
[0m11:34:20.691775 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps (compile): 2024-06-06 11:34:20.681807 => 2024-06-06 11:34:20.691619
[0m11:34:20.692665 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m11:34:20.697965 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

            

    
        create table test.attr_myfirstfunnel_create_missed_steps__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_myfirstfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





    )
        ...
[0m11:34:20.699687 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps (compile): 2024-06-06 11:34:20.688061 => 2024-06-06 11:34:20.699514
[0m11:34:20.700326 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m11:34:20.780793 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

            

    
        create table test.attr_mysecondfunnel_create_missed_steps__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__link,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_mysecondfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





    )
        ...
[0m11:34:20.807504 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.11 seconds
[0m11:34:20.810361 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_create_missed_steps__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.811797 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:20.814954 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_create_missed_steps__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.815707 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.818737 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"
[0m11:34:20.819993 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_create_missed_steps__dbt_backup ("qid", "__link", "__id", "__priority", "__datetime", "__period_number", "__if_missed", "__step", "__rn")
  -- depends_on: test.attr_myfirstfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_myfirstfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





  ...
[0m11:34:20.821267 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.822979 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"
[0m11:34:20.823838 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_create_missed_steps__dbt_backup ("qid", "__link", "__id", "__priority", "__datetime", "__period_number", "__if_missed", "__step", "__rn")
  -- depends_on: test.attr_mysecondfunnel_calculate_period_number




with calc_max_priority as (
    select
        qid, 
        __link,
        __id,
        __datetime,
        __rn,
        __priority,
        __period_number,
        __step,
        max(__priority) over(partition by qid, __period_number) as max_priority
    from test.attr_mysecondfunnel_calculate_period_number
),


generate_all_priorities as (
    select
        distinct qid, __link,
        arrayJoin(range(1, assumeNotNull(max_priority) + 1)) as gen_priority
    from calc_max_priority
),


final as (
    select
        first_value(__id) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __id,
        gen_priority as __priority,
        qid, __link,
        first_value(__datetime) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __datetime,
        first_value(__period_number) OVER (PARTITION BY qid ORDER BY gen_priority ROWS BETWEEN current row AND UNBOUNDED FOLLOWING ) as __period_number,
        case when calc_max_priority.qid = 0 then true else false end as __if_missed,
        __step
    from generate_all_priorities
    left join calc_max_priority
        on generate_all_priorities.qid = calc_max_priority.qid and
           generate_all_priorities.gen_priority = calc_max_priority.__priority
)


select
    qid, __link, __id,
    __priority, __datetime,
    __period_number,
    __if_missed,__step,
    row_number() over (partition by qid order by __datetime, __priority, __id) AS __rn
from final





  ...
[0m11:34:20.842756 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.843851 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */
EXCHANGE TABLES test.attr_mysecondfunnel_create_missed_steps__dbt_backup AND test.attr_mysecondfunnel_create_missed_steps 
  
  ...
[0m11:34:20.844547 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.847172 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */
EXCHANGE TABLES test.attr_myfirstfunnel_create_missed_steps__dbt_backup AND test.attr_myfirstfunnel_create_missed_steps 
  
  ...
[0m11:34:20.850459 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.851164 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.855514 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps"} */
drop table if exists test.attr_mysecondfunnel_create_missed_steps__dbt_backup 
  ...
[0m11:34:20.859779 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps"} */
drop table if exists test.attr_myfirstfunnel_create_missed_steps__dbt_backup 
  ...
[0m11:34:20.864912 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.866191 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps (execute): 2024-06-06 11:34:20.693336 => 2024-06-06 11:34:20.866133
[0m11:34:20.866816 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cfbda50>]}
[0m11:34:20.867546 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.868185 [info ] [Thread-2 (]: 81 of 90 OK created sql table model test.attr_myfirstfunnel_create_missed_steps  [[32mOK[0m in 0.19s]
[0m11:34:20.869675 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps (execute): 2024-06-06 11:34:20.700640 => 2024-06-06 11:34:20.869603
[0m11:34:20.870300 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_create_missed_steps
[0m11:34:20.871865 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d121c60>]}
[0m11:34:20.873602 [info ] [Thread-1 (]: 82 of 90 OK created sql table model test.attr_mysecondfunnel_create_missed_steps  [[32mOK[0m in 0.19s]
[0m11:34:20.874304 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_create_missed_steps
[0m11:34:20.874900 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m11:34:20.876238 [info ] [Thread-2 (]: 83 of 90 START sql table model test.attr_myfirstfunnel_join_to_attr_prepare_with_qid  [RUN]
[0m11:34:20.877382 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m11:34:20.878173 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid'
[0m11:34:20.878693 [info ] [Thread-1 (]: 84 of 90 START sql table model test.attr_mysecondfunnel_join_to_attr_prepare_with_qid  [RUN]
[0m11:34:20.879108 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid)
[0m11:34:20.879941 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid'
[0m11:34:20.880901 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m11:34:20.881435 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid)
[0m11:34:20.888878 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"
[0m11:34:20.889462 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m11:34:20.895911 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"
[0m11:34:20.896827 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid (compile): 2024-06-06 11:34:20.881890 => 2024-06-06 11:34:20.896662
[0m11:34:20.897408 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid (compile): 2024-06-06 11:34:20.889893 => 2024-06-06 11:34:20.897248
[0m11:34:20.898142 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m11:34:20.898438 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m11:34:20.902283 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

            

    
        create table test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__period_number,__datetime,__priority,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_prepare_with_qid
-- depends_on: test.attr_myfirstfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,

    CASE
    WHEN __priority = 3 and not __if_missed = 1 THEN 1
    WHEN __priority = 2 and not __if_missed = 1 THEN 2
    WHEN __priority = 1 and not __if_missed = 1 THEN 3
    
    ELSE 0
    END as __first_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без веб сессии]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 4 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_myfirstfunnel_prepare_with_qid AS x
join test.attr_myfirstfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





    )
        ...
[0m11:34:20.907293 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

            

    
        create table test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__period_number,__datetime,__priority,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_prepare_with_qid
-- depends_on: test.attr_mysecondfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 3 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_mysecondfunnel_prepare_with_qid AS x
join test.attr_mysecondfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





    )
        ...
[0m11:34:20.934174 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:20.934792 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:20.938023 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.940984 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:20.948634 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.949832 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.952465 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"
[0m11:34:20.955384 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"
[0m11:34:20.957288 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "adSourceDirty")
  -- depends_on: test.attr_mysecondfunnel_prepare_with_qid
-- depends_on: test.attr_mysecondfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 2 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 3 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_mysecondfunnel_prepare_with_qid AS x
join test.attr_mysecondfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





  ...
[0m11:34:20.958495 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_prepare_with_qid
-- depends_on: test.attr_myfirstfunnel_create_missed_steps






select 
    y.__period_number as __period_number, 
    y.__if_missed as __if_missed, 
    y.__priority as __priority, 
    y.__step as __step,
    x.*EXCEPT(adSourceDirty),



    CASE
    WHEN LENGTH (adSourceDirty) < 2 THEN 1
    WHEN match(adSourceDirty, 'Органическая установка') THEN 2
    WHEN __priority = 4 and not __if_missed = 1 THEN 3
    WHEN __priority = 3 and not __if_missed = 1 THEN 4
    WHEN __priority = 2 and not __if_missed = 1 THEN 5
    WHEN __priority = 1 and not __if_missed = 1 THEN 6
    
    ELSE 0
    END as __last_click_rank,

    CASE
    WHEN __priority = 3 and not __if_missed = 1 THEN 1
    WHEN __priority = 2 and not __if_missed = 1 THEN 2
    WHEN __priority = 1 and not __if_missed = 1 THEN 3
    
    ELSE 0
    END as __first_click_rank,



CASE

         WHEN  __if_missed and __priority = 1 
         THEN '[Без веб сессии]'
    

         WHEN  __if_missed and __priority = 2 
         THEN '[Без установки]'
    

         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    
         WHEN  __if_missed and __priority = 3 
         THEN '[Без апп сессии]'
    

         WHEN  __if_missed and __priority = 4 
         THEN ''
    

ELSE adSourceDirty
END as adSourceDirty

from test.attr_myfirstfunnel_prepare_with_qid AS x
join test.attr_myfirstfunnel_create_missed_steps AS y
    using (qid, __datetime, __link, __id)





  ...
[0m11:34:20.974856 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.976191 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */
EXCHANGE TABLES test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup AND test.attr_mysecondfunnel_join_to_attr_prepare_with_qid 
  
  ...
[0m11:34:20.977350 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:20.979387 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */
EXCHANGE TABLES test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup AND test.attr_myfirstfunnel_join_to_attr_prepare_with_qid 
  
  ...
[0m11:34:20.980534 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.984613 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid"} */
drop table if exists test.attr_mysecondfunnel_join_to_attr_prepare_with_qid__dbt_backup 
  ...
[0m11:34:20.985419 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.990163 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid"} */
drop table if exists test.attr_myfirstfunnel_join_to_attr_prepare_with_qid__dbt_backup 
  ...
[0m11:34:20.991073 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:20.993250 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid (execute): 2024-06-06 11:34:20.902771 => 2024-06-06 11:34:20.993167
[0m11:34:20.994513 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d0dd300>]}
[0m11:34:20.995985 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:20.995413 [info ] [Thread-1 (]: 84 of 90 OK created sql table model test.attr_mysecondfunnel_join_to_attr_prepare_with_qid  [[32mOK[0m in 0.11s]
[0m11:34:20.997607 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid (execute): 2024-06-06 11:34:20.898632 => 2024-06-06 11:34:20.997523
[0m11:34:20.998127 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_join_to_attr_prepare_with_qid
[0m11:34:20.998760 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d1231f0>]}
[0m11:34:22.070208 [info ] [Thread-2 (]: 83 of 90 OK created sql table model test.attr_myfirstfunnel_join_to_attr_prepare_with_qid  [[32mOK[0m in 0.12s]
[0m11:34:22.070937 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_join_to_attr_prepare_with_qid
[0m11:34:22.073335 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m11:34:22.073884 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m11:34:22.074542 [info ] [Thread-1 (]: 85 of 90 START sql table model test.attr_myfirstfunnel_model ................... [RUN]
[0m11:34:22.075633 [info ] [Thread-2 (]: 86 of 90 START sql table model test.attr_mysecondfunnel_model .................. [RUN]
[0m11:34:22.076841 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_model'
[0m11:34:22.077938 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_model'
[0m11:34:22.078480 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_model)
[0m11:34:22.078858 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_model)
[0m11:34:22.079283 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m11:34:22.080277 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m11:34:22.090524 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_model"
[0m11:34:22.097401 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_model"
[0m11:34:22.104689 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_model (compile): 2024-06-06 11:34:22.091100 => 2024-06-06 11:34:22.104561
[0m11:34:22.105106 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_model (compile): 2024-06-06 11:34:22.080791 => 2024-06-06 11:34:22.104976
[0m11:34:22.105596 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m11:34:22.106097 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m11:34:22.112112 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

            

    
        create table test.attr_mysecondfunnel_model__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

     from test.attr_mysecondfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_adSourceDirty
        
     


 FROM target_count



    )
        ...
[0m11:34:22.116517 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

            

    
        create table test.attr_myfirstfunnel_model__dbt_backup
        
  
        
  engine = MergeTree()
        order by (qid,__datetime,__id)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

        ,max(__first_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_first_click_rank

     from test.attr_myfirstfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

         ,__first_click_rank = __max_first_click_rank as  __first_click__rank_condition
         ,sum(case when __first_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __first_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_adSourceDirty
        
     

    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_adSourceDirty
        
     


 FROM target_count



    )
        ...
[0m11:34:22.143794 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:22.146978 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_model__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.148672 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:22.153285 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_model__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.154643 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.156391 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_model"
[0m11:34:22.158217 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_model__dbt_backup ("qid", "__datetime", "__id", "__priority", "__if_missed", "__link", "__period_number", "__mysecondfunnel_last_click_utmSource", "__mysecondfunnel_last_click_utmMedium", "__mysecondfunnel_last_click_utmCampaign", "__mysecondfunnel_last_click_utmTerm", "__mysecondfunnel_last_click_utmContent", "__mysecondfunnel_last_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

     from test.attr_mysecondfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __mysecondfunnel_last_click_adSourceDirty
        
     


 FROM target_count



  ...
[0m11:34:22.161239 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.163231 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_model"
[0m11:34:22.163757 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_model__dbt_backup ("qid", "__datetime", "__id", "__priority", "__if_missed", "__link", "__period_number", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_join_to_attr_prepare_with_qid







with
max_last_click_rank as (

    select
        *

        ,max(__last_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_last_click_rank

        ,max(__first_click_rank) over(partition by qid, __period_number order by __datetime, __priority, __id) as __max_first_click_rank

     from test.attr_myfirstfunnel_join_to_attr_prepare_with_qid

),


target_count as (

    select
        *

         ,__last_click_rank = __max_last_click_rank as  __last_click__rank_condition
         ,sum(case when __last_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __last_click__target_count 

         ,__first_click_rank = __max_first_click_rank as  __first_click__rank_condition
         ,sum(case when __first_click__rank_condition then 1 else 0 end) over(partition by qid, __period_number order by __datetime, __priority, __id) as __first_click__target_count 

    from max_last_click_rank
)


SELECT 
    qid, __datetime, __id, __priority,`__if_missed`,__link,__period_number


    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number, __last_click__target_count  order by  __datetime, __priority, __id) as __myfirstfunnel_last_click_adSourceDirty
        
     

    
        
        
            ,first_value(utmSource) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmSource
        
            ,first_value(utmMedium) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmMedium
        
            ,first_value(utmCampaign) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmCampaign
        
            ,first_value(utmTerm) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmTerm
        
            ,first_value(utmContent) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_utmContent
        
            ,first_value(adSourceDirty) over(partition by qid, __period_number order by __first_click_rank desc,__datetime, __priority, __id) as __myfirstfunnel_first_click_adSourceDirty
        
     


 FROM target_count



  ...
[0m11:34:22.178458 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:22.180558 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */
EXCHANGE TABLES test.attr_mysecondfunnel_model__dbt_backup AND test.attr_mysecondfunnel_model 
  
  ...
[0m11:34:22.183210 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:22.184475 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */
EXCHANGE TABLES test.attr_myfirstfunnel_model__dbt_backup AND test.attr_myfirstfunnel_model 
  
  ...
[0m11:34:22.186687 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.190959 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_model"} */
drop table if exists test.attr_mysecondfunnel_model__dbt_backup 
  ...
[0m11:34:22.191653 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.196210 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_model: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_model"} */
drop table if exists test.attr_myfirstfunnel_model__dbt_backup 
  ...
[0m11:34:22.199428 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.200039 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:22.201833 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_model (execute): 2024-06-06 11:34:22.106421 => 2024-06-06 11:34:22.201771
[0m11:34:22.204320 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_model (execute): 2024-06-06 11:34:22.112638 => 2024-06-06 11:34:22.204199
[0m11:34:22.205079 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cd8af20>]}
[0m11:34:22.206012 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43d00bf40>]}
[0m11:34:22.207307 [info ] [Thread-2 (]: 86 of 90 OK created sql table model test.attr_mysecondfunnel_model ............. [[32mOK[0m in 0.13s]
[0m11:34:22.208546 [info ] [Thread-1 (]: 85 of 90 OK created sql table model test.attr_myfirstfunnel_model .............. [[32mOK[0m in 0.13s]
[0m11:34:22.209349 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_model
[0m11:34:22.209837 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_model
[0m11:34:22.211051 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m11:34:22.211564 [info ] [Thread-2 (]: 87 of 90 START sql table model test.attr_mysecondfunnel_final_table ............ [RUN]
[0m11:34:22.212111 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m11:34:22.212698 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_mysecondfunnel_final_table'
[0m11:34:22.213216 [info ] [Thread-1 (]: 88 of 90 START sql table model test.attr_myfirstfunnel_final_table ............. [RUN]
[0m11:34:22.213690 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_mysecondfunnel_final_table)
[0m11:34:22.214596 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.attr_myfirstfunnel_final_table'
[0m11:34:22.215186 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m11:34:22.215475 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.attr_myfirstfunnel_final_table)
[0m11:34:22.219314 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"
[0m11:34:22.219942 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m11:34:22.223964 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"
[0m11:34:22.225825 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_final_table (compile): 2024-06-06 11:34:22.220780 => 2024-06-06 11:34:22.225641
[0m11:34:22.226758 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_final_table (compile): 2024-06-06 11:34:22.215731 => 2024-06-06 11:34:22.226501
[0m11:34:22.227458 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m11:34:22.228186 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m11:34:22.235087 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

            

    
        create table test.attr_myfirstfunnel_final_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.attr_myfirstfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_myfirstfunnel_join_to_attr_prepare_with_qid
        join  test.attr_myfirstfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



    )
        ...
[0m11:34:22.240271 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

            

    
        create table test.attr_mysecondfunnel_final_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.attr_mysecondfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_mysecondfunnel_join_to_attr_prepare_with_qid
        join  test.attr_mysecondfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



    )
        ...
[0m11:34:22.274747 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:22.279237 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_final_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.280015 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.04 seconds
[0m11:34:22.284005 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

    select name, type from system.columns where table = 'attr_mysecondfunnel_final_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.288533 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.291350 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"
[0m11:34:22.292305 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.294587 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"
[0m11:34:22.295693 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */

  
    
    
        
        insert into test.attr_mysecondfunnel_final_table__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "adSourceDirty", "__mysecondfunnel_last_click_utmSource", "__mysecondfunnel_last_click_utmMedium", "__mysecondfunnel_last_click_utmCampaign", "__mysecondfunnel_last_click_utmTerm", "__mysecondfunnel_last_click_utmContent", "__mysecondfunnel_last_click_adSourceDirty")
  -- depends_on: test.attr_mysecondfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_mysecondfunnel_join_to_attr_prepare_with_qid
        join  test.attr_mysecondfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



  ...
[0m11:34:22.296983 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */

  
    
    
        
        insert into test.attr_myfirstfunnel_final_table__dbt_backup ("__period_number", "__if_missed", "__priority", "__step", "qid", "__date", "__table_name", "event_datetime", "accountName", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "transactionId", "utmHash", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "__emitted_at", "__link", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "UtmHashHash", "YmClientHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "adSourceDirty", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.attr_myfirstfunnel_model




with 
    out as ( 
        select * except(_dbt_source_relation) 
        from  test.attr_myfirstfunnel_join_to_attr_prepare_with_qid
        join  test.attr_myfirstfunnel_model
            using (qid, __datetime, __id, __link, __period_number, __if_missed, __priority)
    )
    
select * from out



  ...
[0m11:34:22.320557 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.02 seconds
[0m11:34:22.321963 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */
EXCHANGE TABLES test.attr_mysecondfunnel_final_table__dbt_backup AND test.attr_mysecondfunnel_final_table 
  
  ...
[0m11:34:22.325451 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.03 seconds
[0m11:34:22.326593 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */
EXCHANGE TABLES test.attr_myfirstfunnel_final_table__dbt_backup AND test.attr_myfirstfunnel_final_table 
  
  ...
[0m11:34:22.327238 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:22.332408 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_mysecondfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_mysecondfunnel_final_table"} */
drop table if exists test.attr_mysecondfunnel_final_table__dbt_backup 
  ...
[0m11:34:22.338356 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.342189 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.attr_myfirstfunnel_final_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.attr_myfirstfunnel_final_table"} */
drop table if exists test.attr_myfirstfunnel_final_table__dbt_backup 
  ...
[0m11:34:22.343468 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.344879 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.attr_mysecondfunnel_final_table (execute): 2024-06-06 11:34:22.235631 => 2024-06-06 11:34:22.344818
[0m11:34:22.345571 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cebabc0>]}
[0m11:34:22.346057 [info ] [Thread-2 (]: 87 of 90 OK created sql table model test.attr_mysecondfunnel_final_table ....... [[32mOK[0m in 0.13s]
[0m11:34:22.346554 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.attr_mysecondfunnel_final_table
[0m11:34:22.348156 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.349359 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.attr_myfirstfunnel_final_table (execute): 2024-06-06 11:34:22.228741 => 2024-06-06 11:34:22.349302
[0m11:34:22.349920 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43ceb82b0>]}
[0m11:34:22.350303 [info ] [Thread-1 (]: 88 of 90 OK created sql table model test.attr_myfirstfunnel_final_table ........ [[32mOK[0m in 0.14s]
[0m11:34:22.350636 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.attr_myfirstfunnel_final_table
[0m11:34:22.352443 [debug] [Thread-2 (]: Began running node model.etlcraft_integration_tests.dataset_event_table
[0m11:34:22.353001 [debug] [Thread-1 (]: Began running node model.etlcraft_integration_tests.dataset_event_table2
[0m11:34:22.353494 [info ] [Thread-2 (]: 89 of 90 START sql table model test.dataset_event_table ........................ [RUN]
[0m11:34:22.354312 [info ] [Thread-1 (]: 90 of 90 START sql table model test.dataset_event_table2 ....................... [RUN]
[0m11:34:22.355230 [debug] [Thread-2 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.dataset_event_table'
[0m11:34:22.355930 [debug] [Thread-1 (]: Acquiring new clickhouse connection 'model.etlcraft_integration_tests.dataset_event_table2'
[0m11:34:22.356396 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.dataset_event_table)
[0m11:34:22.356950 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.etlcraft_integration_tests.dataset_event_table2)
[0m11:34:22.357707 [debug] [Thread-2 (]: Began compiling node model.etlcraft_integration_tests.dataset_event_table
[0m11:34:22.358191 [debug] [Thread-1 (]: Began compiling node model.etlcraft_integration_tests.dataset_event_table2
[0m11:34:22.368226 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.376839 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'full_datestat'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.382454 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.386744 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'full_events'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.387710 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.394837 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'attr_myfirstfunnel_final_table'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.396670 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.404989 [debug] [Thread-1 (]: Writing injected SQL for node "model.etlcraft_integration_tests.dataset_event_table2"
[0m11:34:22.406807 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.418239 [debug] [Thread-2 (]: Writing injected SQL for node "model.etlcraft_integration_tests.dataset_event_table"
[0m11:34:22.418761 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table2 (compile): 2024-06-06 11:34:22.368613 => 2024-06-06 11:34:22.418614
[0m11:34:22.419549 [debug] [Thread-1 (]: Began executing node model.etlcraft_integration_tests.dataset_event_table2
[0m11:34:22.425170 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

            

    
        create table test.dataset_event_table2__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table


   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
    )
        ...
[0m11:34:22.427019 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table (compile): 2024-06-06 11:34:22.358594 => 2024-06-06 11:34:22.426782
[0m11:34:22.427430 [debug] [Thread-2 (]: Began executing node model.etlcraft_integration_tests.dataset_event_table
[0m11:34:22.432177 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

            

    
        create table test.dataset_event_table__dbt_backup
        
  
        
  engine = MergeTree()
        order by (__datetime)
        
        
        
        empty
    as (
        -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table



   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
    )
        ...
[0m11:34:22.488259 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.06 seconds
[0m11:34:22.491453 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

    select name, type from system.columns where table = 'dataset_event_table2__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.496064 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:22.498506 [debug] [Thread-1 (]: Writing runtime sql for node "model.etlcraft_integration_tests.dataset_event_table2"
[0m11:34:22.499595 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */

  
    
    
        
        insert into test.dataset_event_table2__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "event_datetime", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "transactionId", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "YmClientHash", "qid", "AppProfileMatchingHash")
  -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table


   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toUInt64(0) as qid ,
                            toString('') as AppProfileMatchingHash 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toUInt64("qid") as qid ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash 

            from test.full_events
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
  ...
[0m11:34:22.505216 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.07 seconds
[0m11:34:22.508454 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

    select name, type from system.columns where table = 'dataset_event_table__dbt_backup'
    
      and database = 'test'
    
    order by position
  ...
[0m11:34:22.513465 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:22.516218 [debug] [Thread-2 (]: Writing runtime sql for node "model.etlcraft_integration_tests.dataset_event_table"
[0m11:34:22.516773 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */

  
    
    
        
        insert into test.dataset_event_table__dbt_backup ("__date", "reportType", "accountName", "__table_name", "adSourceDirty", "adCampaignName", "adId", "utmSource", "utmMedium", "utmCampaign", "utmTerm", "utmContent", "utmHash", "adTitle1", "adText", "adCost", "impressions", "clicks", "__emitted_at", "__link", "adGroupName", "adPhraseId", "AdCostStatHash", "UtmHashHash", "__id", "__datetime", "utm_base_url", "utm_utmSource", "utm_utmMedium", "utm_utmCampaign", "utm_project", "utm_utmContent", "utm_strategy", "utm_audience", "UtmHashRegistryHash", "__period_number", "__if_missed", "__priority", "__step", "qid", "event_datetime", "appmetricaDeviceId", "mobileAdsId", "crmUserId", "promoCode", "osName", "cityName", "transactionId", "sessions", "addToCartSessions", "cartViewSessions", "checkoutSessions", "webSalesSessions", "sales", "amountSales", "registrationCardSessions", "registrationButtonClick", "linkingCardToPhoneNumberSessions", "registrationLendingPromotionsSessions", "registrationCashbackSessions", "instantDiscountActivationSessions", "couponActivationSessions", "participationInLotterySessions", "pagesViews", "screenView", "installApp", "installs", "installationDeviceId", "visitId", "clientId", "cityCode", "pageViews", "AppInstallStatHash", "AppEventStatHash", "AppSessionStatHash", "AppDeeplinkStatHash", "VisitStatHash", "AppMetricaDeviceHash", "CrmUserHash", "YmClientHash", "AppProfileMatchingHash", "__last_click_rank", "__first_click_rank", "__myfirstfunnel_last_click_utmSource", "__myfirstfunnel_last_click_utmMedium", "__myfirstfunnel_last_click_utmCampaign", "__myfirstfunnel_last_click_utmTerm", "__myfirstfunnel_last_click_utmContent", "__myfirstfunnel_last_click_adSourceDirty", "__myfirstfunnel_first_click_utmSource", "__myfirstfunnel_first_click_utmMedium", "__myfirstfunnel_first_click_utmCampaign", "__myfirstfunnel_first_click_utmTerm", "__myfirstfunnel_first_click_utmContent", "__myfirstfunnel_first_click_adSourceDirty")
  -- depends_on: test.full_datestat
-- depends_on: test.attr_myfirstfunnel_final_table



   
    
   
    
  
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'yd'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'appmetrica'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
    UNION ALL
  
    SELECT * FROM (

        (
            select
                            toDate("__date") as __date ,
                            toString("reportType") as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString("adCampaignName") as adCampaignName ,
                            toString("adId") as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString("adTitle1") as adTitle1 ,
                            toString("adText") as adText ,
                            toFloat64("adCost") as adCost ,
                            toInt64("impressions") as impressions ,
                            toInt64("clicks") as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString("adGroupName") as adGroupName ,
                            toString("adPhraseId") as adPhraseId ,
                            toString("AdCostStatHash") as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64(0) as __period_number ,
                            toBool(0) as __if_missed ,
                            toUInt16(0) as __priority ,
                            toNullable('') as __step ,
                            toUInt64(0) as qid ,
                            toDateTime(0) as event_datetime ,
                            toString('') as appmetricaDeviceId ,
                            toString('') as mobileAdsId ,
                            toString('') as crmUserId ,
                            toString('') as promoCode ,
                            toString('') as osName ,
                            toString('') as cityName ,
                            toString('') as transactionId ,
                            toUInt64(0) as sessions ,
                            toUInt64(0) as addToCartSessions ,
                            toUInt64(0) as cartViewSessions ,
                            toUInt64(0) as checkoutSessions ,
                            toUInt64(0) as webSalesSessions ,
                            toUInt64(0) as sales ,
                            toFloat64(0) as amountSales ,
                            toUInt64(0) as registrationCardSessions ,
                            toUInt64(0) as registrationButtonClick ,
                            toUInt64(0) as linkingCardToPhoneNumberSessions ,
                            toUInt64(0) as registrationLendingPromotionsSessions ,
                            toUInt64(0) as registrationCashbackSessions ,
                            toUInt64(0) as instantDiscountActivationSessions ,
                            toUInt64(0) as couponActivationSessions ,
                            toUInt64(0) as participationInLotterySessions ,
                            toUInt64(0) as pagesViews ,
                            toUInt64(0) as screenView ,
                            toUInt64(0) as installApp ,
                            toUInt64(0) as installs ,
                            toString('') as installationDeviceId ,
                            toString('') as visitId ,
                            toString('') as clientId ,
                            toString('') as cityCode ,
                            toUInt64(0) as pageViews ,
                            toString('') as AppInstallStatHash ,
                            toString('') as AppEventStatHash ,
                            toString('') as AppSessionStatHash ,
                            toString('') as AppDeeplinkStatHash ,
                            toString('') as VisitStatHash ,
                            toString('') as AppMetricaDeviceHash ,
                            toString('') as CrmUserHash ,
                            toString('') as YmClientHash ,
                            toString('') as AppProfileMatchingHash ,
                            toUInt8(0) as __last_click_rank ,
                            toUInt8(0) as __first_click_rank ,
                            toString('') as __myfirstfunnel_last_click_utmSource ,
                            toString('') as __myfirstfunnel_last_click_utmMedium ,
                            toString('') as __myfirstfunnel_last_click_utmCampaign ,
                            toString('') as __myfirstfunnel_last_click_utmTerm ,
                            toString('') as __myfirstfunnel_last_click_utmContent ,
                            toString('') as __myfirstfunnel_last_click_adSourceDirty ,
                            toString('') as __myfirstfunnel_first_click_utmSource ,
                            toString('') as __myfirstfunnel_first_click_utmMedium ,
                            toString('') as __myfirstfunnel_first_click_utmCampaign ,
                            toString('') as __myfirstfunnel_first_click_utmTerm ,
                            toString('') as __myfirstfunnel_first_click_utmContent ,
                            toString('') as __myfirstfunnel_first_click_adSourceDirty 

            from test.full_datestat
        )

        union all
        

        (
            select
                            toDate("__date") as __date ,
                            toString('') as reportType ,
                            toString("accountName") as accountName ,
                            toString("__table_name") as __table_name ,
                            toString("adSourceDirty") as adSourceDirty ,
                            toString('') as adCampaignName ,
                            toString('') as adId ,
                            toString("utmSource") as utmSource ,
                            toString("utmMedium") as utmMedium ,
                            toString("utmCampaign") as utmCampaign ,
                            toString("utmTerm") as utmTerm ,
                            toString("utmContent") as utmContent ,
                            toString("utmHash") as utmHash ,
                            toString('') as adTitle1 ,
                            toString('') as adText ,
                            toFloat64(0) as adCost ,
                            toInt64(0) as impressions ,
                            toInt64(0) as clicks ,
                            toDateTime("__emitted_at") as __emitted_at ,
                            toString("__link") as __link ,
                            toString('') as adGroupName ,
                            toString('') as adPhraseId ,
                            toString('') as AdCostStatHash ,
                            toString("UtmHashHash") as UtmHashHash ,
                            toString("__id") as __id ,
                            toDateTime("__datetime") as __datetime ,
                            toString("utm_base_url") as utm_base_url ,
                            toString("utm_utmSource") as utm_utmSource ,
                            toString("utm_utmMedium") as utm_utmMedium ,
                            toString("utm_utmCampaign") as utm_utmCampaign ,
                            toString("utm_project") as utm_project ,
                            toString("utm_utmContent") as utm_utmContent ,
                            toString("utm_strategy") as utm_strategy ,
                            toString("utm_audience") as utm_audience ,
                            toString("UtmHashRegistryHash") as UtmHashRegistryHash ,
                            toInt64("__period_number") as __period_number ,
                            toBool("__if_missed") as __if_missed ,
                            toUInt16("__priority") as __priority ,
                            toNullable("__step") as __step ,
                            toUInt64("qid") as qid ,
                            toDateTime("event_datetime") as event_datetime ,
                            toString("appmetricaDeviceId") as appmetricaDeviceId ,
                            toString("mobileAdsId") as mobileAdsId ,
                            toString("crmUserId") as crmUserId ,
                            toString("promoCode") as promoCode ,
                            toString("osName") as osName ,
                            toString("cityName") as cityName ,
                            toString("transactionId") as transactionId ,
                            toUInt64("sessions") as sessions ,
                            toUInt64("addToCartSessions") as addToCartSessions ,
                            toUInt64("cartViewSessions") as cartViewSessions ,
                            toUInt64("checkoutSessions") as checkoutSessions ,
                            toUInt64("webSalesSessions") as webSalesSessions ,
                            toUInt64("sales") as sales ,
                            toFloat64("amountSales") as amountSales ,
                            toUInt64("registrationCardSessions") as registrationCardSessions ,
                            toUInt64("registrationButtonClick") as registrationButtonClick ,
                            toUInt64("linkingCardToPhoneNumberSessions") as linkingCardToPhoneNumberSessions ,
                            toUInt64("registrationLendingPromotionsSessions") as registrationLendingPromotionsSessions ,
                            toUInt64("registrationCashbackSessions") as registrationCashbackSessions ,
                            toUInt64("instantDiscountActivationSessions") as instantDiscountActivationSessions ,
                            toUInt64("couponActivationSessions") as couponActivationSessions ,
                            toUInt64("participationInLotterySessions") as participationInLotterySessions ,
                            toUInt64("pagesViews") as pagesViews ,
                            toUInt64("screenView") as screenView ,
                            toUInt64("installApp") as installApp ,
                            toUInt64("installs") as installs ,
                            toString("installationDeviceId") as installationDeviceId ,
                            toString("visitId") as visitId ,
                            toString("clientId") as clientId ,
                            toString("cityCode") as cityCode ,
                            toUInt64("pageViews") as pageViews ,
                            toString("AppInstallStatHash") as AppInstallStatHash ,
                            toString("AppEventStatHash") as AppEventStatHash ,
                            toString("AppSessionStatHash") as AppSessionStatHash ,
                            toString("AppDeeplinkStatHash") as AppDeeplinkStatHash ,
                            toString("VisitStatHash") as VisitStatHash ,
                            toString("AppMetricaDeviceHash") as AppMetricaDeviceHash ,
                            toString("CrmUserHash") as CrmUserHash ,
                            toString("YmClientHash") as YmClientHash ,
                            toString("AppProfileMatchingHash") as AppProfileMatchingHash ,
                            toUInt8("__last_click_rank") as __last_click_rank ,
                            toUInt8("__first_click_rank") as __first_click_rank ,
                            toString("__myfirstfunnel_last_click_utmSource") as __myfirstfunnel_last_click_utmSource ,
                            toString("__myfirstfunnel_last_click_utmMedium") as __myfirstfunnel_last_click_utmMedium ,
                            toString("__myfirstfunnel_last_click_utmCampaign") as __myfirstfunnel_last_click_utmCampaign ,
                            toString("__myfirstfunnel_last_click_utmTerm") as __myfirstfunnel_last_click_utmTerm ,
                            toString("__myfirstfunnel_last_click_utmContent") as __myfirstfunnel_last_click_utmContent ,
                            toString("__myfirstfunnel_last_click_adSourceDirty") as __myfirstfunnel_last_click_adSourceDirty ,
                            toString("__myfirstfunnel_first_click_utmSource") as __myfirstfunnel_first_click_utmSource ,
                            toString("__myfirstfunnel_first_click_utmMedium") as __myfirstfunnel_first_click_utmMedium ,
                            toString("__myfirstfunnel_first_click_utmCampaign") as __myfirstfunnel_first_click_utmCampaign ,
                            toString("__myfirstfunnel_first_click_utmTerm") as __myfirstfunnel_first_click_utmTerm ,
                            toString("__myfirstfunnel_first_click_utmContent") as __myfirstfunnel_first_click_utmContent ,
                            toString("__myfirstfunnel_first_click_adSourceDirty") as __myfirstfunnel_first_click_adSourceDirty 

            from test.attr_myfirstfunnel_final_table
        )

        ) 
    WHERE 
    splitByChar('_', __table_name)[4] = 'ym'
    and 
    splitByChar('_', __table_name)[7] = 'testaccount'
    and 
    splitByChar('_', __table_name)[6] = 'default'
  
  ...
[0m11:34:22.602937 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.10 seconds
[0m11:34:22.604460 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */
EXCHANGE TABLES test.dataset_event_table2__dbt_backup AND test.dataset_event_table2 
  
  ...
[0m11:34:22.609943 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.01 seconds
[0m11:34:22.613531 [debug] [Thread-1 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table2: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table2"} */
drop table if exists test.dataset_event_table2__dbt_backup 
  ...
[0m11:34:22.616647 [debug] [Thread-1 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:22.618095 [debug] [Thread-1 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table2 (execute): 2024-06-06 11:34:22.419747 => 2024-06-06 11:34:22.618026
[0m11:34:22.618735 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf37160>]}
[0m11:34:22.619267 [info ] [Thread-1 (]: 90 of 90 OK created sql table model test.dataset_event_table2 .................. [[32mOK[0m in 0.26s]
[0m11:34:22.619683 [debug] [Thread-1 (]: Finished running node model.etlcraft_integration_tests.dataset_event_table2
[0m11:34:22.659774 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.14 seconds
[0m11:34:22.660953 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */
EXCHANGE TABLES test.dataset_event_table__dbt_backup AND test.dataset_event_table 
  
  ...
[0m11:34:22.665510 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:22.670554 [debug] [Thread-2 (]: dbt_clickhouse adapter: On model.etlcraft_integration_tests.dataset_event_table: /* {"app": "dbt", "dbt_version": "1.4.7", "profile_name": "dbt_local", "target_name": "dev", "node_id": "model.etlcraft_integration_tests.dataset_event_table"} */
drop table if exists test.dataset_event_table__dbt_backup 
  ...
[0m11:34:22.674729 [debug] [Thread-2 (]: dbt_clickhouse adapter: SQL status: OK in 0.00 seconds
[0m11:34:22.677212 [debug] [Thread-2 (]: Timing info for model.etlcraft_integration_tests.dataset_event_table (execute): 2024-06-06 11:34:22.427674 => 2024-06-06 11:34:22.677135
[0m11:34:22.678427 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba012d5d-a239-4b84-a0c3-73f61e0299c9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43cf14f40>]}
[0m11:34:22.678971 [info ] [Thread-2 (]: 89 of 90 OK created sql table model test.dataset_event_table ................... [[32mOK[0m in 0.32s]
[0m11:34:22.679316 [debug] [Thread-2 (]: Finished running node model.etlcraft_integration_tests.dataset_event_table
[0m11:34:22.682136 [debug] [MainThread]: Acquiring new clickhouse connection 'master'
[0m11:34:22.682607 [debug] [MainThread]: Connection 'master' was properly closed.
[0m11:34:22.682730 [debug] [MainThread]: Connection 'model.etlcraft_integration_tests.dataset_event_table2' was left open.
[0m11:34:22.682853 [debug] [MainThread]: On model.etlcraft_integration_tests.dataset_event_table2: Close
[0m11:34:22.682945 [debug] [MainThread]: Connection 'model.etlcraft_integration_tests.dataset_event_table' was left open.
[0m11:34:22.683047 [debug] [MainThread]: On model.etlcraft_integration_tests.dataset_event_table: Close
[0m11:34:22.683455 [info ] [MainThread]: 
[0m11:34:22.683719 [info ] [MainThread]: Finished running 19 view models, 27 incremental models, 44 table models in 0 hours 0 minutes and 12.59 seconds (12.59s).
[0m11:34:22.687225 [debug] [MainThread]: Command end result
[0m11:34:22.705236 [info ] [MainThread]: 
[0m11:34:22.705737 [info ] [MainThread]: [32mCompleted successfully[0m
[0m11:34:22.706003 [info ] [MainThread]: 
[0m11:34:22.706215 [info ] [MainThread]: Done. PASS=90 WARN=0 ERROR=0 SKIP=0 TOTAL=90
[0m11:34:22.706791 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f1e7d90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f1c7f70>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd43f27c5e0>]}
[0m11:34:22.707221 [debug] [MainThread]: Flushing usage events
